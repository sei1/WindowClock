
WindowClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00803800  00000f1e  00000fb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00803812  00803812  00000fc4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ff4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002138  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001abe  00000000  00000000  000031c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a80  00000000  00000000  00004c82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00005704  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000df3  00000000  00000000  000058c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007f0  00000000  00000000  000066b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00006ea3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 37 04 	jmp	0x86e	; 0x86e <__vector_4>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__vector_6>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 12 02 	jmp	0x424	; 0x424 <__vector_10>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
  88:	18 e3       	ldi	r17, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	ee e1       	ldi	r30, 0x1E	; 30
  90:	ff e0       	ldi	r31, 0x0F	; 15
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 31       	cpi	r26, 0x12	; 18
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	28 e3       	ldi	r18, 0x38	; 56
  a0:	a2 e1       	ldi	r26, 0x12	; 18
  a2:	b8 e3       	ldi	r27, 0x38	; 56
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a3 33       	cpi	r26, 0x33	; 51
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 16 05 	call	0xa2c	; 0xa2c <main>
  b2:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <get_v>:
// プログラム本文
//---------------------------------


//キャパシタに蓄えられた電源電圧と太陽電池の発電電圧を取得する関数
void get_v (void) {
  ba:	cf 92       	push	r12
  bc:	df 92       	push	r13
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
	
	uint16_t x = 0;
	uint16_t y = 0;

	//PB1をタクトスイッチ入力から一時的に太陽電池電圧の測定ピンに切り替える
	PORTB_PIN1CTRL = 0b00000000; //プルアップ無効 エッジを検出しない
  c6:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>
	VPORTB_DIR    |= 0b00000010; //出力モードに変更
  ca:	84 b1       	in	r24, 0x04	; 4
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	84 b9       	out	0x04, r24	; 4
	VPORTB_OUT    &= 0b11111101; //出力Low
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	8d 7f       	andi	r24, 0xFD	; 253
  d4:	85 b9       	out	0x05, r24	; 5

	//この状態でPB1の電圧を抜いている間に基準電圧1.1V / 電源電圧を測定しておく

	// 基準電圧1.1V / 電源電圧 を10bit(1024段階)で測定
	ADC0_MUXPOS = 0b00011101; //基準電圧
  d6:	8d e1       	ldi	r24, 0x1D	; 29
  d8:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7f8606>

	ADC0_COMMAND = 1;//AD変換開始
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
	while(ADC0_COMMAND);
  e2:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
  e6:	81 11       	cpse	r24, r1
  e8:	fc cf       	rjmp	.-8      	; 0xe2 <get_v+0x28>
	ADC0_COMMAND = 0;//AD変換終了
  ea:	c8 e0       	ldi	r28, 0x08	; 8
  ec:	d6 e0       	ldi	r29, 0x06	; 6
  ee:	18 82       	st	Y, r1

	y = ADC0_RES;
  f0:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
  f4:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
	
	//電源電圧を算出
	supply_v = 1023 * 1.1 / y;
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__floatunsisf>
 100:	6b 01       	movw	r12, r22
 102:	7c 01       	movw	r14, r24
 104:	9b 01       	movw	r18, r22
 106:	ac 01       	movw	r20, r24
 108:	6a e9       	ldi	r22, 0x9A	; 154
 10a:	79 ea       	ldi	r23, 0xA9	; 169
 10c:	8c e8       	ldi	r24, 0x8C	; 140
 10e:	94 e4       	ldi	r25, 0x44	; 68
 110:	0e 94 c8 05 	call	0xb90	; 0xb90 <__divsf3>
 114:	60 93 28 38 	sts	0x3828, r22	; 0x803828 <supply_v>
 118:	70 93 29 38 	sts	0x3829, r23	; 0x803829 <supply_v+0x1>
 11c:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <supply_v+0x2>
 120:	90 93 2b 38 	sts	0x382B, r25	; 0x80382b <supply_v+0x3>


	//PB1を入力モードに戻す
	VPORTB_DIR    &= 0b11111101; 
 124:	84 b1       	in	r24, 0x04	; 4
 126:	8d 7f       	andi	r24, 0xFD	; 253
 128:	84 b9       	out	0x04, r24	; 4

	//ADC入力ピンの選択
	// PB1ピンの電圧 / 電源電圧 を10bit(1024段階)で測定
	ADC0_MUXPOS = 0b00001010; //AIN10 = PB1
 12a:	8a e0       	ldi	r24, 0x0A	; 10
 12c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7f8606>

	ADC0_COMMAND = 1;//AD変換開始
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	88 83       	st	Y, r24
	while(ADC0_COMMAND);
 134:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
 138:	81 11       	cpse	r24, r1
 13a:	fc cf       	rjmp	.-8      	; 0x134 <__EEPROM_REGION_LENGTH__+0x34>
	ADC0_COMMAND = 0;//AD変換終了
 13c:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>

	x = ADC0_RES;
 140:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
 144:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>

	//PB1のプルアップを有効に戻す
	PORTB_PIN1CTRL = 0b00001001; //プルアップ有効 両方のエッジを検出する
 148:	89 e0       	ldi	r24, 0x09	; 9
 14a:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>

	//太陽電池電圧を算出
	solar_v = x * 1.1 / y;
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__floatunsisf>
 156:	2d ec       	ldi	r18, 0xCD	; 205
 158:	3c ec       	ldi	r19, 0xCC	; 204
 15a:	4c e8       	ldi	r20, 0x8C	; 140
 15c:	5f e3       	ldi	r21, 0x3F	; 63
 15e:	0e 94 20 07 	call	0xe40	; 0xe40 <__mulsf3>
 162:	a7 01       	movw	r20, r14
 164:	96 01       	movw	r18, r12
 166:	0e 94 c8 05 	call	0xb90	; 0xb90 <__divsf3>
 16a:	6b 01       	movw	r12, r22
 16c:	7c 01       	movw	r14, r24
 16e:	60 93 24 38 	sts	0x3824, r22	; 0x803824 <solar_v>
 172:	70 93 25 38 	sts	0x3825, r23	; 0x803825 <solar_v+0x1>
 176:	80 93 26 38 	sts	0x3826, r24	; 0x803826 <solar_v+0x2>
 17a:	90 93 27 38 	sts	0x3827, r25	; 0x803827 <solar_v+0x3>


	//7セグの明るさ設定
	//太陽電池の電圧によって周囲の明るさを判定し7セグの明るさを変化させる
	if(solar_v > 1.8 || discharge) {
 17e:	26 e6       	ldi	r18, 0x66	; 102
 180:	36 e6       	ldi	r19, 0x66	; 102
 182:	46 ee       	ldi	r20, 0xE6	; 230
 184:	5f e3       	ldi	r21, 0x3F	; 63
 186:	0e 94 1b 07 	call	0xe36	; 0xe36 <__gesf2>
 18a:	18 16       	cp	r1, r24
 18c:	24 f0       	brlt	.+8      	; 0x196 <__EEPROM_REGION_LENGTH__+0x96>
 18e:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <discharge>
 192:	88 23       	and	r24, r24
 194:	21 f0       	breq	.+8      	; 0x19e <__EEPROM_REGION_LENGTH__+0x9e>
		brightness = 6;
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <brightness>
 19c:	3b c0       	rjmp	.+118    	; 0x214 <__EEPROM_REGION_LENGTH__+0x114>
	}else if(solar_v > 1.2) {
 19e:	2a e9       	ldi	r18, 0x9A	; 154
 1a0:	39 e9       	ldi	r19, 0x99	; 153
 1a2:	49 e9       	ldi	r20, 0x99	; 153
 1a4:	5f e3       	ldi	r21, 0x3F	; 63
 1a6:	c7 01       	movw	r24, r14
 1a8:	b6 01       	movw	r22, r12
 1aa:	0e 94 1b 07 	call	0xe36	; 0xe36 <__gesf2>
 1ae:	18 16       	cp	r1, r24
 1b0:	24 f4       	brge	.+8      	; 0x1ba <__EEPROM_REGION_LENGTH__+0xba>
		brightness = 5;
 1b2:	85 e0       	ldi	r24, 0x05	; 5
 1b4:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <brightness>
 1b8:	2d c0       	rjmp	.+90     	; 0x214 <__EEPROM_REGION_LENGTH__+0x114>
	}else if(solar_v > 0.8) {
 1ba:	2d ec       	ldi	r18, 0xCD	; 205
 1bc:	3c ec       	ldi	r19, 0xCC	; 204
 1be:	4c e4       	ldi	r20, 0x4C	; 76
 1c0:	5f e3       	ldi	r21, 0x3F	; 63
 1c2:	c7 01       	movw	r24, r14
 1c4:	b6 01       	movw	r22, r12
 1c6:	0e 94 1b 07 	call	0xe36	; 0xe36 <__gesf2>
 1ca:	18 16       	cp	r1, r24
 1cc:	24 f4       	brge	.+8      	; 0x1d6 <__EEPROM_REGION_LENGTH__+0xd6>
		brightness = 4;
 1ce:	84 e0       	ldi	r24, 0x04	; 4
 1d0:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <brightness>
 1d4:	1f c0       	rjmp	.+62     	; 0x214 <__EEPROM_REGION_LENGTH__+0x114>
	}else if(solar_v > 0.5) {
 1d6:	20 e0       	ldi	r18, 0x00	; 0
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	5f e3       	ldi	r21, 0x3F	; 63
 1de:	c7 01       	movw	r24, r14
 1e0:	b6 01       	movw	r22, r12
 1e2:	0e 94 1b 07 	call	0xe36	; 0xe36 <__gesf2>
 1e6:	18 16       	cp	r1, r24
 1e8:	24 f4       	brge	.+8      	; 0x1f2 <__EEPROM_REGION_LENGTH__+0xf2>
		brightness = 3;
 1ea:	83 e0       	ldi	r24, 0x03	; 3
 1ec:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <brightness>
 1f0:	11 c0       	rjmp	.+34     	; 0x214 <__EEPROM_REGION_LENGTH__+0x114>
	}else if(solar_v > 0.3) {
 1f2:	2a e9       	ldi	r18, 0x9A	; 154
 1f4:	39 e9       	ldi	r19, 0x99	; 153
 1f6:	49 e9       	ldi	r20, 0x99	; 153
 1f8:	5e e3       	ldi	r21, 0x3E	; 62
 1fa:	c7 01       	movw	r24, r14
 1fc:	b6 01       	movw	r22, r12
 1fe:	0e 94 1b 07 	call	0xe36	; 0xe36 <__gesf2>
 202:	18 16       	cp	r1, r24
 204:	24 f4       	brge	.+8      	; 0x20e <__EEPROM_REGION_LENGTH__+0x10e>
		brightness = 2;
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <brightness>
 20c:	03 c0       	rjmp	.+6      	; 0x214 <__EEPROM_REGION_LENGTH__+0x114>
	}else{
		brightness = 1;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <brightness>
	}

	//電圧を7セグに表示する準備 ここで行っておくことで計算が1回で済みTCA割り込みの動作が軽快になる
	uint8_t spv = supply_v * 10;
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	40 e2       	ldi	r20, 0x20	; 32
 21a:	51 e4       	ldi	r21, 0x41	; 65
 21c:	60 91 28 38 	lds	r22, 0x3828	; 0x803828 <supply_v>
 220:	70 91 29 38 	lds	r23, 0x3829	; 0x803829 <supply_v+0x1>
 224:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <supply_v+0x2>
 228:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <supply_v+0x3>
 22c:	0e 94 20 07 	call	0xe40	; 0xe40 <__mulsf3>
 230:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fixunssfsi>
 234:	c6 2f       	mov	r28, r22
	uint8_t slv =  solar_v * 10;
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	40 e2       	ldi	r20, 0x20	; 32
 23c:	51 e4       	ldi	r21, 0x41	; 65
 23e:	c7 01       	movw	r24, r14
 240:	b6 01       	movw	r22, r12
 242:	0e 94 20 07 	call	0xe40	; 0xe40 <__mulsf3>
 246:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fixunssfsi>
	v_dig1  = seg[spv % 10];
 24a:	8d ec       	ldi	r24, 0xCD	; 205
 24c:	c8 9f       	mul	r28, r24
 24e:	e1 2d       	mov	r30, r1
 250:	11 24       	eor	r1, r1
 252:	e6 95       	lsr	r30
 254:	e6 95       	lsr	r30
 256:	e6 95       	lsr	r30
 258:	2e 2f       	mov	r18, r30
 25a:	22 0f       	add	r18, r18
 25c:	92 2f       	mov	r25, r18
 25e:	99 0f       	add	r25, r25
 260:	99 0f       	add	r25, r25
 262:	92 0f       	add	r25, r18
 264:	c9 1b       	sub	r28, r25
 266:	ac 2f       	mov	r26, r28
 268:	b0 e0       	ldi	r27, 0x00	; 0
 26a:	a8 5f       	subi	r26, 0xF8	; 248
 26c:	b7 4c       	sbci	r27, 0xC7	; 199
 26e:	9c 91       	ld	r25, X
 270:	90 93 1d 38 	sts	0x381D, r25	; 0x80381d <v_dig1>
	v_dig2  = seg[(spv / 10) % 10];
 274:	e8 9f       	mul	r30, r24
 276:	91 2d       	mov	r25, r1
 278:	11 24       	eor	r1, r1
 27a:	96 95       	lsr	r25
 27c:	96 95       	lsr	r25
 27e:	96 95       	lsr	r25
 280:	99 0f       	add	r25, r25
 282:	29 2f       	mov	r18, r25
 284:	22 0f       	add	r18, r18
 286:	22 0f       	add	r18, r18
 288:	92 0f       	add	r25, r18
 28a:	e9 1b       	sub	r30, r25
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	e8 5f       	subi	r30, 0xF8	; 248
 290:	f7 4c       	sbci	r31, 0xC7	; 199
 292:	90 81       	ld	r25, Z
 294:	90 93 1c 38 	sts	0x381C, r25	; 0x80381c <v_dig2>
	v_dig4  = seg[slv % 10];
 298:	68 9f       	mul	r22, r24
 29a:	e1 2d       	mov	r30, r1
 29c:	11 24       	eor	r1, r1
 29e:	e6 95       	lsr	r30
 2a0:	e6 95       	lsr	r30
 2a2:	e6 95       	lsr	r30
 2a4:	2e 2f       	mov	r18, r30
 2a6:	22 0f       	add	r18, r18
 2a8:	92 2f       	mov	r25, r18
 2aa:	99 0f       	add	r25, r25
 2ac:	99 0f       	add	r25, r25
 2ae:	92 0f       	add	r25, r18
 2b0:	69 1b       	sub	r22, r25
 2b2:	a6 2f       	mov	r26, r22
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	a8 5f       	subi	r26, 0xF8	; 248
 2b8:	b7 4c       	sbci	r27, 0xC7	; 199
 2ba:	9c 91       	ld	r25, X
 2bc:	90 93 1b 38 	sts	0x381B, r25	; 0x80381b <v_dig4>
	v_dig5  = seg[(slv / 10) % 10];
 2c0:	e8 9f       	mul	r30, r24
 2c2:	81 2d       	mov	r24, r1
 2c4:	11 24       	eor	r1, r1
 2c6:	86 95       	lsr	r24
 2c8:	86 95       	lsr	r24
 2ca:	86 95       	lsr	r24
 2cc:	88 0f       	add	r24, r24
 2ce:	98 2f       	mov	r25, r24
 2d0:	99 0f       	add	r25, r25
 2d2:	99 0f       	add	r25, r25
 2d4:	89 0f       	add	r24, r25
 2d6:	e8 1b       	sub	r30, r24
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	e8 5f       	subi	r30, 0xF8	; 248
 2dc:	f7 4c       	sbci	r31, 0xC7	; 199
 2de:	80 81       	ld	r24, Z
 2e0:	80 93 1a 38 	sts	0x381A, r24	; 0x80381a <v_dig5>
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	ff 90       	pop	r15
 2ea:	ef 90       	pop	r14
 2ec:	df 90       	pop	r13
 2ee:	cf 90       	pop	r12
 2f0:	08 95       	ret

000002f2 <sens_delay_ms>:

//ボタン操作を受け付けながら待機する関数
void sens_delay_ms (uint16_t num) {
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	8c 01       	movw	r16, r24

	for (unsigned int i = 0; i < num; i++){
 2fc:	c0 e0       	ldi	r28, 0x00	; 0
 2fe:	d0 e0       	ldi	r29, 0x00	; 0
 300:	6d c0       	rjmp	.+218    	; 0x3dc <sens_delay_ms+0xea>
		if(!(VPORTB_IN & PIN1_bm)) {
 302:	31 99       	sbic	0x06, 1	; 6
 304:	64 c0       	rjmp	.+200    	; 0x3ce <sens_delay_ms+0xdc>

			//ここにタクトスイッチが押された時の動作を記述
			wakeup = 4000;
 306:	80 ea       	ldi	r24, 0xA0	; 160
 308:	9f e0       	ldi	r25, 0x0F	; 15
 30a:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <wakeup>
 30e:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <wakeup+0x1>
		
			switch (mode) {
 312:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <mode>
 316:	82 30       	cpi	r24, 0x02	; 2
 318:	01 f1       	breq	.+64     	; 0x35a <sens_delay_ms+0x68>
 31a:	83 30       	cpi	r24, 0x03	; 3
 31c:	b9 f1       	breq	.+110    	; 0x38c <sens_delay_ms+0x9a>
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	09 f0       	breq	.+2      	; 0x324 <sens_delay_ms+0x32>
 322:	55 c0       	rjmp	.+170    	; 0x3ce <sens_delay_ms+0xdc>
				case MODE_CLOCK:
					while(!(VPORTB_IN & PIN1_bm));
 324:	31 9b       	sbis	0x06, 1	; 6
 326:	fe cf       	rjmp	.-4      	; 0x324 <sens_delay_ms+0x32>
					if(change_mode_after) {
 328:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <change_mode_after>
 32c:	88 23       	and	r24, r24
 32e:	19 f0       	breq	.+6      	; 0x336 <sens_delay_ms+0x44>
						change_mode_after = 0;
 330:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <change_mode_after>
 334:	4c c0       	rjmp	.+152    	; 0x3ce <sens_delay_ms+0xdc>
					}else{
						//電圧の取得
						get_v();
 336:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
						display_v = 200;
 33a:	88 ec       	ldi	r24, 0xC8	; 200
 33c:	80 93 23 38 	sts	0x3823, r24	; 0x803823 <display_v>
						wakeup = 800; //電圧表示だけなら長く表示する必要ないのでwakeup値上書き
 340:	80 e2       	ldi	r24, 0x20	; 32
 342:	93 e0       	ldi	r25, 0x03	; 3
 344:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <wakeup>
 348:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <wakeup+0x1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34c:	87 ea       	ldi	r24, 0xA7	; 167
 34e:	91 e6       	ldi	r25, 0x61	; 97
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <sens_delay_ms+0x5e>
 354:	00 c0       	rjmp	.+0      	; 0x356 <sens_delay_ms+0x64>
 356:	00 00       	nop
 358:	3a c0       	rjmp	.+116    	; 0x3ce <sens_delay_ms+0xdc>
						_delay_ms(100);
					}
				break;

				case MODE_HOUR_SET:
					while(!(VPORTB_IN & PIN1_bm));
 35a:	31 9b       	sbis	0x06, 1	; 6
 35c:	fe cf       	rjmp	.-4      	; 0x35a <sens_delay_ms+0x68>
					if(change_mode_after) {
 35e:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <change_mode_after>
 362:	88 23       	and	r24, r24
 364:	19 f0       	breq	.+6      	; 0x36c <sens_delay_ms+0x7a>
						change_mode_after = 0;
 366:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <change_mode_after>
 36a:	31 c0       	rjmp	.+98     	; 0x3ce <sens_delay_ms+0xdc>
					}else{
						if(++hour >= 24) hour = 0;
 36c:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <hour>
 370:	8f 5f       	subi	r24, 0xFF	; 255
 372:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <hour>
 376:	88 31       	cpi	r24, 0x18	; 24
 378:	10 f0       	brcs	.+4      	; 0x37e <sens_delay_ms+0x8c>
 37a:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <hour>
 37e:	87 ea       	ldi	r24, 0xA7	; 167
 380:	91 e6       	ldi	r25, 0x61	; 97
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <sens_delay_ms+0x90>
 386:	00 c0       	rjmp	.+0      	; 0x388 <sens_delay_ms+0x96>
 388:	00 00       	nop
 38a:	21 c0       	rjmp	.+66     	; 0x3ce <sens_delay_ms+0xdc>
						_delay_ms(100);
					}
				break;

				case MODE_MIN_SET:
					while(!(VPORTB_IN & PIN1_bm));
 38c:	31 9b       	sbis	0x06, 1	; 6
 38e:	fe cf       	rjmp	.-4      	; 0x38c <sens_delay_ms+0x9a>
					if(change_mode_after) {
 390:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <change_mode_after>
 394:	88 23       	and	r24, r24
 396:	19 f0       	breq	.+6      	; 0x39e <sens_delay_ms+0xac>
						change_mode_after = 0;
 398:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <change_mode_after>
 39c:	18 c0       	rjmp	.+48     	; 0x3ce <sens_delay_ms+0xdc>
					}else{
						if(++min >= 60) {
 39e:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <min>
 3a2:	8f 5f       	subi	r24, 0xFF	; 255
 3a4:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <min>
 3a8:	8c 33       	cpi	r24, 0x3C	; 60
 3aa:	58 f0       	brcs	.+22     	; 0x3c2 <sens_delay_ms+0xd0>
							min = 0;
 3ac:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <min>
							if(++hour >= 24) hour = 0;
 3b0:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <hour>
 3b4:	8f 5f       	subi	r24, 0xFF	; 255
 3b6:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <hour>
 3ba:	88 31       	cpi	r24, 0x18	; 24
 3bc:	10 f0       	brcs	.+4      	; 0x3c2 <sens_delay_ms+0xd0>
 3be:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <hour>
 3c2:	87 ea       	ldi	r24, 0xA7	; 167
 3c4:	91 e6       	ldi	r25, 0x61	; 97
 3c6:	01 97       	sbiw	r24, 0x01	; 1
 3c8:	f1 f7       	brne	.-4      	; 0x3c6 <sens_delay_ms+0xd4>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <sens_delay_ms+0xda>
 3cc:	00 00       	nop
 3ce:	89 ef       	ldi	r24, 0xF9	; 249
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <sens_delay_ms+0xe0>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <sens_delay_ms+0xe6>
 3d8:	00 00       	nop
}

//ボタン操作を受け付けながら待機する関数
void sens_delay_ms (uint16_t num) {

	for (unsigned int i = 0; i < num; i++){
 3da:	21 96       	adiw	r28, 0x01	; 1
 3dc:	c0 17       	cp	r28, r16
 3de:	d1 07       	cpc	r29, r17
 3e0:	08 f4       	brcc	.+2      	; 0x3e4 <sens_delay_ms+0xf2>
 3e2:	8f cf       	rjmp	.-226    	; 0x302 <sens_delay_ms+0x10>
				break;
			}
		}
		_delay_ms(1);
	}
}
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	1f 91       	pop	r17
 3ea:	0f 91       	pop	r16
 3ec:	08 95       	ret

000003ee <seg_all_off>:

//7セグをすべて消灯する関数
void seg_all_off (void) {

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	VPORTA_OUT &= 0b00000001;
 3ee:	81 b1       	in	r24, 0x01	; 1
 3f0:	81 70       	andi	r24, 0x01	; 1
 3f2:	81 b9       	out	0x01, r24	; 1
	VPORTC_OUT &= 0b11110000; //PC1～3はダイナミック点灯用トランジスタ。これらもOFF
 3f4:	89 b1       	in	r24, 0x09	; 9
 3f6:	80 7f       	andi	r24, 0xF0	; 240
 3f8:	89 b9       	out	0x09, r24	; 9
	//ダイナミック点灯用トランジスタも全てOFF
	VPORTB_OUT &= 0b11001111;
 3fa:	85 b1       	in	r24, 0x05	; 5
 3fc:	8f 7c       	andi	r24, 0xCF	; 207
 3fe:	85 b9       	out	0x05, r24	; 5
 400:	08 95       	ret

00000402 <change_mode>:
}

//モードを切り替える関数
//引数に0を指定した場合は次の定数のモードへ 定数を指定した場合はそのモードへ
void change_mode (uint8_t cmode) {
	if(cmode) {
 402:	88 23       	and	r24, r24
 404:	19 f0       	breq	.+6      	; 0x40c <change_mode+0xa>
		mode = cmode;
 406:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <mode>
 40a:	08 95       	ret
	}else if(mode == MODE_MIN_SET) {
 40c:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <mode>
 410:	83 30       	cpi	r24, 0x03	; 3
 412:	21 f4       	brne	.+8      	; 0x41c <change_mode+0x1a>
		mode = MODE_CLOCK;
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <mode>
 41a:	08 95       	ret
	}else{
		mode++;
 41c:	8f 5f       	subi	r24, 0xFF	; 255
 41e:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <mode>
 422:	08 95       	ret

00000424 <__vector_10>:
	}
}

//TCA割り込み
ISR (TCA0_CMP0_vect) {
 424:	1f 92       	push	r1
 426:	0f 92       	push	r0
 428:	0f b6       	in	r0, 0x3f	; 63
 42a:	0f 92       	push	r0
 42c:	11 24       	eor	r1, r1
 42e:	ef 92       	push	r14
 430:	ff 92       	push	r15
 432:	0f 93       	push	r16
 434:	1f 93       	push	r17
 436:	2f 93       	push	r18
 438:	3f 93       	push	r19
 43a:	4f 93       	push	r20
 43c:	5f 93       	push	r21
 43e:	6f 93       	push	r22
 440:	7f 93       	push	r23
 442:	8f 93       	push	r24
 444:	9f 93       	push	r25
 446:	af 93       	push	r26
 448:	bf 93       	push	r27
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	ef 93       	push	r30
 450:	ff 93       	push	r31

	TCA0_SINGLE_CNT = 0;//カウントリセット
 452:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__RODATA_PM_OFFSET__+0x7f8a20>
 456:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__RODATA_PM_OFFSET__+0x7f8a21>
	TCA0_SINGLE_INTFLAGS |= 0b00010000; //割り込み要求フラグを解除
 45a:	eb e0       	ldi	r30, 0x0B	; 11
 45c:	fa e0       	ldi	r31, 0x0A	; 10
 45e:	80 81       	ld	r24, Z
 460:	80 61       	ori	r24, 0x10	; 16
 462:	80 83       	st	Z, r24

	//wakeupが0ならセグをすべて消灯してそれ以外を実行しない
	//メインループのseg_all_off関数とsleep_mode関数の間にこの割り込みが入り中途半端に7セグが点灯した状態でスリープするのを防ぐ記述
	if(!wakeup) {
 464:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <wakeup>
 468:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <wakeup+0x1>
 46c:	89 2b       	or	r24, r25
 46e:	19 f4       	brne	.+6      	; 0x476 <__vector_10+0x52>
		seg_all_off();
 470:	0e 94 f7 01 	call	0x3ee	; 0x3ee <seg_all_off>
		return;
 474:	e5 c1       	rjmp	.+970    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
	//現状このドットは使用していないのでコメントアウト 使うときは有効化してください
	//uint8_t dig1c, dig4c,;
	//dig1c = di45c = 0;

	//太陽電池の発電電圧とキャパシタの電圧を表示
	if(display_v && mode == MODE_CLOCK) {
 476:	80 91 23 38 	lds	r24, 0x3823	; 0x803823 <display_v>
 47a:	88 23       	and	r24, r24
 47c:	81 f0       	breq	.+32     	; 0x49e <__vector_10+0x7a>
 47e:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <mode>
 482:	81 30       	cpi	r24, 0x01	; 1
 484:	61 f4       	brne	.+24     	; 0x49e <__vector_10+0x7a>
		dig1  = v_dig1;
 486:	c0 91 1d 38 	lds	r28, 0x381D	; 0x80381d <v_dig1>
		dig2  = v_dig2;
 48a:	d0 91 1c 38 	lds	r29, 0x381C	; 0x80381c <v_dig2>
		dig3  = 0b00000000;
		dig4  = v_dig4;
 48e:	10 91 1b 38 	lds	r17, 0x381B	; 0x80381b <v_dig4>
		dig5  = v_dig5;
 492:	00 91 1a 38 	lds	r16, 0x381A	; 0x80381a <v_dig5>
		dig2c = dig5c = 0b00000001;//ドット(小数点)
 496:	ee 24       	eor	r14, r14
 498:	e3 94       	inc	r14

	//太陽電池の発電電圧とキャパシタの電圧を表示
	if(display_v && mode == MODE_CLOCK) {
		dig1  = v_dig1;
		dig2  = v_dig2;
		dig3  = 0b00000000;
 49a:	f1 2c       	mov	r15, r1
		dig4  = v_dig4;
		dig5  = v_dig5;
		dig2c = dig5c = 0b00000001;//ドット(小数点)
 49c:	91 c0       	rjmp	.+290    	; 0x5c0 <__vector_10+0x19c>

	}else if(unset && mode == MODE_CLOCK) {//時計未設定なら全てハイフンで上書き
 49e:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <unset>
 4a2:	88 23       	and	r24, r24
 4a4:	29 f0       	breq	.+10     	; 0x4b0 <__vector_10+0x8c>
 4a6:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <mode>
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	09 f4       	brne	.+2      	; 0x4b0 <__vector_10+0x8c>
 4ae:	7f c0       	rjmp	.+254    	; 0x5ae <__vector_10+0x18a>
		dig3 = 0b00000110;

	}else{//時刻を表示

		//時刻が更新されていれば表示を刷新するための計算を行う。更新されていなければ前回表示したものをそのまま表示
		if(old_min != min || old_hour != hour) {
 4b0:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <old_min>
 4b4:	c0 91 32 38 	lds	r28, 0x3832	; 0x803832 <min>
 4b8:	8c 13       	cpse	r24, r28
 4ba:	07 c0       	rjmp	.+14     	; 0x4ca <__vector_10+0xa6>
 4bc:	90 91 01 38 	lds	r25, 0x3801	; 0x803801 <old_hour>
 4c0:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <hour>
 4c4:	98 17       	cp	r25, r24
 4c6:	09 f4       	brne	.+2      	; 0x4ca <__vector_10+0xa6>
 4c8:	66 c0       	rjmp	.+204    	; 0x596 <__vector_10+0x172>
			//これまでの値を古い値を格納する変数に移し替える
			old_min = min;
 4ca:	c0 93 02 38 	sts	0x3802, r28	; 0x803802 <old_min>
			old_hour = hour;
 4ce:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <hour>
 4d2:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <old_hour>

			//12時間表記設定と24時間表記設定で表示を切り替える
			uint8_t display_hour = 0;
			if(system12) {
 4d6:	90 91 03 38 	lds	r25, 0x3803	; 0x803803 <system12>
 4da:	99 23       	and	r25, r25
 4dc:	31 f0       	breq	.+12     	; 0x4ea <__vector_10+0xc6>
				if(!hour) display_hour = 12; //0時を12時と表記
 4de:	88 23       	and	r24, r24
 4e0:	31 f0       	breq	.+12     	; 0x4ee <__vector_10+0xca>
				else if (hour > 12) display_hour = hour - 12; //13時以降を1時、2時…と表す
 4e2:	8d 30       	cpi	r24, 0x0D	; 13
 4e4:	28 f0       	brcs	.+10     	; 0x4f0 <__vector_10+0xcc>
 4e6:	8c 50       	subi	r24, 0x0C	; 12
 4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <__vector_10+0xcc>
			//これまでの値を古い値を格納する変数に移し替える
			old_min = min;
			old_hour = hour;

			//12時間表記設定と24時間表記設定で表示を切り替える
			uint8_t display_hour = 0;
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <__vector_10+0xcc>
			if(system12) {
				if(!hour) display_hour = 12; //0時を12時と表記
 4ee:	8c e0       	ldi	r24, 0x0C	; 12
				else if (hour > 12) display_hour = hour - 12; //13時以降を1時、2時…と表す
				else display_hour = hour;
			}

			old_dig1 = dig1  = seg[min % 10];
 4f0:	ed ec       	ldi	r30, 0xCD	; 205
 4f2:	ce 9f       	mul	r28, r30
 4f4:	a1 2d       	mov	r26, r1
 4f6:	11 24       	eor	r1, r1
 4f8:	a6 95       	lsr	r26
 4fa:	a6 95       	lsr	r26
 4fc:	a6 95       	lsr	r26
 4fe:	2a 2f       	mov	r18, r26
 500:	22 0f       	add	r18, r18
 502:	92 2f       	mov	r25, r18
 504:	99 0f       	add	r25, r25
 506:	99 0f       	add	r25, r25
 508:	92 0f       	add	r25, r18
 50a:	c9 1b       	sub	r28, r25
 50c:	d0 e0       	ldi	r29, 0x00	; 0
 50e:	c8 5f       	subi	r28, 0xF8	; 248
 510:	d7 4c       	sbci	r29, 0xC7	; 199
 512:	c8 81       	ld	r28, Y
 514:	c0 93 19 38 	sts	0x3819, r28	; 0x803819 <old_dig1>
			old_dig2 = dig2  = seg[(min / 10) % 10];
 518:	ae 9f       	mul	r26, r30
 51a:	91 2d       	mov	r25, r1
 51c:	11 24       	eor	r1, r1
 51e:	96 95       	lsr	r25
 520:	96 95       	lsr	r25
 522:	96 95       	lsr	r25
 524:	99 0f       	add	r25, r25
 526:	29 2f       	mov	r18, r25
 528:	22 0f       	add	r18, r18
 52a:	22 0f       	add	r18, r18
 52c:	92 0f       	add	r25, r18
 52e:	a9 1b       	sub	r26, r25
 530:	b0 e0       	ldi	r27, 0x00	; 0
 532:	a8 5f       	subi	r26, 0xF8	; 248
 534:	b7 4c       	sbci	r27, 0xC7	; 199
 536:	dc 91       	ld	r29, X
 538:	d0 93 18 38 	sts	0x3818, r29	; 0x803818 <old_dig2>
			old_dig4 = dig4  = seg[display_hour % 10];
 53c:	8e 9f       	mul	r24, r30
 53e:	91 2d       	mov	r25, r1
 540:	11 24       	eor	r1, r1
 542:	96 95       	lsr	r25
 544:	96 95       	lsr	r25
 546:	96 95       	lsr	r25
 548:	39 2f       	mov	r19, r25
 54a:	33 0f       	add	r19, r19
 54c:	23 2f       	mov	r18, r19
 54e:	22 0f       	add	r18, r18
 550:	22 0f       	add	r18, r18
 552:	23 0f       	add	r18, r19
 554:	82 1b       	sub	r24, r18
 556:	a8 2f       	mov	r26, r24
 558:	b0 e0       	ldi	r27, 0x00	; 0
 55a:	a8 5f       	subi	r26, 0xF8	; 248
 55c:	b7 4c       	sbci	r27, 0xC7	; 199
 55e:	1c 91       	ld	r17, X
 560:	10 93 17 38 	sts	0x3817, r17	; 0x803817 <old_dig4>

			//dig5のみ0なら不点灯にする(ゼロサプレス)
			uint8_t dig5_num = (display_hour / 10) % 10;
 564:	9e 9f       	mul	r25, r30
 566:	e1 2d       	mov	r30, r1
 568:	11 24       	eor	r1, r1
 56a:	e6 95       	lsr	r30
 56c:	e6 95       	lsr	r30
 56e:	e6 95       	lsr	r30
 570:	ee 0f       	add	r30, r30
 572:	8e 2f       	mov	r24, r30
 574:	88 0f       	add	r24, r24
 576:	88 0f       	add	r24, r24
 578:	e8 0f       	add	r30, r24
 57a:	9e 1b       	sub	r25, r30
			if(dig5_num) {
 57c:	41 f0       	breq	.+16     	; 0x58e <__vector_10+0x16a>
				old_dig5 = dig5 = seg[dig5_num];
 57e:	e9 2f       	mov	r30, r25
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	e8 5f       	subi	r30, 0xF8	; 248
 584:	f7 4c       	sbci	r31, 0xC7	; 199
 586:	00 81       	ld	r16, Z
 588:	00 93 16 38 	sts	0x3816, r16	; 0x803816 <old_dig5>
 58c:	0c c0       	rjmp	.+24     	; 0x5a6 <__vector_10+0x182>
			}else{
				old_dig5 = dig5 = 0b00000000;
 58e:	10 92 16 38 	sts	0x3816, r1	; 0x803816 <old_dig5>
 592:	00 e0       	ldi	r16, 0x00	; 0
 594:	08 c0       	rjmp	.+16     	; 0x5a6 <__vector_10+0x182>
			}

		}else{
			dig1 = old_dig1;
 596:	c0 91 19 38 	lds	r28, 0x3819	; 0x803819 <old_dig1>
			dig2 = old_dig2;
 59a:	d0 91 18 38 	lds	r29, 0x3818	; 0x803818 <old_dig2>
			dig4 = old_dig4;
 59e:	10 91 17 38 	lds	r17, 0x3817	; 0x803817 <old_dig4>
			dig5 = old_dig5;
 5a2:	00 91 16 38 	lds	r16, 0x3816	; 0x803816 <old_dig5>
		}

		dig3  = colon;
 5a6:	f0 90 15 38 	lds	r15, 0x3815	; 0x803815 <colon.3365>

	static uint8_t out_dig = 0;//発光させる桁
	static uint8_t colon = 0;//点滅コロン
	uint8_t dig1, dig2, dig3, dig4, dig5 = 0;
	uint8_t dig2c, dig5c;
	dig2c = dig5c = 0;
 5aa:	e1 2c       	mov	r14, r1
 5ac:	09 c0       	rjmp	.+18     	; 0x5c0 <__vector_10+0x19c>
 5ae:	e1 2c       	mov	r14, r1
		dig4  = v_dig4;
		dig5  = v_dig5;
		dig2c = dig5c = 0b00000001;//ドット(小数点)

	}else if(unset && mode == MODE_CLOCK) {//時計未設定なら全てハイフンで上書き
		dig1 = dig2 = dig4 = dig5 = 0b10000000;
 5b0:	00 e8       	ldi	r16, 0x80	; 128
 5b2:	10 e8       	ldi	r17, 0x80	; 128
		dig3 = 0b00000110;
 5b4:	0f 2e       	mov	r0, r31
 5b6:	f6 e0       	ldi	r31, 0x06	; 6
 5b8:	ff 2e       	mov	r15, r31
 5ba:	f0 2d       	mov	r31, r0
		dig4  = v_dig4;
		dig5  = v_dig5;
		dig2c = dig5c = 0b00000001;//ドット(小数点)

	}else if(unset && mode == MODE_CLOCK) {//時計未設定なら全てハイフンで上書き
		dig1 = dig2 = dig4 = dig5 = 0b10000000;
 5bc:	d0 e8       	ldi	r29, 0x80	; 128
 5be:	c0 e8       	ldi	r28, 0x80	; 128
	}

	//時刻設定時の点滅演出
	//点滅カウンター
	static uint16_t wink = 0;
	if(mode == MODE_HOUR_SET) {
 5c0:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <mode>
 5c4:	82 30       	cpi	r24, 0x02	; 2
 5c6:	a9 f4       	brne	.+42     	; 0x5f2 <__vector_10+0x1ce>
		if(++wink < 512) dig4 = dig5 = 0b00000000;
 5c8:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <wink.3375>
 5cc:	90 91 14 38 	lds	r25, 0x3814	; 0x803814 <wink.3375+0x1>
 5d0:	01 96       	adiw	r24, 0x01	; 1
 5d2:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <wink.3375>
 5d6:	90 93 14 38 	sts	0x3814, r25	; 0x803814 <wink.3375+0x1>
 5da:	81 15       	cp	r24, r1
 5dc:	22 e0       	ldi	r18, 0x02	; 2
 5de:	92 07       	cpc	r25, r18
 5e0:	20 f1       	brcs	.+72     	; 0x62a <__vector_10+0x206>
		else if (wink > 1023) wink = 0;
 5e2:	81 15       	cp	r24, r1
 5e4:	94 40       	sbci	r25, 0x04	; 4
 5e6:	30 f1       	brcs	.+76     	; 0x634 <__vector_10+0x210>
 5e8:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <wink.3375>
 5ec:	10 92 14 38 	sts	0x3814, r1	; 0x803814 <wink.3375+0x1>
 5f0:	21 c0       	rjmp	.+66     	; 0x634 <__vector_10+0x210>
	}else if(mode == MODE_MIN_SET) {
 5f2:	83 30       	cpi	r24, 0x03	; 3
 5f4:	a9 f4       	brne	.+42     	; 0x620 <__vector_10+0x1fc>
		if(++wink < 512) dig1 = dig2 = 0b00000000;
 5f6:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <wink.3375>
 5fa:	90 91 14 38 	lds	r25, 0x3814	; 0x803814 <wink.3375+0x1>
 5fe:	01 96       	adiw	r24, 0x01	; 1
 600:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <wink.3375>
 604:	90 93 14 38 	sts	0x3814, r25	; 0x803814 <wink.3375+0x1>
 608:	81 15       	cp	r24, r1
 60a:	22 e0       	ldi	r18, 0x02	; 2
 60c:	92 07       	cpc	r25, r18
 60e:	80 f0       	brcs	.+32     	; 0x630 <__vector_10+0x20c>
		else if (wink > 1023) wink = 0;
 610:	81 15       	cp	r24, r1
 612:	94 40       	sbci	r25, 0x04	; 4
 614:	78 f0       	brcs	.+30     	; 0x634 <__vector_10+0x210>
 616:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <wink.3375>
 61a:	10 92 14 38 	sts	0x3814, r1	; 0x803814 <wink.3375+0x1>
 61e:	0a c0       	rjmp	.+20     	; 0x634 <__vector_10+0x210>
	}else{
		wink = 0;
 620:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <wink.3375>
 624:	10 92 14 38 	sts	0x3814, r1	; 0x803814 <wink.3375+0x1>
 628:	05 c0       	rjmp	.+10     	; 0x634 <__vector_10+0x210>

	//時刻設定時の点滅演出
	//点滅カウンター
	static uint16_t wink = 0;
	if(mode == MODE_HOUR_SET) {
		if(++wink < 512) dig4 = dig5 = 0b00000000;
 62a:	00 e0       	ldi	r16, 0x00	; 0
 62c:	10 e0       	ldi	r17, 0x00	; 0
 62e:	02 c0       	rjmp	.+4      	; 0x634 <__vector_10+0x210>
		else if (wink > 1023) wink = 0;
	}else if(mode == MODE_MIN_SET) {
		if(++wink < 512) dig1 = dig2 = 0b00000000;
 630:	d0 e0       	ldi	r29, 0x00	; 0
 632:	c0 e0       	ldi	r28, 0x00	; 0
		wink = 0;
	}


	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();
 634:	0e 94 f7 01 	call	0x3ee	; 0x3ee <seg_all_off>

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
	static uint8_t bn_pwm_count = 1; //7セグを間欠で点灯させるために0～12までを繰り返し数えるカウンター

	if(++bn_pwm_count > 24) bn_pwm_count = 1;
 638:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 63c:	8f 5f       	subi	r24, 0xFF	; 255
 63e:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 642:	89 31       	cpi	r24, 0x19	; 25
 644:	18 f0       	brcs	.+6      	; 0x64c <__vector_10+0x228>
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>

	//間欠点灯で明るさを調整
	switch (brightness) {
 64c:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <brightness>
 650:	83 30       	cpi	r24, 0x03	; 3
 652:	19 f1       	breq	.+70     	; 0x69a <__vector_10+0x276>
 654:	28 f4       	brcc	.+10     	; 0x660 <__vector_10+0x23c>
 656:	81 30       	cpi	r24, 0x01	; 1
 658:	51 f0       	breq	.+20     	; 0x66e <__vector_10+0x24a>
 65a:	82 30       	cpi	r24, 0x02	; 2
 65c:	91 f0       	breq	.+36     	; 0x682 <__vector_10+0x25e>
 65e:	05 c0       	rjmp	.+10     	; 0x66a <__vector_10+0x246>
 660:	85 30       	cpi	r24, 0x05	; 5
 662:	71 f1       	breq	.+92     	; 0x6c0 <__vector_10+0x29c>
 664:	f8 f0       	brcs	.+62     	; 0x6a4 <__vector_10+0x280>
 666:	86 30       	cpi	r24, 0x06	; 6
 668:	89 f1       	breq	.+98     	; 0x6cc <__vector_10+0x2a8>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	44 c0       	rjmp	.+136    	; 0x6f6 <__vector_10+0x2d2>
	//間欠点灯で明るさを調整
	switch (brightness) {

		case 1: //12.5% bn_pwm_countが8,16,24のタイミングで点灯
			if(
				bn_pwm_count == 8  ||
 66e:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>

	//間欠点灯で明るさを調整
	switch (brightness) {

		case 1: //12.5% bn_pwm_countが8,16,24のタイミングで点灯
			if(
 672:	88 30       	cpi	r24, 0x08	; 8
 674:	69 f1       	breq	.+90     	; 0x6d0 <__vector_10+0x2ac>
				bn_pwm_count == 8  ||
 676:	80 31       	cpi	r24, 0x10	; 16
 678:	69 f1       	breq	.+90     	; 0x6d4 <__vector_10+0x2b0>
				bn_pwm_count == 16 ||
 67a:	88 31       	cpi	r24, 0x18	; 24
 67c:	69 f1       	breq	.+90     	; 0x6d8 <__vector_10+0x2b4>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
 67e:	80 e0       	ldi	r24, 0x00	; 0
 680:	3a c0       	rjmp	.+116    	; 0x6f6 <__vector_10+0x2d2>
			}
		break;

		case 2: //16.67% bn_pwm_countが6,12,18,24のタイミングで点灯
			if(
				bn_pwm_count == 6  ||
 682:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
				seg_on = 1;
			}
		break;

		case 2: //16.67% bn_pwm_countが6,12,18,24のタイミングで点灯
			if(
 686:	86 30       	cpi	r24, 0x06	; 6
 688:	49 f1       	breq	.+82     	; 0x6dc <__vector_10+0x2b8>
				bn_pwm_count == 6  ||
 68a:	8c 30       	cpi	r24, 0x0C	; 12
 68c:	49 f1       	breq	.+82     	; 0x6e0 <__vector_10+0x2bc>
				bn_pwm_count == 12 ||
 68e:	82 31       	cpi	r24, 0x12	; 18
 690:	49 f1       	breq	.+82     	; 0x6e4 <__vector_10+0x2c0>
				bn_pwm_count == 18 ||
 692:	88 31       	cpi	r24, 0x18	; 24
 694:	49 f1       	breq	.+82     	; 0x6e8 <__vector_10+0x2c4>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	2e c0       	rjmp	.+92     	; 0x6f6 <__vector_10+0x2d2>
				seg_on = 1;
			}
		break;

		case 3: //25% bn_pwm_countが4,8,12,16,20,24のタイミングで点灯
			if(bn_pwm_count % 4) {
 69a:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 69e:	83 70       	andi	r24, 0x03	; 3
 6a0:	29 f5       	brne	.+74     	; 0x6ec <__vector_10+0x2c8>
 6a2:	29 c0       	rjmp	.+82     	; 0x6f6 <__vector_10+0x2d2>
				seg_on = 1;
			}
		break;

		case 4: //33.33% bn_pwm_countが3,6,9,12,15,18,21,24のタイミングで点灯
			if(bn_pwm_count % 3) {
 6a4:	90 91 00 38 	lds	r25, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 6a8:	8b ea       	ldi	r24, 0xAB	; 171
 6aa:	98 9f       	mul	r25, r24
 6ac:	81 2d       	mov	r24, r1
 6ae:	11 24       	eor	r1, r1
 6b0:	86 95       	lsr	r24
 6b2:	28 2f       	mov	r18, r24
 6b4:	22 0f       	add	r18, r18
 6b6:	82 0f       	add	r24, r18
 6b8:	98 13       	cpse	r25, r24
 6ba:	1a c0       	rjmp	.+52     	; 0x6f0 <__vector_10+0x2cc>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	1b c0       	rjmp	.+54     	; 0x6f6 <__vector_10+0x2d2>
				seg_on = 1;
			}
		break;

		case 5: //50% bn_pwm_countが2,4,6,8,10,12,14,16,18,20,22,24のタイミングで点灯
			if(bn_pwm_count % 2) {
 6c0:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 6c4:	80 fd       	sbrc	r24, 0
 6c6:	16 c0       	rjmp	.+44     	; 0x6f4 <__vector_10+0x2d0>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	15 c0       	rjmp	.+42     	; 0x6f6 <__vector_10+0x2d2>
				seg_on = 1;
			}
		break;

		case 6: //100% bn_pwm_countがいくつでも全てのタイミングで点灯
			seg_on = 1;
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	13 c0       	rjmp	.+38     	; 0x6f6 <__vector_10+0x2d2>
			if(
				bn_pwm_count == 8  ||
				bn_pwm_count == 16 ||
				bn_pwm_count == 24
			) {
				seg_on = 1;
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	11 c0       	rjmp	.+34     	; 0x6f6 <__vector_10+0x2d2>
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	0f c0       	rjmp	.+30     	; 0x6f6 <__vector_10+0x2d2>
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	0d c0       	rjmp	.+26     	; 0x6f6 <__vector_10+0x2d2>
				bn_pwm_count == 6  ||
				bn_pwm_count == 12 ||
				bn_pwm_count == 18 ||
				bn_pwm_count == 24
			) {
				seg_on = 1;
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	0b c0       	rjmp	.+22     	; 0x6f6 <__vector_10+0x2d2>
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	09 c0       	rjmp	.+18     	; 0x6f6 <__vector_10+0x2d2>
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	07 c0       	rjmp	.+14     	; 0x6f6 <__vector_10+0x2d2>
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <__vector_10+0x2d2>
			}
		break;

		case 3: //25% bn_pwm_countが4,8,12,16,20,24のタイミングで点灯
			if(bn_pwm_count % 4) {
				seg_on = 1;
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	03 c0       	rjmp	.+6      	; 0x6f6 <__vector_10+0x2d2>
			}
		break;

		case 4: //33.33% bn_pwm_countが3,6,9,12,15,18,21,24のタイミングで点灯
			if(bn_pwm_count % 3) {
				seg_on = 1;
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <__vector_10+0x2d2>
			}
		break;

		case 5: //50% bn_pwm_countが2,4,6,8,10,12,14,16,18,20,22,24のタイミングで点灯
			if(bn_pwm_count % 2) {
				seg_on = 1;
 6f4:	81 e0       	ldi	r24, 0x01	; 1
			seg_on = 1;
		break;
	}

	//点灯実行
	if(seg_on) {
 6f6:	88 23       	and	r24, r24
 6f8:	d9 f1       	breq	.+118    	; 0x770 <__vector_10+0x34c>
		switch (out_dig) {
 6fa:	80 91 12 38 	lds	r24, 0x3812	; 0x803812 <__data_end>
 6fe:	82 30       	cpi	r24, 0x02	; 2
 700:	e9 f0       	breq	.+58     	; 0x73c <__vector_10+0x318>
 702:	28 f4       	brcc	.+10     	; 0x70e <__vector_10+0x2ea>
 704:	88 23       	and	r24, r24
 706:	41 f0       	breq	.+16     	; 0x718 <__vector_10+0x2f4>
 708:	81 30       	cpi	r24, 0x01	; 1
 70a:	59 f0       	breq	.+22     	; 0x722 <__vector_10+0x2fe>
 70c:	31 c0       	rjmp	.+98     	; 0x770 <__vector_10+0x34c>
 70e:	83 30       	cpi	r24, 0x03	; 3
 710:	e1 f0       	breq	.+56     	; 0x74a <__vector_10+0x326>
 712:	84 30       	cpi	r24, 0x04	; 4
 714:	f9 f0       	breq	.+62     	; 0x754 <__vector_10+0x330>
 716:	2c c0       	rjmp	.+88     	; 0x770 <__vector_10+0x34c>

			case 0:
			VPORTB_OUT |= 0b00010000;
 718:	85 b1       	in	r24, 0x05	; 5
 71a:	80 61       	ori	r24, 0x10	; 16
 71c:	85 b9       	out	0x05, r24	; 5
			VPORTA_OUT = dig1;
 71e:	c1 b9       	out	0x01, r28	; 1
			//現状このドットは使用していないのでコメントアウト 使うときは有効化してください
			//VPORTC_OUT = (dig1c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
			break;
 720:	27 c0       	rjmp	.+78     	; 0x770 <__vector_10+0x34c>

			case 1:
			VPORTC_OUT |= 0b00001000;
 722:	89 b1       	in	r24, 0x09	; 9
 724:	88 60       	ori	r24, 0x08	; 8
 726:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig2;
 728:	d1 b9       	out	0x01, r29	; 1
			if(display_v) VPORTC_OUT = (dig2c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 72a:	80 91 23 38 	lds	r24, 0x3823	; 0x803823 <display_v>
 72e:	88 23       	and	r24, r24
 730:	f9 f0       	breq	.+62     	; 0x770 <__vector_10+0x34c>
 732:	89 b1       	in	r24, 0x09	; 9
 734:	8e 7f       	andi	r24, 0xFE	; 254
 736:	e8 2a       	or	r14, r24
 738:	e9 b8       	out	0x09, r14	; 9
 73a:	1a c0       	rjmp	.+52     	; 0x770 <__vector_10+0x34c>
			break;

			case 2:
			if(dig3) { //電力消費削減のため、コロンが消灯している時はカソード側トランジスタも開けない
 73c:	ff 20       	and	r15, r15
 73e:	c1 f0       	breq	.+48     	; 0x770 <__vector_10+0x34c>
				VPORTB_OUT |= 0b00100000;
 740:	85 b1       	in	r24, 0x05	; 5
 742:	80 62       	ori	r24, 0x20	; 32
 744:	85 b9       	out	0x05, r24	; 5
				VPORTA_OUT = dig3;
 746:	f1 b8       	out	0x01, r15	; 1
 748:	13 c0       	rjmp	.+38     	; 0x770 <__vector_10+0x34c>
			}
			break;

			case 3:
			VPORTC_OUT |= 0b00000100;
 74a:	89 b1       	in	r24, 0x09	; 9
 74c:	84 60       	ori	r24, 0x04	; 4
 74e:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig4;
 750:	11 b9       	out	0x01, r17	; 1
			//現状このドットは使用していないのでコメントアウト 使うときは有効化してください
			//VPORTC_OUT = (dig4c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
			break;
 752:	0e c0       	rjmp	.+28     	; 0x770 <__vector_10+0x34c>

			case 4:
			if(dig5) { //電力消費削減のため、dig5がゼロサプレスされていればカソード側トランジスタも開けない
 754:	00 23       	and	r16, r16
 756:	61 f0       	breq	.+24     	; 0x770 <__vector_10+0x34c>
				VPORTC_OUT |= 0b00000010;
 758:	89 b1       	in	r24, 0x09	; 9
 75a:	82 60       	ori	r24, 0x02	; 2
 75c:	89 b9       	out	0x09, r24	; 9
				VPORTA_OUT = dig5;
 75e:	01 b9       	out	0x01, r16	; 1
				if(display_v) VPORTC_OUT = (dig5c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 760:	80 91 23 38 	lds	r24, 0x3823	; 0x803823 <display_v>
 764:	88 23       	and	r24, r24
 766:	21 f0       	breq	.+8      	; 0x770 <__vector_10+0x34c>
 768:	89 b1       	in	r24, 0x09	; 9
 76a:	8e 7f       	andi	r24, 0xFE	; 254
 76c:	e8 2a       	or	r14, r24
 76e:	e9 b8       	out	0x09, r14	; 9
		}
	}


	//5回に1回やること
	if (++out_dig == 5) {
 770:	80 91 12 38 	lds	r24, 0x3812	; 0x803812 <__data_end>
 774:	8f 5f       	subi	r24, 0xFF	; 255
 776:	80 93 12 38 	sts	0x3812, r24	; 0x803812 <__data_end>
 77a:	85 30       	cpi	r24, 0x05	; 5
 77c:	09 f0       	breq	.+2      	; 0x780 <__vector_10+0x35c>
 77e:	60 c0       	rjmp	.+192    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
		//out_digの0~5トグル動作
		out_dig = 0;
 780:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <__data_end>

		//コロンの点滅動作
		if(!(RTC_CNTL & 0b00000001) || mode != MODE_CLOCK) { //コロンの点滅
 784:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 788:	80 ff       	sbrs	r24, 0
 78a:	04 c0       	rjmp	.+8      	; 0x794 <__vector_10+0x370>
 78c:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <mode>
 790:	81 30       	cpi	r24, 0x01	; 1
 792:	21 f0       	breq	.+8      	; 0x79c <__vector_10+0x378>
			colon = 0b00000110;
 794:	86 e0       	ldi	r24, 0x06	; 6
 796:	80 93 15 38 	sts	0x3815, r24	; 0x803815 <colon.3365>
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <__vector_10+0x37c>
		}else{
			colon = 0b00000000;
 79c:	10 92 15 38 	sts	0x3815, r1	; 0x803815 <colon.3365>
		}

		//スリープへ向けwakeupを減らす
		if(wakeup) wakeup--;
 7a0:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <wakeup>
 7a4:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <wakeup+0x1>
 7a8:	00 97       	sbiw	r24, 0x00	; 0
 7aa:	29 f0       	breq	.+10     	; 0x7b6 <__vector_10+0x392>
 7ac:	01 97       	sbiw	r24, 0x01	; 1
 7ae:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <wakeup>
 7b2:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <wakeup+0x1>

		//電圧表示時間を減らす
		if(display_v) display_v--;
 7b6:	80 91 23 38 	lds	r24, 0x3823	; 0x803823 <display_v>
 7ba:	88 23       	and	r24, r24
 7bc:	19 f0       	breq	.+6      	; 0x7c4 <__vector_10+0x3a0>
 7be:	81 50       	subi	r24, 0x01	; 1
 7c0:	80 93 23 38 	sts	0x3823, r24	; 0x803823 <display_v>

		//タクトスイッチが長押しされている場合、長押しカウントを加算
		if(VPORTB_IN & PIN1_bm) {
 7c4:	31 9b       	sbis	0x06, 1	; 6
 7c6:	05 c0       	rjmp	.+10     	; 0x7d2 <__vector_10+0x3ae>
			long_push = 0;
 7c8:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <long_push>
 7cc:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <long_push+0x1>
 7d0:	37 c0       	rjmp	.+110    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
		}else{
			if(++long_push > 1000) {
 7d2:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <long_push>
 7d6:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <long_push+0x1>
 7da:	01 96       	adiw	r24, 0x01	; 1
 7dc:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <long_push>
 7e0:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <long_push+0x1>
 7e4:	89 3e       	cpi	r24, 0xE9	; 233
 7e6:	93 40       	sbci	r25, 0x03	; 3
 7e8:	58 f1       	brcs	.+86     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
				long_push = 0;
 7ea:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <long_push>
 7ee:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <long_push+0x1>
				if(unset) {
 7f2:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <unset>
 7f6:	88 23       	and	r24, r24
 7f8:	31 f0       	breq	.+12     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
					unset = 0; //時刻未設定フラグを折る
 7fa:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <unset>
					hour = min = 0;
 7fe:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <min>
 802:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <hour>
				}
				RTC_CNT = 0; //時刻設定をした後、秒数が0から始まるようにする
 806:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 80a:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
				change_mode(0);
 80e:	80 e0       	ldi	r24, 0x00	; 0
 810:	0e 94 01 02 	call	0x402	; 0x402 <change_mode>
				change_mode_after = 1;
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <change_mode_after>

				//スリープを挟まず3回連続で時刻合わせを行った場合は24時間表記に切り替える
				if(mode == MODE_HOUR_SET) {
 81a:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <mode>
 81e:	82 30       	cpi	r24, 0x02	; 2
 820:	79 f4       	brne	.+30     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
					s24count++;
 822:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <s24count>
 826:	8f 5f       	subi	r24, 0xFF	; 255
 828:	80 93 21 38 	sts	0x3821, r24	; 0x803821 <s24count>
					if(s24count >= 3) {
 82c:	83 30       	cpi	r24, 0x03	; 3
 82e:	28 f0       	brcs	.+10     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
						s24count = 0;
 830:	10 92 21 38 	sts	0x3821, r1	; 0x803821 <s24count>
						system12 = 0;
 834:	10 92 03 38 	sts	0x3803, r1	; 0x803803 <system12>
 838:	03 c0       	rjmp	.+6      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
					}else{
						system12 = 1;
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <system12>
				}
			}
		}
	}

}
 840:	ff 91       	pop	r31
 842:	ef 91       	pop	r30
 844:	df 91       	pop	r29
 846:	cf 91       	pop	r28
 848:	bf 91       	pop	r27
 84a:	af 91       	pop	r26
 84c:	9f 91       	pop	r25
 84e:	8f 91       	pop	r24
 850:	7f 91       	pop	r23
 852:	6f 91       	pop	r22
 854:	5f 91       	pop	r21
 856:	4f 91       	pop	r20
 858:	3f 91       	pop	r19
 85a:	2f 91       	pop	r18
 85c:	1f 91       	pop	r17
 85e:	0f 91       	pop	r16
 860:	ff 90       	pop	r15
 862:	ef 90       	pop	r14
 864:	0f 90       	pop	r0
 866:	0f be       	out	0x3f, r0	; 63
 868:	0f 90       	pop	r0
 86a:	1f 90       	pop	r1
 86c:	18 95       	reti

0000086e <__vector_4>:

//外部割り込み PB0が変化したら 両方のエッジを検出する(片方エッジにしたいがそうするとなぜかスタンバイから復帰しない)
ISR(PORTB_PORT_vect) {
 86e:	1f 92       	push	r1
 870:	0f 92       	push	r0
 872:	0f b6       	in	r0, 0x3f	; 63
 874:	0f 92       	push	r0
 876:	11 24       	eor	r1, r1
 878:	2f 93       	push	r18
 87a:	3f 93       	push	r19
 87c:	4f 93       	push	r20
 87e:	5f 93       	push	r21
 880:	6f 93       	push	r22
 882:	7f 93       	push	r23
 884:	8f 93       	push	r24
 886:	9f 93       	push	r25
 888:	af 93       	push	r26
 88a:	bf 93       	push	r27
 88c:	ef 93       	push	r30
 88e:	ff 93       	push	r31
	
	PORTB_INTFLAGS |= 0b00000010; //割り込み要求フラグ解除
 890:	e9 e2       	ldi	r30, 0x29	; 41
 892:	f4 e0       	ldi	r31, 0x04	; 4
 894:	80 81       	ld	r24, Z
 896:	82 60       	ori	r24, 0x02	; 2
 898:	80 83       	st	Z, r24

	//赤外線センサー PB0がLowに切り替わったら何もせず返す 両方のエッジを検出するようにしているので立ち下がりエッジ割り込みはここで無効にする
	if(!(VPORTB_IN & PIN0_bm)) {
 89a:	30 99       	sbic	0x06, 0	; 6
 89c:	04 c0       	rjmp	.+8      	; 0x8a6 <__vector_4+0x38>
		do_nothing = 1;
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <do_nothing>
		return;
 8a4:	29 c0       	rjmp	.+82     	; 0x8f8 <__vector_4+0x8a>
	}

	//赤外線センサー PB0がHighだったら一定時間起き上がらせる
	if(VPORTB_IN & PIN0_bm) {
 8a6:	30 9b       	sbis	0x06, 0	; 6
 8a8:	27 c0       	rjmp	.+78     	; 0x8f8 <__vector_4+0x8a>

		//前回寝てから2カウント以内だったら何もせずに再び寝る
		if((RTC_CNT - last_rtc_cnt) < 2) {
 8aa:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 8ae:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
 8b2:	20 91 1f 38 	lds	r18, 0x381F	; 0x80381f <last_rtc_cnt>
 8b6:	30 91 20 38 	lds	r19, 0x3820	; 0x803820 <last_rtc_cnt+0x1>
 8ba:	82 1b       	sub	r24, r18
 8bc:	93 0b       	sbc	r25, r19
 8be:	02 97       	sbiw	r24, 0x02	; 2
 8c0:	20 f4       	brcc	.+8      	; 0x8ca <__vector_4+0x5c>
			do_nothing = 1;
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <do_nothing>
			return;
 8c8:	17 c0       	rjmp	.+46     	; 0x8f8 <__vector_4+0x8a>
		}

		do_nothing = 0;
 8ca:	10 92 1e 38 	sts	0x381E, r1	; 0x80381e <do_nothing>

		//まず電圧測定する
		if(yet_v) {
 8ce:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <yet_v>
 8d2:	88 23       	and	r24, r24
 8d4:	21 f0       	breq	.+8      	; 0x8de <__vector_4+0x70>
			yet_v = 0; //電圧測定をしたことをyet_vに記録
 8d6:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <yet_v>
			get_v();
 8da:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
		}

		//一定時間起き上がらせる
		if(wakeup < 800) wakeup = 800;
 8de:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <wakeup>
 8e2:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <wakeup+0x1>
 8e6:	80 32       	cpi	r24, 0x20	; 32
 8e8:	93 40       	sbci	r25, 0x03	; 3
 8ea:	30 f4       	brcc	.+12     	; 0x8f8 <__vector_4+0x8a>
 8ec:	80 e2       	ldi	r24, 0x20	; 32
 8ee:	93 e0       	ldi	r25, 0x03	; 3
 8f0:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <wakeup>
 8f4:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <wakeup+0x1>
		return;
	}

	return;
}
 8f8:	ff 91       	pop	r31
 8fa:	ef 91       	pop	r30
 8fc:	bf 91       	pop	r27
 8fe:	af 91       	pop	r26
 900:	9f 91       	pop	r25
 902:	8f 91       	pop	r24
 904:	7f 91       	pop	r23
 906:	6f 91       	pop	r22
 908:	5f 91       	pop	r21
 90a:	4f 91       	pop	r20
 90c:	3f 91       	pop	r19
 90e:	2f 91       	pop	r18
 910:	0f 90       	pop	r0
 912:	0f be       	out	0x3f, r0	; 63
 914:	0f 90       	pop	r0
 916:	1f 90       	pop	r1
 918:	18 95       	reti

0000091a <__vector_6>:

//リアルタイムクロック 比較一致割り込み
ISR(RTC_CNT_vect) {
 91a:	1f 92       	push	r1
 91c:	0f 92       	push	r0
 91e:	0f b6       	in	r0, 0x3f	; 63
 920:	0f 92       	push	r0
 922:	11 24       	eor	r1, r1
 924:	2f 93       	push	r18
 926:	3f 93       	push	r19
 928:	4f 93       	push	r20
 92a:	5f 93       	push	r21
 92c:	6f 93       	push	r22
 92e:	7f 93       	push	r23
 930:	8f 93       	push	r24
 932:	9f 93       	push	r25
 934:	af 93       	push	r26
 936:	bf 93       	push	r27
 938:	ef 93       	push	r30
 93a:	ff 93       	push	r31
	RTC_CNT = 0;
 93c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 940:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
	RTC_INTFLAGS |= 0b00000010;
 944:	e3 e4       	ldi	r30, 0x43	; 67
 946:	f1 e0       	ldi	r31, 0x01	; 1
 948:	80 81       	ld	r24, Z
 94a:	82 60       	ori	r24, 0x02	; 2
 94c:	80 83       	st	Z, r24

	//時計を進める
	if (mode == MODE_CLOCK && ++min >= 60) {
 94e:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <mode>
 952:	81 30       	cpi	r24, 0x01	; 1
 954:	91 f4       	brne	.+36     	; 0x97a <__vector_6+0x60>
 956:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <min>
 95a:	8f 5f       	subi	r24, 0xFF	; 255
 95c:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <min>
 960:	8c 33       	cpi	r24, 0x3C	; 60
 962:	58 f0       	brcs	.+22     	; 0x97a <__vector_6+0x60>
		min = 0;
 964:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <min>
		if(++hour >= 24) hour = 0;
 968:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <hour>
 96c:	8f 5f       	subi	r24, 0xFF	; 255
 96e:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <hour>
 972:	88 31       	cpi	r24, 0x18	; 24
 974:	10 f0       	brcs	.+4      	; 0x97a <__vector_6+0x60>
 976:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <hour>
	}
	

	//1時間に1回やる処理
	if(!min) {
 97a:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <min>
 97e:	81 11       	cpse	r24, r1
 980:	44 c0       	rjmp	.+136    	; 0xa0a <__vector_6+0xf0>

		if(!wakeup){
 982:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <wakeup>
 986:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <wakeup+0x1>
 98a:	89 2b       	or	r24, r25
 98c:	09 f0       	breq	.+2      	; 0x990 <__vector_6+0x76>
 98e:	3d c0       	rjmp	.+122    	; 0xa0a <__vector_6+0xf0>
			get_v();
 990:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
			//低電圧再起動処理 起きてる時にやると一瞬7セグがちらつくので起きてない時(厳密には起きてるカウントがされていない時)にやる
			if(supply_v <= MIN_SUPPLY_V) {
 994:	60 91 28 38 	lds	r22, 0x3828	; 0x803828 <supply_v>
 998:	70 91 29 38 	lds	r23, 0x3829	; 0x803829 <supply_v+0x1>
 99c:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <supply_v+0x2>
 9a0:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <supply_v+0x3>
 9a4:	2a e9       	ldi	r18, 0x9A	; 154
 9a6:	39 e9       	ldi	r19, 0x99	; 153
 9a8:	49 ed       	ldi	r20, 0xD9	; 217
 9aa:	5f e3       	ldi	r21, 0x3F	; 63
 9ac:	0e 94 c3 05 	call	0xb86	; 0xb86 <__cmpsf2>
 9b0:	18 16       	cp	r1, r24
 9b2:	94 f0       	brlt	.+36     	; 0x9d8 <__vector_6+0xbe>
				//停止処理
				//ウォッチドッグタイマを0.008秒で起動
				wdt_enable(0b00000001);//0.008秒の場合、右4桁をデータシート上の8CLKのレジスタ設定値にする
 9b4:	88 ed       	ldi	r24, 0xD8	; 216
 9b6:	a8 95       	wdr
 9b8:	84 bf       	out	0x34, r24	; 52
 9ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
 9be:	81 60       	ori	r24, 0x01	; 1
 9c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
 9c4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__RODATA_PM_OFFSET__+0x7f8101>
 9c8:	81 fd       	sbrc	r24, 1
 9ca:	fc cf       	rjmp	.-8      	; 0x9c4 <__vector_6+0xaa>
 9cc:	87 ea       	ldi	r24, 0xA7	; 167
 9ce:	91 e6       	ldi	r25, 0x61	; 97
 9d0:	01 97       	sbiw	r24, 0x01	; 1
 9d2:	f1 f7       	brne	.-4      	; 0x9d0 <__vector_6+0xb6>
 9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <__vector_6+0xbc>
 9d6:	00 00       	nop
				//待機(しているあいだにウォッチドッグリセットがかかる)
				_delay_ms(100);
			}
			//高電圧放電処理
			if(supply_v >= MAX_SUPPLY_V) {
 9d8:	60 91 28 38 	lds	r22, 0x3828	; 0x803828 <supply_v>
 9dc:	70 91 29 38 	lds	r23, 0x3829	; 0x803829 <supply_v+0x1>
 9e0:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <supply_v+0x2>
 9e4:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <supply_v+0x3>
 9e8:	26 e6       	ldi	r18, 0x66	; 102
 9ea:	36 e6       	ldi	r19, 0x66	; 102
 9ec:	46 ea       	ldi	r20, 0xA6	; 166
 9ee:	50 e4       	ldi	r21, 0x40	; 64
 9f0:	0e 94 1b 07 	call	0xe36	; 0xe36 <__gesf2>
 9f4:	88 23       	and	r24, r24
 9f6:	4c f0       	brlt	.+18     	; 0xa0a <__vector_6+0xf0>
				wakeup = 5200;
 9f8:	80 e5       	ldi	r24, 0x50	; 80
 9fa:	94 e1       	ldi	r25, 0x14	; 20
 9fc:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <wakeup>
 a00:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <wakeup+0x1>
				discharge = 1;
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	80 93 22 38 	sts	0x3822, r24	; 0x803822 <discharge>
			}
		}
	}

	return;
}
 a0a:	ff 91       	pop	r31
 a0c:	ef 91       	pop	r30
 a0e:	bf 91       	pop	r27
 a10:	af 91       	pop	r26
 a12:	9f 91       	pop	r25
 a14:	8f 91       	pop	r24
 a16:	7f 91       	pop	r23
 a18:	6f 91       	pop	r22
 a1a:	5f 91       	pop	r21
 a1c:	4f 91       	pop	r20
 a1e:	3f 91       	pop	r19
 a20:	2f 91       	pop	r18
 a22:	0f 90       	pop	r0
 a24:	0f be       	out	0x3f, r0	; 63
 a26:	0f 90       	pop	r0
 a28:	1f 90       	pop	r1
 a2a:	18 95       	reti

00000a2c <main>:
int main(void) {

	//■□■――――――――――――――――――――――――――――――――――――■□■
	//		□ レジスタの設定
	//■□■――――――――――――――――――――――――――――――――――――■□■
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 a2c:	88 ed       	ldi	r24, 0xD8	; 216
 a2e:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLA = 0b00000000; //16/20 MHz内部オシレータ
 a30:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RODATA_PM_OFFSET__+0x7f8060>
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 a34:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLB = 0b00000111; //16分周
 a36:	97 e0       	ldi	r25, 0x07	; 7
 a38:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>

	//入出力モード設定
	VPORTA_DIR = 0b11111111; //ポートA 
 a3c:	9f ef       	ldi	r25, 0xFF	; 255
 a3e:	90 b9       	out	0x00, r25	; 0
	VPORTB_DIR = 0b11111100; //ポートB 
 a40:	2c ef       	ldi	r18, 0xFC	; 252
 a42:	24 b9       	out	0x04, r18	; 4
	VPORTC_DIR = 0b11111111; //ポートC
 a44:	98 b9       	out	0x08, r25	; 8

	//出力の初期化
	VPORTA_OUT = 0b00000000; //ポートA
 a46:	11 b8       	out	0x01, r1	; 1
	VPORTB_OUT = 0b00000000; //ポートB
 a48:	15 b8       	out	0x05, r1	; 5
	VPORTC_OUT = 0b00000000; //ポートC
 a4a:	19 b8       	out	0x09, r1	; 9

	//焦電型赤外線センサー入力
	PORTB_PIN0CTRL = 0b00000001; //プルアップ無効 両方のエッジを検出する
 a4c:	91 e0       	ldi	r25, 0x01	; 1
 a4e:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <__RODATA_PM_OFFSET__+0x7f8430>
	//タクトスイッチ入力
	PORTB_PIN1CTRL = 0b00001000; //プルアップ有効
 a52:	28 e0       	ldi	r18, 0x08	; 8
 a54:	20 93 31 04 	sts	0x0431, r18	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>

	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 a58:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_XOSC32KCTRLA = 0b00000001; //外付け水晶振動子 イネーブル
 a5a:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__RODATA_PM_OFFSET__+0x7f807c>
	
	//RTC設定
	RTC_INTCTRL = 0b00000010; //比較一致割り込み許可
 a5e:	82 e0       	ldi	r24, 0x02	; 2
 a60:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__RODATA_PM_OFFSET__+0x7f8142>
	RTC_CLKSEL  = 0b00000010; //クロック選択 XOSC32Kからの32.768 kHz
 a64:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <__RODATA_PM_OFFSET__+0x7f8147>
	//STATUS.CTRLABUSYフラグが1の間待機
	while((RTC_STATUS & 0b00000001));
 a68:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7f8141>
 a6c:	80 fd       	sbrc	r24, 0
 a6e:	fc cf       	rjmp	.-8      	; 0xa68 <main+0x3c>
	RTC_CTRLA   = 0b11110001; //ｽﾀﾝﾊﾞｲ休止動作でもRTC許可 16384分周=0.5秒カウント RTC許可
 a70:	81 ef       	ldi	r24, 0xF1	; 241
 a72:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__RODATA_PM_OFFSET__+0x7f8140>

	//割り込みたい間隔の秒数をx2-1して代入
	RTC_CMP = 60 * 2 - 1;
 a76:	87 e7       	ldi	r24, 0x77	; 119
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__RODATA_PM_OFFSET__+0x7f814c>
 a7e:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__RODATA_PM_OFFSET__+0x7f814d>
	RTC_CNT = 0;
 a82:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 a86:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>

	//タイマーA
	TCA0_SINGLE_CTRLA = 0b00001101; //1024分周 動作許可
 a8a:	8d e0       	ldi	r24, 0x0D	; 13
 a8c:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
	TCA0_SINGLE_CTRLB = 0b00000000; //
 a90:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
	TCA0_SINGLE_CMP0 = 1; // カウントがこの値に達したら割り込み(TCA0_CMP1_vect)が発生
 a94:	81 e0       	ldi	r24, 0x01	; 1
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
 a9c:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__RODATA_PM_OFFSET__+0x7f8a29>
	TCA0_SINGLE_INTCTRL = 0b00010000; //CMP0割り込み許可
 aa0:	80 e1       	ldi	r24, 0x10	; 16
 aa2:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__RODATA_PM_OFFSET__+0x7f8a0a>

	//ADC設定
	ADC0_CTRLA = 0b00000001; //ADC Enable
 aa6:	91 e0       	ldi	r25, 0x01	; 1
 aa8:	90 93 00 06 	sts	0x0600, r25	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
	ADC0_CTRLB = 0b00000000; //累積なし
 aac:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <__RODATA_PM_OFFSET__+0x7f8601>
	ADC0_CTRLC = 0b01010101; //VREF = VDD, プリスケーラ1/64
 ab0:	95 e5       	ldi	r25, 0x55	; 85
 ab2:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__RODATA_PM_OFFSET__+0x7f8602>
	VREF_CTRLA = 0b00010000; //内部基準電圧 1.1V
 ab6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__RODATA_PM_OFFSET__+0x7f80a0>

	set_sleep_mode(SLEEP_MODE_STANDBY); //スリープモードを設定
 aba:	e0 e5       	ldi	r30, 0x50	; 80
 abc:	f0 e0       	ldi	r31, 0x00	; 0
 abe:	80 81       	ld	r24, Z
 ac0:	89 7f       	andi	r24, 0xF9	; 249
 ac2:	82 60       	ori	r24, 0x02	; 2
 ac4:	80 83       	st	Z, r24
 ac6:	81 ee       	ldi	r24, 0xE1	; 225
 ac8:	94 e0       	ldi	r25, 0x04	; 4
 aca:	01 97       	sbiw	r24, 0x01	; 1
 acc:	f1 f7       	brne	.-4      	; 0xaca <main+0x9e>
 ace:	00 c0       	rjmp	.+0      	; 0xad0 <main+0xa4>
 ad0:	00 00       	nop

	//少し待機
	_delay_ms(5);

	sei(); //割り込み許可
 ad2:	78 94       	sei
 ad4:	23 c0       	rjmp	.+70     	; 0xb1c <main+0xf0>
	
	while (1) {

		//放電中ループ 起き続け3秒毎に電圧を計り下がっていたらブレイク
		while (discharge) {
			get_v();
 ad6:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
			if(supply_v < (MAX_SUPPLY_V - 0.1)) {
 ada:	60 91 28 38 	lds	r22, 0x3828	; 0x803828 <supply_v>
 ade:	70 91 29 38 	lds	r23, 0x3829	; 0x803829 <supply_v+0x1>
 ae2:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <supply_v+0x2>
 ae6:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <supply_v+0x3>
 aea:	23 e3       	ldi	r18, 0x33	; 51
 aec:	33 e3       	ldi	r19, 0x33	; 51
 aee:	43 ea       	ldi	r20, 0xA3	; 163
 af0:	50 e4       	ldi	r21, 0x40	; 64
 af2:	0e 94 c3 05 	call	0xb86	; 0xb86 <__cmpsf2>
 af6:	88 23       	and	r24, r24
 af8:	3c f4       	brge	.+14     	; 0xb08 <main+0xdc>
				discharge = 0;
 afa:	10 92 22 38 	sts	0x3822, r1	; 0x803822 <discharge>
				wakeup = 0;
 afe:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <wakeup>
 b02:	10 92 30 38 	sts	0x3830, r1	; 0x803830 <wakeup+0x1>
				break;
 b06:	0e c0       	rjmp	.+28     	; 0xb24 <main+0xf8>
			}
			sens_delay_ms(3000);
 b08:	88 eb       	ldi	r24, 0xB8	; 184
 b0a:	9b e0       	ldi	r25, 0x0B	; 11
 b0c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <sens_delay_ms>
			wakeup = 5200;
 b10:	80 e5       	ldi	r24, 0x50	; 80
 b12:	94 e1       	ldi	r25, 0x14	; 20
 b14:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <wakeup>
 b18:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <wakeup+0x1>
	sei(); //割り込み許可
	
	while (1) {

		//放電中ループ 起き続け3秒毎に電圧を計り下がっていたらブレイク
		while (discharge) {
 b1c:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <discharge>
 b20:	81 11       	cpse	r24, r1
 b22:	d9 cf       	rjmp	.-78     	; 0xad6 <main+0xaa>
			}
			sens_delay_ms(3000);
			wakeup = 5200;
		}

		if(!wakeup) {
 b24:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <wakeup>
 b28:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <wakeup+0x1>
 b2c:	89 2b       	or	r24, r25
 b2e:	31 f5       	brne	.+76     	; 0xb7c <main+0x150>
			//寝る準備
			if(!do_nothing) {
 b30:	80 91 1e 38 	lds	r24, 0x381E	; 0x80381e <do_nothing>
 b34:	81 11       	cpse	r24, r1
 b36:	08 c0       	rjmp	.+16     	; 0xb48 <main+0x11c>
				last_rtc_cnt = RTC_CNT;
 b38:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 b3c:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
 b40:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <last_rtc_cnt>
 b44:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <last_rtc_cnt+0x1>
			}
			seg_all_off();
 b48:	0e 94 f7 01 	call	0x3ee	; 0x3ee <seg_all_off>
			change_mode(MODE_CLOCK);
 b4c:	81 e0       	ldi	r24, 0x01	; 1
 b4e:	0e 94 01 02 	call	0x402	; 0x402 <change_mode>
			display_v = 0;
 b52:	10 92 23 38 	sts	0x3823, r1	; 0x803823 <display_v>
			yet_v = 1;
 b56:	81 e0       	ldi	r24, 0x01	; 1
 b58:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <yet_v>
			s24count = 0;
 b5c:	10 92 21 38 	sts	0x3821, r1	; 0x803821 <s24count>
			old_min = old_hour = 255;
 b60:	8f ef       	ldi	r24, 0xFF	; 255
 b62:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <old_hour>
 b66:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <old_min>
			//寝る
			sleep_mode();
 b6a:	e0 e5       	ldi	r30, 0x50	; 80
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
 b6e:	80 81       	ld	r24, Z
 b70:	81 60       	ori	r24, 0x01	; 1
 b72:	80 83       	st	Z, r24
 b74:	88 95       	sleep
 b76:	80 81       	ld	r24, Z
 b78:	8e 7f       	andi	r24, 0xFE	; 254
 b7a:	80 83       	st	Z, r24
		}
		
		sens_delay_ms(5);
 b7c:	85 e0       	ldi	r24, 0x05	; 5
 b7e:	90 e0       	ldi	r25, 0x00	; 0
 b80:	0e 94 79 01 	call	0x2f2	; 0x2f2 <sens_delay_ms>

	}
 b84:	cb cf       	rjmp	.-106    	; 0xb1c <main+0xf0>

00000b86 <__cmpsf2>:
 b86:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__fp_cmp>
 b8a:	08 f4       	brcc	.+2      	; 0xb8e <__cmpsf2+0x8>
 b8c:	81 e0       	ldi	r24, 0x01	; 1
 b8e:	08 95       	ret

00000b90 <__divsf3>:
 b90:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__divsf3x>
 b94:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_round>
 b98:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__fp_pscB>
 b9c:	58 f0       	brcs	.+22     	; 0xbb4 <__divsf3+0x24>
 b9e:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fp_pscA>
 ba2:	40 f0       	brcs	.+16     	; 0xbb4 <__divsf3+0x24>
 ba4:	29 f4       	brne	.+10     	; 0xbb0 <__divsf3+0x20>
 ba6:	5f 3f       	cpi	r21, 0xFF	; 255
 ba8:	29 f0       	breq	.+10     	; 0xbb4 <__divsf3+0x24>
 baa:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__fp_inf>
 bae:	51 11       	cpse	r21, r1
 bb0:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__fp_szero>
 bb4:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_nan>

00000bb8 <__divsf3x>:
 bb8:	0e 94 f2 06 	call	0xde4	; 0xde4 <__fp_split3>
 bbc:	68 f3       	brcs	.-38     	; 0xb98 <__divsf3+0x8>

00000bbe <__divsf3_pse>:
 bbe:	99 23       	and	r25, r25
 bc0:	b1 f3       	breq	.-20     	; 0xbae <__divsf3+0x1e>
 bc2:	55 23       	and	r21, r21
 bc4:	91 f3       	breq	.-28     	; 0xbaa <__divsf3+0x1a>
 bc6:	95 1b       	sub	r25, r21
 bc8:	55 0b       	sbc	r21, r21
 bca:	bb 27       	eor	r27, r27
 bcc:	aa 27       	eor	r26, r26
 bce:	62 17       	cp	r22, r18
 bd0:	73 07       	cpc	r23, r19
 bd2:	84 07       	cpc	r24, r20
 bd4:	38 f0       	brcs	.+14     	; 0xbe4 <__divsf3_pse+0x26>
 bd6:	9f 5f       	subi	r25, 0xFF	; 255
 bd8:	5f 4f       	sbci	r21, 0xFF	; 255
 bda:	22 0f       	add	r18, r18
 bdc:	33 1f       	adc	r19, r19
 bde:	44 1f       	adc	r20, r20
 be0:	aa 1f       	adc	r26, r26
 be2:	a9 f3       	breq	.-22     	; 0xbce <__divsf3_pse+0x10>
 be4:	35 d0       	rcall	.+106    	; 0xc50 <__divsf3_pse+0x92>
 be6:	0e 2e       	mov	r0, r30
 be8:	3a f0       	brmi	.+14     	; 0xbf8 <__divsf3_pse+0x3a>
 bea:	e0 e8       	ldi	r30, 0x80	; 128
 bec:	32 d0       	rcall	.+100    	; 0xc52 <__divsf3_pse+0x94>
 bee:	91 50       	subi	r25, 0x01	; 1
 bf0:	50 40       	sbci	r21, 0x00	; 0
 bf2:	e6 95       	lsr	r30
 bf4:	00 1c       	adc	r0, r0
 bf6:	ca f7       	brpl	.-14     	; 0xbea <__divsf3_pse+0x2c>
 bf8:	2b d0       	rcall	.+86     	; 0xc50 <__divsf3_pse+0x92>
 bfa:	fe 2f       	mov	r31, r30
 bfc:	29 d0       	rcall	.+82     	; 0xc50 <__divsf3_pse+0x92>
 bfe:	66 0f       	add	r22, r22
 c00:	77 1f       	adc	r23, r23
 c02:	88 1f       	adc	r24, r24
 c04:	bb 1f       	adc	r27, r27
 c06:	26 17       	cp	r18, r22
 c08:	37 07       	cpc	r19, r23
 c0a:	48 07       	cpc	r20, r24
 c0c:	ab 07       	cpc	r26, r27
 c0e:	b0 e8       	ldi	r27, 0x80	; 128
 c10:	09 f0       	breq	.+2      	; 0xc14 <__divsf3_pse+0x56>
 c12:	bb 0b       	sbc	r27, r27
 c14:	80 2d       	mov	r24, r0
 c16:	bf 01       	movw	r22, r30
 c18:	ff 27       	eor	r31, r31
 c1a:	93 58       	subi	r25, 0x83	; 131
 c1c:	5f 4f       	sbci	r21, 0xFF	; 255
 c1e:	3a f0       	brmi	.+14     	; 0xc2e <__divsf3_pse+0x70>
 c20:	9e 3f       	cpi	r25, 0xFE	; 254
 c22:	51 05       	cpc	r21, r1
 c24:	78 f0       	brcs	.+30     	; 0xc44 <__divsf3_pse+0x86>
 c26:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__fp_inf>
 c2a:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__fp_szero>
 c2e:	5f 3f       	cpi	r21, 0xFF	; 255
 c30:	e4 f3       	brlt	.-8      	; 0xc2a <__divsf3_pse+0x6c>
 c32:	98 3e       	cpi	r25, 0xE8	; 232
 c34:	d4 f3       	brlt	.-12     	; 0xc2a <__divsf3_pse+0x6c>
 c36:	86 95       	lsr	r24
 c38:	77 95       	ror	r23
 c3a:	67 95       	ror	r22
 c3c:	b7 95       	ror	r27
 c3e:	f7 95       	ror	r31
 c40:	9f 5f       	subi	r25, 0xFF	; 255
 c42:	c9 f7       	brne	.-14     	; 0xc36 <__divsf3_pse+0x78>
 c44:	88 0f       	add	r24, r24
 c46:	91 1d       	adc	r25, r1
 c48:	96 95       	lsr	r25
 c4a:	87 95       	ror	r24
 c4c:	97 f9       	bld	r25, 7
 c4e:	08 95       	ret
 c50:	e1 e0       	ldi	r30, 0x01	; 1
 c52:	66 0f       	add	r22, r22
 c54:	77 1f       	adc	r23, r23
 c56:	88 1f       	adc	r24, r24
 c58:	bb 1f       	adc	r27, r27
 c5a:	62 17       	cp	r22, r18
 c5c:	73 07       	cpc	r23, r19
 c5e:	84 07       	cpc	r24, r20
 c60:	ba 07       	cpc	r27, r26
 c62:	20 f0       	brcs	.+8      	; 0xc6c <__divsf3_pse+0xae>
 c64:	62 1b       	sub	r22, r18
 c66:	73 0b       	sbc	r23, r19
 c68:	84 0b       	sbc	r24, r20
 c6a:	ba 0b       	sbc	r27, r26
 c6c:	ee 1f       	adc	r30, r30
 c6e:	88 f7       	brcc	.-30     	; 0xc52 <__divsf3_pse+0x94>
 c70:	e0 95       	com	r30
 c72:	08 95       	ret

00000c74 <__fixunssfsi>:
 c74:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__fp_splitA>
 c78:	88 f0       	brcs	.+34     	; 0xc9c <__fixunssfsi+0x28>
 c7a:	9f 57       	subi	r25, 0x7F	; 127
 c7c:	98 f0       	brcs	.+38     	; 0xca4 <__fixunssfsi+0x30>
 c7e:	b9 2f       	mov	r27, r25
 c80:	99 27       	eor	r25, r25
 c82:	b7 51       	subi	r27, 0x17	; 23
 c84:	b0 f0       	brcs	.+44     	; 0xcb2 <__fixunssfsi+0x3e>
 c86:	e1 f0       	breq	.+56     	; 0xcc0 <__fixunssfsi+0x4c>
 c88:	66 0f       	add	r22, r22
 c8a:	77 1f       	adc	r23, r23
 c8c:	88 1f       	adc	r24, r24
 c8e:	99 1f       	adc	r25, r25
 c90:	1a f0       	brmi	.+6      	; 0xc98 <__fixunssfsi+0x24>
 c92:	ba 95       	dec	r27
 c94:	c9 f7       	brne	.-14     	; 0xc88 <__fixunssfsi+0x14>
 c96:	14 c0       	rjmp	.+40     	; 0xcc0 <__fixunssfsi+0x4c>
 c98:	b1 30       	cpi	r27, 0x01	; 1
 c9a:	91 f0       	breq	.+36     	; 0xcc0 <__fixunssfsi+0x4c>
 c9c:	0e 94 14 07 	call	0xe28	; 0xe28 <__fp_zero>
 ca0:	b1 e0       	ldi	r27, 0x01	; 1
 ca2:	08 95       	ret
 ca4:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_zero>
 ca8:	67 2f       	mov	r22, r23
 caa:	78 2f       	mov	r23, r24
 cac:	88 27       	eor	r24, r24
 cae:	b8 5f       	subi	r27, 0xF8	; 248
 cb0:	39 f0       	breq	.+14     	; 0xcc0 <__fixunssfsi+0x4c>
 cb2:	b9 3f       	cpi	r27, 0xF9	; 249
 cb4:	cc f3       	brlt	.-14     	; 0xca8 <__fixunssfsi+0x34>
 cb6:	86 95       	lsr	r24
 cb8:	77 95       	ror	r23
 cba:	67 95       	ror	r22
 cbc:	b3 95       	inc	r27
 cbe:	d9 f7       	brne	.-10     	; 0xcb6 <__fixunssfsi+0x42>
 cc0:	3e f4       	brtc	.+14     	; 0xcd0 <__fixunssfsi+0x5c>
 cc2:	90 95       	com	r25
 cc4:	80 95       	com	r24
 cc6:	70 95       	com	r23
 cc8:	61 95       	neg	r22
 cca:	7f 4f       	sbci	r23, 0xFF	; 255
 ccc:	8f 4f       	sbci	r24, 0xFF	; 255
 cce:	9f 4f       	sbci	r25, 0xFF	; 255
 cd0:	08 95       	ret

00000cd2 <__floatunsisf>:
 cd2:	e8 94       	clt
 cd4:	09 c0       	rjmp	.+18     	; 0xce8 <__floatsisf+0x12>

00000cd6 <__floatsisf>:
 cd6:	97 fb       	bst	r25, 7
 cd8:	3e f4       	brtc	.+14     	; 0xce8 <__floatsisf+0x12>
 cda:	90 95       	com	r25
 cdc:	80 95       	com	r24
 cde:	70 95       	com	r23
 ce0:	61 95       	neg	r22
 ce2:	7f 4f       	sbci	r23, 0xFF	; 255
 ce4:	8f 4f       	sbci	r24, 0xFF	; 255
 ce6:	9f 4f       	sbci	r25, 0xFF	; 255
 ce8:	99 23       	and	r25, r25
 cea:	a9 f0       	breq	.+42     	; 0xd16 <__floatsisf+0x40>
 cec:	f9 2f       	mov	r31, r25
 cee:	96 e9       	ldi	r25, 0x96	; 150
 cf0:	bb 27       	eor	r27, r27
 cf2:	93 95       	inc	r25
 cf4:	f6 95       	lsr	r31
 cf6:	87 95       	ror	r24
 cf8:	77 95       	ror	r23
 cfa:	67 95       	ror	r22
 cfc:	b7 95       	ror	r27
 cfe:	f1 11       	cpse	r31, r1
 d00:	f8 cf       	rjmp	.-16     	; 0xcf2 <__floatsisf+0x1c>
 d02:	fa f4       	brpl	.+62     	; 0xd42 <__floatsisf+0x6c>
 d04:	bb 0f       	add	r27, r27
 d06:	11 f4       	brne	.+4      	; 0xd0c <__floatsisf+0x36>
 d08:	60 ff       	sbrs	r22, 0
 d0a:	1b c0       	rjmp	.+54     	; 0xd42 <__floatsisf+0x6c>
 d0c:	6f 5f       	subi	r22, 0xFF	; 255
 d0e:	7f 4f       	sbci	r23, 0xFF	; 255
 d10:	8f 4f       	sbci	r24, 0xFF	; 255
 d12:	9f 4f       	sbci	r25, 0xFF	; 255
 d14:	16 c0       	rjmp	.+44     	; 0xd42 <__floatsisf+0x6c>
 d16:	88 23       	and	r24, r24
 d18:	11 f0       	breq	.+4      	; 0xd1e <__floatsisf+0x48>
 d1a:	96 e9       	ldi	r25, 0x96	; 150
 d1c:	11 c0       	rjmp	.+34     	; 0xd40 <__floatsisf+0x6a>
 d1e:	77 23       	and	r23, r23
 d20:	21 f0       	breq	.+8      	; 0xd2a <__floatsisf+0x54>
 d22:	9e e8       	ldi	r25, 0x8E	; 142
 d24:	87 2f       	mov	r24, r23
 d26:	76 2f       	mov	r23, r22
 d28:	05 c0       	rjmp	.+10     	; 0xd34 <__floatsisf+0x5e>
 d2a:	66 23       	and	r22, r22
 d2c:	71 f0       	breq	.+28     	; 0xd4a <__floatsisf+0x74>
 d2e:	96 e8       	ldi	r25, 0x86	; 134
 d30:	86 2f       	mov	r24, r22
 d32:	70 e0       	ldi	r23, 0x00	; 0
 d34:	60 e0       	ldi	r22, 0x00	; 0
 d36:	2a f0       	brmi	.+10     	; 0xd42 <__floatsisf+0x6c>
 d38:	9a 95       	dec	r25
 d3a:	66 0f       	add	r22, r22
 d3c:	77 1f       	adc	r23, r23
 d3e:	88 1f       	adc	r24, r24
 d40:	da f7       	brpl	.-10     	; 0xd38 <__floatsisf+0x62>
 d42:	88 0f       	add	r24, r24
 d44:	96 95       	lsr	r25
 d46:	87 95       	ror	r24
 d48:	97 f9       	bld	r25, 7
 d4a:	08 95       	ret

00000d4c <__fp_cmp>:
 d4c:	99 0f       	add	r25, r25
 d4e:	00 08       	sbc	r0, r0
 d50:	55 0f       	add	r21, r21
 d52:	aa 0b       	sbc	r26, r26
 d54:	e0 e8       	ldi	r30, 0x80	; 128
 d56:	fe ef       	ldi	r31, 0xFE	; 254
 d58:	16 16       	cp	r1, r22
 d5a:	17 06       	cpc	r1, r23
 d5c:	e8 07       	cpc	r30, r24
 d5e:	f9 07       	cpc	r31, r25
 d60:	c0 f0       	brcs	.+48     	; 0xd92 <__fp_cmp+0x46>
 d62:	12 16       	cp	r1, r18
 d64:	13 06       	cpc	r1, r19
 d66:	e4 07       	cpc	r30, r20
 d68:	f5 07       	cpc	r31, r21
 d6a:	98 f0       	brcs	.+38     	; 0xd92 <__fp_cmp+0x46>
 d6c:	62 1b       	sub	r22, r18
 d6e:	73 0b       	sbc	r23, r19
 d70:	84 0b       	sbc	r24, r20
 d72:	95 0b       	sbc	r25, r21
 d74:	39 f4       	brne	.+14     	; 0xd84 <__fp_cmp+0x38>
 d76:	0a 26       	eor	r0, r26
 d78:	61 f0       	breq	.+24     	; 0xd92 <__fp_cmp+0x46>
 d7a:	23 2b       	or	r18, r19
 d7c:	24 2b       	or	r18, r20
 d7e:	25 2b       	or	r18, r21
 d80:	21 f4       	brne	.+8      	; 0xd8a <__fp_cmp+0x3e>
 d82:	08 95       	ret
 d84:	0a 26       	eor	r0, r26
 d86:	09 f4       	brne	.+2      	; 0xd8a <__fp_cmp+0x3e>
 d88:	a1 40       	sbci	r26, 0x01	; 1
 d8a:	a6 95       	lsr	r26
 d8c:	8f ef       	ldi	r24, 0xFF	; 255
 d8e:	81 1d       	adc	r24, r1
 d90:	81 1d       	adc	r24, r1
 d92:	08 95       	ret

00000d94 <__fp_inf>:
 d94:	97 f9       	bld	r25, 7
 d96:	9f 67       	ori	r25, 0x7F	; 127
 d98:	80 e8       	ldi	r24, 0x80	; 128
 d9a:	70 e0       	ldi	r23, 0x00	; 0
 d9c:	60 e0       	ldi	r22, 0x00	; 0
 d9e:	08 95       	ret

00000da0 <__fp_nan>:
 da0:	9f ef       	ldi	r25, 0xFF	; 255
 da2:	80 ec       	ldi	r24, 0xC0	; 192
 da4:	08 95       	ret

00000da6 <__fp_pscA>:
 da6:	00 24       	eor	r0, r0
 da8:	0a 94       	dec	r0
 daa:	16 16       	cp	r1, r22
 dac:	17 06       	cpc	r1, r23
 dae:	18 06       	cpc	r1, r24
 db0:	09 06       	cpc	r0, r25
 db2:	08 95       	ret

00000db4 <__fp_pscB>:
 db4:	00 24       	eor	r0, r0
 db6:	0a 94       	dec	r0
 db8:	12 16       	cp	r1, r18
 dba:	13 06       	cpc	r1, r19
 dbc:	14 06       	cpc	r1, r20
 dbe:	05 06       	cpc	r0, r21
 dc0:	08 95       	ret

00000dc2 <__fp_round>:
 dc2:	09 2e       	mov	r0, r25
 dc4:	03 94       	inc	r0
 dc6:	00 0c       	add	r0, r0
 dc8:	11 f4       	brne	.+4      	; 0xdce <__fp_round+0xc>
 dca:	88 23       	and	r24, r24
 dcc:	52 f0       	brmi	.+20     	; 0xde2 <__fp_round+0x20>
 dce:	bb 0f       	add	r27, r27
 dd0:	40 f4       	brcc	.+16     	; 0xde2 <__fp_round+0x20>
 dd2:	bf 2b       	or	r27, r31
 dd4:	11 f4       	brne	.+4      	; 0xdda <__fp_round+0x18>
 dd6:	60 ff       	sbrs	r22, 0
 dd8:	04 c0       	rjmp	.+8      	; 0xde2 <__fp_round+0x20>
 dda:	6f 5f       	subi	r22, 0xFF	; 255
 ddc:	7f 4f       	sbci	r23, 0xFF	; 255
 dde:	8f 4f       	sbci	r24, 0xFF	; 255
 de0:	9f 4f       	sbci	r25, 0xFF	; 255
 de2:	08 95       	ret

00000de4 <__fp_split3>:
 de4:	57 fd       	sbrc	r21, 7
 de6:	90 58       	subi	r25, 0x80	; 128
 de8:	44 0f       	add	r20, r20
 dea:	55 1f       	adc	r21, r21
 dec:	59 f0       	breq	.+22     	; 0xe04 <__fp_splitA+0x10>
 dee:	5f 3f       	cpi	r21, 0xFF	; 255
 df0:	71 f0       	breq	.+28     	; 0xe0e <__fp_splitA+0x1a>
 df2:	47 95       	ror	r20

00000df4 <__fp_splitA>:
 df4:	88 0f       	add	r24, r24
 df6:	97 fb       	bst	r25, 7
 df8:	99 1f       	adc	r25, r25
 dfa:	61 f0       	breq	.+24     	; 0xe14 <__fp_splitA+0x20>
 dfc:	9f 3f       	cpi	r25, 0xFF	; 255
 dfe:	79 f0       	breq	.+30     	; 0xe1e <__fp_splitA+0x2a>
 e00:	87 95       	ror	r24
 e02:	08 95       	ret
 e04:	12 16       	cp	r1, r18
 e06:	13 06       	cpc	r1, r19
 e08:	14 06       	cpc	r1, r20
 e0a:	55 1f       	adc	r21, r21
 e0c:	f2 cf       	rjmp	.-28     	; 0xdf2 <__fp_split3+0xe>
 e0e:	46 95       	lsr	r20
 e10:	f1 df       	rcall	.-30     	; 0xdf4 <__fp_splitA>
 e12:	08 c0       	rjmp	.+16     	; 0xe24 <__fp_splitA+0x30>
 e14:	16 16       	cp	r1, r22
 e16:	17 06       	cpc	r1, r23
 e18:	18 06       	cpc	r1, r24
 e1a:	99 1f       	adc	r25, r25
 e1c:	f1 cf       	rjmp	.-30     	; 0xe00 <__fp_splitA+0xc>
 e1e:	86 95       	lsr	r24
 e20:	71 05       	cpc	r23, r1
 e22:	61 05       	cpc	r22, r1
 e24:	08 94       	sec
 e26:	08 95       	ret

00000e28 <__fp_zero>:
 e28:	e8 94       	clt

00000e2a <__fp_szero>:
 e2a:	bb 27       	eor	r27, r27
 e2c:	66 27       	eor	r22, r22
 e2e:	77 27       	eor	r23, r23
 e30:	cb 01       	movw	r24, r22
 e32:	97 f9       	bld	r25, 7
 e34:	08 95       	ret

00000e36 <__gesf2>:
 e36:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__fp_cmp>
 e3a:	08 f4       	brcc	.+2      	; 0xe3e <__gesf2+0x8>
 e3c:	8f ef       	ldi	r24, 0xFF	; 255
 e3e:	08 95       	ret

00000e40 <__mulsf3>:
 e40:	0e 94 33 07 	call	0xe66	; 0xe66 <__mulsf3x>
 e44:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_round>
 e48:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fp_pscA>
 e4c:	38 f0       	brcs	.+14     	; 0xe5c <__mulsf3+0x1c>
 e4e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__fp_pscB>
 e52:	20 f0       	brcs	.+8      	; 0xe5c <__mulsf3+0x1c>
 e54:	95 23       	and	r25, r21
 e56:	11 f0       	breq	.+4      	; 0xe5c <__mulsf3+0x1c>
 e58:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__fp_inf>
 e5c:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_nan>
 e60:	11 24       	eor	r1, r1
 e62:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__fp_szero>

00000e66 <__mulsf3x>:
 e66:	0e 94 f2 06 	call	0xde4	; 0xde4 <__fp_split3>
 e6a:	70 f3       	brcs	.-36     	; 0xe48 <__mulsf3+0x8>

00000e6c <__mulsf3_pse>:
 e6c:	95 9f       	mul	r25, r21
 e6e:	c1 f3       	breq	.-16     	; 0xe60 <__mulsf3+0x20>
 e70:	95 0f       	add	r25, r21
 e72:	50 e0       	ldi	r21, 0x00	; 0
 e74:	55 1f       	adc	r21, r21
 e76:	62 9f       	mul	r22, r18
 e78:	f0 01       	movw	r30, r0
 e7a:	72 9f       	mul	r23, r18
 e7c:	bb 27       	eor	r27, r27
 e7e:	f0 0d       	add	r31, r0
 e80:	b1 1d       	adc	r27, r1
 e82:	63 9f       	mul	r22, r19
 e84:	aa 27       	eor	r26, r26
 e86:	f0 0d       	add	r31, r0
 e88:	b1 1d       	adc	r27, r1
 e8a:	aa 1f       	adc	r26, r26
 e8c:	64 9f       	mul	r22, r20
 e8e:	66 27       	eor	r22, r22
 e90:	b0 0d       	add	r27, r0
 e92:	a1 1d       	adc	r26, r1
 e94:	66 1f       	adc	r22, r22
 e96:	82 9f       	mul	r24, r18
 e98:	22 27       	eor	r18, r18
 e9a:	b0 0d       	add	r27, r0
 e9c:	a1 1d       	adc	r26, r1
 e9e:	62 1f       	adc	r22, r18
 ea0:	73 9f       	mul	r23, r19
 ea2:	b0 0d       	add	r27, r0
 ea4:	a1 1d       	adc	r26, r1
 ea6:	62 1f       	adc	r22, r18
 ea8:	83 9f       	mul	r24, r19
 eaa:	a0 0d       	add	r26, r0
 eac:	61 1d       	adc	r22, r1
 eae:	22 1f       	adc	r18, r18
 eb0:	74 9f       	mul	r23, r20
 eb2:	33 27       	eor	r19, r19
 eb4:	a0 0d       	add	r26, r0
 eb6:	61 1d       	adc	r22, r1
 eb8:	23 1f       	adc	r18, r19
 eba:	84 9f       	mul	r24, r20
 ebc:	60 0d       	add	r22, r0
 ebe:	21 1d       	adc	r18, r1
 ec0:	82 2f       	mov	r24, r18
 ec2:	76 2f       	mov	r23, r22
 ec4:	6a 2f       	mov	r22, r26
 ec6:	11 24       	eor	r1, r1
 ec8:	9f 57       	subi	r25, 0x7F	; 127
 eca:	50 40       	sbci	r21, 0x00	; 0
 ecc:	9a f0       	brmi	.+38     	; 0xef4 <__mulsf3_pse+0x88>
 ece:	f1 f0       	breq	.+60     	; 0xf0c <__mulsf3_pse+0xa0>
 ed0:	88 23       	and	r24, r24
 ed2:	4a f0       	brmi	.+18     	; 0xee6 <__mulsf3_pse+0x7a>
 ed4:	ee 0f       	add	r30, r30
 ed6:	ff 1f       	adc	r31, r31
 ed8:	bb 1f       	adc	r27, r27
 eda:	66 1f       	adc	r22, r22
 edc:	77 1f       	adc	r23, r23
 ede:	88 1f       	adc	r24, r24
 ee0:	91 50       	subi	r25, 0x01	; 1
 ee2:	50 40       	sbci	r21, 0x00	; 0
 ee4:	a9 f7       	brne	.-22     	; 0xed0 <__mulsf3_pse+0x64>
 ee6:	9e 3f       	cpi	r25, 0xFE	; 254
 ee8:	51 05       	cpc	r21, r1
 eea:	80 f0       	brcs	.+32     	; 0xf0c <__mulsf3_pse+0xa0>
 eec:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__fp_inf>
 ef0:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__fp_szero>
 ef4:	5f 3f       	cpi	r21, 0xFF	; 255
 ef6:	e4 f3       	brlt	.-8      	; 0xef0 <__mulsf3_pse+0x84>
 ef8:	98 3e       	cpi	r25, 0xE8	; 232
 efa:	d4 f3       	brlt	.-12     	; 0xef0 <__mulsf3_pse+0x84>
 efc:	86 95       	lsr	r24
 efe:	77 95       	ror	r23
 f00:	67 95       	ror	r22
 f02:	b7 95       	ror	r27
 f04:	f7 95       	ror	r31
 f06:	e7 95       	ror	r30
 f08:	9f 5f       	subi	r25, 0xFF	; 255
 f0a:	c1 f7       	brne	.-16     	; 0xefc <__mulsf3_pse+0x90>
 f0c:	fe 2b       	or	r31, r30
 f0e:	88 0f       	add	r24, r24
 f10:	91 1d       	adc	r25, r1
 f12:	96 95       	lsr	r25
 f14:	87 95       	ror	r24
 f16:	97 f9       	bld	r25, 7
 f18:	08 95       	ret

00000f1a <_exit>:
 f1a:	f8 94       	cli

00000f1c <__stop_program>:
 f1c:	ff cf       	rjmp	.-2      	; 0xf1c <__stop_program>
