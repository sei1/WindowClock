
WindowClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00803800  00000d14  00000da8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  0080380e  0080380e  00000db6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000db6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000de8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200e  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b01  00000000  00000000  00002e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008dc  00000000  00000000  0000498f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  0000526c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d71  00000000  00000000  00005428  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000756  00000000  00000000  00006199  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000068ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__vector_4>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__vector_6>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 83 01 	jmp	0x306	; 0x306 <__vector_10>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
  88:	18 e3       	ldi	r17, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	e4 e1       	ldi	r30, 0x14	; 20
  90:	fd e0       	ldi	r31, 0x0D	; 13
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ae 30       	cpi	r26, 0x0E	; 14
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	28 e3       	ldi	r18, 0x38	; 56
  a0:	ae e0       	ldi	r26, 0x0E	; 14
  a2:	b8 e3       	ldi	r27, 0x38	; 56
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a3 32       	cpi	r26, 0x23	; 35
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 28 04 	call	0x850	; 0x850 <main>
  b2:	0c 94 88 06 	jmp	0xd10	; 0xd10 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <get_v>:
// プログラム本文
//---------------------------------


//キャパシタに蓄えられた電源電圧と太陽電池の発電電圧を取得する関数
void get_v (void) {
  ba:	cf 92       	push	r12
  bc:	df 92       	push	r13
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
	
	uint16_t x = 0;
	uint16_t y = 0;

	//PB1をタクトスイッチ入力から一時的に太陽電池電圧の測定ピンに切り替える
	PORTB_PIN1CTRL = 0b00000000; //プルアップ無効 エッジを検出しない
  c6:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>
	VPORTB_DIR    |= 0b00000010; //出力モードに変更
  ca:	84 b1       	in	r24, 0x04	; 4
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	84 b9       	out	0x04, r24	; 4
	VPORTB_OUT    &= 0b11111101; //出力Low
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	8d 7f       	andi	r24, 0xFD	; 253
  d4:	85 b9       	out	0x05, r24	; 5

	//この状態でPB1の電圧を抜いている間に基準電圧1.1V / 電源電圧を測定しておく

	// 基準電圧1.1V / 電源電圧 を10bit(1024段階)で測定
	ADC0_MUXPOS = 0b00011101; //基準電圧
  d6:	8d e1       	ldi	r24, 0x1D	; 29
  d8:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7f8606>

	ADC0_COMMAND = 1;//AD変換開始
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
	while(ADC0_COMMAND);
  e2:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
  e6:	81 11       	cpse	r24, r1
  e8:	fc cf       	rjmp	.-8      	; 0xe2 <get_v+0x28>
	ADC0_COMMAND = 0;//AD変換終了
  ea:	c8 e0       	ldi	r28, 0x08	; 8
  ec:	d6 e0       	ldi	r29, 0x06	; 6
  ee:	18 82       	st	Y, r1

	y = ADC0_RES;
  f0:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
  f4:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
	
	//電源電圧を算出
	supply_v = 1023 * 1.1 / y;
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 64 05 	call	0xac8	; 0xac8 <__floatunsisf>
 100:	6b 01       	movw	r12, r22
 102:	7c 01       	movw	r14, r24
 104:	9b 01       	movw	r18, r22
 106:	ac 01       	movw	r20, r24
 108:	6a e9       	ldi	r22, 0x9A	; 154
 10a:	79 ea       	ldi	r23, 0xA9	; 169
 10c:	8c e8       	ldi	r24, 0x8C	; 140
 10e:	94 e4       	ldi	r25, 0x44	; 68
 110:	0e 94 c3 04 	call	0x986	; 0x986 <__divsf3>
 114:	60 93 18 38 	sts	0x3818, r22	; 0x803818 <supply_v>
 118:	70 93 19 38 	sts	0x3819, r23	; 0x803819 <supply_v+0x1>
 11c:	80 93 1a 38 	sts	0x381A, r24	; 0x80381a <supply_v+0x2>
 120:	90 93 1b 38 	sts	0x381B, r25	; 0x80381b <supply_v+0x3>


	//PB1を入力モードに戻す
	VPORTB_DIR    &= 0b11111101; 
 124:	84 b1       	in	r24, 0x04	; 4
 126:	8d 7f       	andi	r24, 0xFD	; 253
 128:	84 b9       	out	0x04, r24	; 4

	//ADC入力ピンの選択
	// PB1ピンの電圧 / 電源電圧 を10bit(1024段階)で測定
	ADC0_MUXPOS = 0b00001010; //AIN10 = PB1
 12a:	8a e0       	ldi	r24, 0x0A	; 10
 12c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7f8606>

	ADC0_COMMAND = 1;//AD変換開始
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	88 83       	st	Y, r24
	while(ADC0_COMMAND);
 134:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
 138:	81 11       	cpse	r24, r1
 13a:	fc cf       	rjmp	.-8      	; 0x134 <__EEPROM_REGION_LENGTH__+0x34>
	ADC0_COMMAND = 0;//AD変換終了
 13c:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>

	x = ADC0_RES;
 140:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
 144:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>

	//PB1のプルアップを有効に戻す
	PORTB_PIN1CTRL = 0b00001001; //プルアップ有効 両方のエッジを検出する
 148:	89 e0       	ldi	r24, 0x09	; 9
 14a:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>

	//太陽電池電圧を算出
	solar_v = x * 1.1 / y;
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 64 05 	call	0xac8	; 0xac8 <__floatunsisf>
 156:	2d ec       	ldi	r18, 0xCD	; 205
 158:	3c ec       	ldi	r19, 0xCC	; 204
 15a:	4c e8       	ldi	r20, 0x8C	; 140
 15c:	5f e3       	ldi	r21, 0x3F	; 63
 15e:	0e 94 1b 06 	call	0xc36	; 0xc36 <__mulsf3>
 162:	a7 01       	movw	r20, r14
 164:	96 01       	movw	r18, r12
 166:	0e 94 c3 04 	call	0x986	; 0x986 <__divsf3>
 16a:	6b 01       	movw	r12, r22
 16c:	7c 01       	movw	r14, r24
 16e:	60 93 14 38 	sts	0x3814, r22	; 0x803814 <solar_v>
 172:	70 93 15 38 	sts	0x3815, r23	; 0x803815 <solar_v+0x1>
 176:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <solar_v+0x2>
 17a:	90 93 17 38 	sts	0x3817, r25	; 0x803817 <solar_v+0x3>

	//7セグの明るさ設定
	//太陽電池の電圧によって周囲の明るさを判定し7セグの明るさを変化させる
	if(solar_v > 1.2 || discharge) {
 17e:	2a e9       	ldi	r18, 0x9A	; 154
 180:	39 e9       	ldi	r19, 0x99	; 153
 182:	49 e9       	ldi	r20, 0x99	; 153
 184:	5f e3       	ldi	r21, 0x3F	; 63
 186:	0e 94 16 06 	call	0xc2c	; 0xc2c <__gesf2>
 18a:	18 16       	cp	r1, r24
 18c:	24 f0       	brlt	.+8      	; 0x196 <__EEPROM_REGION_LENGTH__+0x96>
 18e:	80 91 12 38 	lds	r24, 0x3812	; 0x803812 <discharge>
 192:	88 23       	and	r24, r24
 194:	21 f0       	breq	.+8      	; 0x19e <__EEPROM_REGION_LENGTH__+0x9e>
		brightness = 3;
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 19c:	11 c0       	rjmp	.+34     	; 0x1c0 <__EEPROM_REGION_LENGTH__+0xc0>
	}else if(solar_v > 0.5) {
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	5f e3       	ldi	r21, 0x3F	; 63
 1a6:	c7 01       	movw	r24, r14
 1a8:	b6 01       	movw	r22, r12
 1aa:	0e 94 16 06 	call	0xc2c	; 0xc2c <__gesf2>
 1ae:	18 16       	cp	r1, r24
 1b0:	24 f4       	brge	.+8      	; 0x1ba <__EEPROM_REGION_LENGTH__+0xba>
		brightness = 2;
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <__EEPROM_REGION_LENGTH__+0xc0>
	}else{
		brightness = 1;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
	}
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	df 90       	pop	r13
 1ca:	cf 90       	pop	r12
 1cc:	08 95       	ret

000001ce <sens_delay_ms>:

//ボタン操作を受け付けながら待機する関数
void sens_delay_ms (uint16_t num) {
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	8c 01       	movw	r16, r24

	for (unsigned int i = 0; i < num; i++){
 1d8:	c0 e0       	ldi	r28, 0x00	; 0
 1da:	d0 e0       	ldi	r29, 0x00	; 0
 1dc:	6d c0       	rjmp	.+218    	; 0x2b8 <sens_delay_ms+0xea>
		if(!(VPORTB_IN & PIN1_bm)) {
 1de:	31 99       	sbic	0x06, 1	; 6
 1e0:	64 c0       	rjmp	.+200    	; 0x2aa <sens_delay_ms+0xdc>

			//ここにタクトスイッチが押された時の動作を記述
			wakeup = 4000;
 1e2:	80 ea       	ldi	r24, 0xA0	; 160
 1e4:	9f e0       	ldi	r25, 0x0F	; 15
 1e6:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 1ea:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>
		
			switch (mode) {
 1ee:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <mode>
 1f2:	82 30       	cpi	r24, 0x02	; 2
 1f4:	01 f1       	breq	.+64     	; 0x236 <sens_delay_ms+0x68>
 1f6:	83 30       	cpi	r24, 0x03	; 3
 1f8:	b9 f1       	breq	.+110    	; 0x268 <sens_delay_ms+0x9a>
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	09 f0       	breq	.+2      	; 0x200 <sens_delay_ms+0x32>
 1fe:	55 c0       	rjmp	.+170    	; 0x2aa <sens_delay_ms+0xdc>
				case MODE_CLOCK:
					while(!(VPORTB_IN & PIN1_bm));
 200:	31 9b       	sbis	0x06, 1	; 6
 202:	fe cf       	rjmp	.-4      	; 0x200 <sens_delay_ms+0x32>
					if(change_mode_after) {
 204:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <change_mode_after>
 208:	88 23       	and	r24, r24
 20a:	19 f0       	breq	.+6      	; 0x212 <sens_delay_ms+0x44>
						change_mode_after = 0;
 20c:	10 92 1c 38 	sts	0x381C, r1	; 0x80381c <change_mode_after>
 210:	4c c0       	rjmp	.+152    	; 0x2aa <sens_delay_ms+0xdc>
					}else{
						//電圧の取得
						get_v();
 212:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
						display_v = 200;
 216:	88 ec       	ldi	r24, 0xC8	; 200
 218:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <display_v>
						wakeup = 800; //電圧表示だけなら長く表示する必要ないのでwakeup値上書き
 21c:	80 e2       	ldi	r24, 0x20	; 32
 21e:	93 e0       	ldi	r25, 0x03	; 3
 220:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 224:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 228:	87 ea       	ldi	r24, 0xA7	; 167
 22a:	91 e6       	ldi	r25, 0x61	; 97
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <sens_delay_ms+0x5e>
 230:	00 c0       	rjmp	.+0      	; 0x232 <sens_delay_ms+0x64>
 232:	00 00       	nop
 234:	3a c0       	rjmp	.+116    	; 0x2aa <sens_delay_ms+0xdc>
						_delay_ms(100);
					}
				break;

				case MODE_HOUR_SET:
					while(!(VPORTB_IN & PIN1_bm));
 236:	31 9b       	sbis	0x06, 1	; 6
 238:	fe cf       	rjmp	.-4      	; 0x236 <sens_delay_ms+0x68>
					if(change_mode_after) {
 23a:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <change_mode_after>
 23e:	88 23       	and	r24, r24
 240:	19 f0       	breq	.+6      	; 0x248 <sens_delay_ms+0x7a>
						change_mode_after = 0;
 242:	10 92 1c 38 	sts	0x381C, r1	; 0x80381c <change_mode_after>
 246:	31 c0       	rjmp	.+98     	; 0x2aa <sens_delay_ms+0xdc>
					}else{
						if(++hour >= 24) hour = 0;
 248:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <hour>
 24c:	8f 5f       	subi	r24, 0xFF	; 255
 24e:	80 93 21 38 	sts	0x3821, r24	; 0x803821 <hour>
 252:	88 31       	cpi	r24, 0x18	; 24
 254:	10 f0       	brcs	.+4      	; 0x25a <sens_delay_ms+0x8c>
 256:	10 92 21 38 	sts	0x3821, r1	; 0x803821 <hour>
 25a:	87 ea       	ldi	r24, 0xA7	; 167
 25c:	91 e6       	ldi	r25, 0x61	; 97
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <sens_delay_ms+0x90>
 262:	00 c0       	rjmp	.+0      	; 0x264 <sens_delay_ms+0x96>
 264:	00 00       	nop
 266:	21 c0       	rjmp	.+66     	; 0x2aa <sens_delay_ms+0xdc>
						_delay_ms(100);
					}
				break;

				case MODE_MIN_SET:
					while(!(VPORTB_IN & PIN1_bm));
 268:	31 9b       	sbis	0x06, 1	; 6
 26a:	fe cf       	rjmp	.-4      	; 0x268 <sens_delay_ms+0x9a>
					if(change_mode_after) {
 26c:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <change_mode_after>
 270:	88 23       	and	r24, r24
 272:	19 f0       	breq	.+6      	; 0x27a <sens_delay_ms+0xac>
						change_mode_after = 0;
 274:	10 92 1c 38 	sts	0x381C, r1	; 0x80381c <change_mode_after>
 278:	18 c0       	rjmp	.+48     	; 0x2aa <sens_delay_ms+0xdc>
					}else{
						if(++min >= 60) {
 27a:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <min>
 27e:	8f 5f       	subi	r24, 0xFF	; 255
 280:	80 93 22 38 	sts	0x3822, r24	; 0x803822 <min>
 284:	8c 33       	cpi	r24, 0x3C	; 60
 286:	88 f0       	brcs	.+34     	; 0x2aa <sens_delay_ms+0xdc>
							min = 0;
 288:	10 92 22 38 	sts	0x3822, r1	; 0x803822 <min>
							if(++hour >= 24) hour = 0;
 28c:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <hour>
 290:	8f 5f       	subi	r24, 0xFF	; 255
 292:	80 93 21 38 	sts	0x3821, r24	; 0x803821 <hour>
 296:	88 31       	cpi	r24, 0x18	; 24
 298:	10 f0       	brcs	.+4      	; 0x29e <sens_delay_ms+0xd0>
 29a:	10 92 21 38 	sts	0x3821, r1	; 0x803821 <hour>
 29e:	87 ea       	ldi	r24, 0xA7	; 167
 2a0:	91 e6       	ldi	r25, 0x61	; 97
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <sens_delay_ms+0xd4>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <sens_delay_ms+0xda>
 2a8:	00 00       	nop
 2aa:	89 ef       	ldi	r24, 0xF9	; 249
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <sens_delay_ms+0xe0>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <sens_delay_ms+0xe6>
 2b4:	00 00       	nop
}

//ボタン操作を受け付けながら待機する関数
void sens_delay_ms (uint16_t num) {

	for (unsigned int i = 0; i < num; i++){
 2b6:	21 96       	adiw	r28, 0x01	; 1
 2b8:	c0 17       	cp	r28, r16
 2ba:	d1 07       	cpc	r29, r17
 2bc:	08 f4       	brcc	.+2      	; 0x2c0 <sens_delay_ms+0xf2>
 2be:	8f cf       	rjmp	.-226    	; 0x1de <sens_delay_ms+0x10>
				break;
			}
		}
		_delay_ms(1);
	}
}
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	1f 91       	pop	r17
 2c6:	0f 91       	pop	r16
 2c8:	08 95       	ret

000002ca <seg_all_off>:

//7セグをすべて消灯する関数
void seg_all_off (void) {

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	VPORTA_OUT &= 0b00000001;
 2ca:	81 b1       	in	r24, 0x01	; 1
 2cc:	81 70       	andi	r24, 0x01	; 1
 2ce:	81 b9       	out	0x01, r24	; 1
	VPORTC_OUT &= 0b11111110;
 2d0:	89 b1       	in	r24, 0x09	; 9
 2d2:	8e 7f       	andi	r24, 0xFE	; 254
 2d4:	89 b9       	out	0x09, r24	; 9
	//ダイナミック点灯用トランジスタも全てOFF
	VPORTB_OUT &= 0b11001111;
 2d6:	85 b1       	in	r24, 0x05	; 5
 2d8:	8f 7c       	andi	r24, 0xCF	; 207
 2da:	85 b9       	out	0x05, r24	; 5
	VPORTC_OUT &= 0b11110001;
 2dc:	89 b1       	in	r24, 0x09	; 9
 2de:	81 7f       	andi	r24, 0xF1	; 241
 2e0:	89 b9       	out	0x09, r24	; 9
 2e2:	08 95       	ret

000002e4 <change_mode>:
}

//モードを切り替える関数
//引数に0を指定した場合は次の定数のモードへ 定数を指定した場合はそのモードへ
void change_mode (uint8_t cmode) {
	if(cmode) {
 2e4:	88 23       	and	r24, r24
 2e6:	19 f0       	breq	.+6      	; 0x2ee <change_mode+0xa>
		mode = cmode;
 2e8:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <mode>
 2ec:	08 95       	ret
	}else if(mode == MODE_MIN_SET) {
 2ee:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <mode>
 2f2:	83 30       	cpi	r24, 0x03	; 3
 2f4:	21 f4       	brne	.+8      	; 0x2fe <change_mode+0x1a>
		mode = MODE_CLOCK;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <mode>
 2fc:	08 95       	ret
	}else{
		mode++;
 2fe:	8f 5f       	subi	r24, 0xFF	; 255
 300:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <mode>
 304:	08 95       	ret

00000306 <__vector_10>:
	}
}

//TCA割り込み
ISR (TCA0_CMP0_vect) {
 306:	1f 92       	push	r1
 308:	0f 92       	push	r0
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	0f 92       	push	r0
 30e:	11 24       	eor	r1, r1
 310:	ef 92       	push	r14
 312:	ff 92       	push	r15
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	2f 93       	push	r18
 31a:	3f 93       	push	r19
 31c:	4f 93       	push	r20
 31e:	5f 93       	push	r21
 320:	6f 93       	push	r22
 322:	7f 93       	push	r23
 324:	8f 93       	push	r24
 326:	9f 93       	push	r25
 328:	af 93       	push	r26
 32a:	bf 93       	push	r27
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	ef 93       	push	r30
 332:	ff 93       	push	r31

	TCA0_SINGLE_CNT = 0;//カウントリセット
 334:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__RODATA_PM_OFFSET__+0x7f8a20>
 338:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__RODATA_PM_OFFSET__+0x7f8a21>
	TCA0_SINGLE_INTFLAGS = 0b00010000; //割り込み要求フラグを解除
 33c:	80 e1       	ldi	r24, 0x10	; 16
 33e:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>

	//wakeupが0ならセグをすべて消灯してそれ以外を実行しない
	//メインループのseg_all_off関数とsleep_mode関数の間にこの割り込みが入り中途半端に7セグが点灯した状態でスリープするのを防ぐ記述
	if(!wakeup) {
 342:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <wakeup>
 346:	90 91 20 38 	lds	r25, 0x3820	; 0x803820 <wakeup+0x1>
 34a:	89 2b       	or	r24, r25
 34c:	19 f4       	brne	.+6      	; 0x354 <__vector_10+0x4e>
		seg_all_off();
 34e:	0e 94 65 01 	call	0x2ca	; 0x2ca <seg_all_off>
		return;
 352:	9e c1       	rjmp	.+828    	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
	//現状このドットは使用していないのでコメントアウト 使うときは有効化してください
	//uint8_t dig1c, dig4c,;
	//dig1c = di45c = 0;

	//太陽電池の発電電圧とキャパシタの電圧を表示
	if(display_v && mode == MODE_CLOCK) {
 354:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <display_v>
 358:	88 23       	and	r24, r24
 35a:	09 f4       	brne	.+2      	; 0x35e <__vector_10+0x58>
 35c:	6f c0       	rjmp	.+222    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 35e:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <mode>
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	09 f0       	breq	.+2      	; 0x368 <__vector_10+0x62>
 366:	6a c0       	rjmp	.+212    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		uint8_t spv = supply_v * 10;
 368:	20 e0       	ldi	r18, 0x00	; 0
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	40 e2       	ldi	r20, 0x20	; 32
 36e:	51 e4       	ldi	r21, 0x41	; 65
 370:	60 91 18 38 	lds	r22, 0x3818	; 0x803818 <supply_v>
 374:	70 91 19 38 	lds	r23, 0x3819	; 0x803819 <supply_v+0x1>
 378:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <supply_v+0x2>
 37c:	90 91 1b 38 	lds	r25, 0x381B	; 0x80381b <supply_v+0x3>
 380:	0e 94 1b 06 	call	0xc36	; 0xc36 <__mulsf3>
 384:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fixunssfsi>
 388:	c6 2f       	mov	r28, r22
		uint8_t slv =  solar_v * 10;
 38a:	20 e0       	ldi	r18, 0x00	; 0
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	40 e2       	ldi	r20, 0x20	; 32
 390:	51 e4       	ldi	r21, 0x41	; 65
 392:	60 91 14 38 	lds	r22, 0x3814	; 0x803814 <solar_v>
 396:	70 91 15 38 	lds	r23, 0x3815	; 0x803815 <solar_v+0x1>
 39a:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <solar_v+0x2>
 39e:	90 91 17 38 	lds	r25, 0x3817	; 0x803817 <solar_v+0x3>
 3a2:	0e 94 1b 06 	call	0xc36	; 0xc36 <__mulsf3>
 3a6:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fixunssfsi>
		dig1  = seg[spv % 10];
 3aa:	8d ec       	ldi	r24, 0xCD	; 205
 3ac:	c8 9f       	mul	r28, r24
 3ae:	e1 2d       	mov	r30, r1
 3b0:	11 24       	eor	r1, r1
 3b2:	e6 95       	lsr	r30
 3b4:	e6 95       	lsr	r30
 3b6:	e6 95       	lsr	r30
 3b8:	2e 2f       	mov	r18, r30
 3ba:	22 0f       	add	r18, r18
 3bc:	92 2f       	mov	r25, r18
 3be:	99 0f       	add	r25, r25
 3c0:	99 0f       	add	r25, r25
 3c2:	92 0f       	add	r25, r18
 3c4:	c9 1b       	sub	r28, r25
 3c6:	ac 2f       	mov	r26, r28
 3c8:	b0 e0       	ldi	r27, 0x00	; 0
 3ca:	ad 5f       	subi	r26, 0xFD	; 253
 3cc:	b7 4c       	sbci	r27, 0xC7	; 199
 3ce:	cc 91       	ld	r28, X
		dig2  = seg[(spv / 10) % 10];
 3d0:	e8 9f       	mul	r30, r24
 3d2:	91 2d       	mov	r25, r1
 3d4:	11 24       	eor	r1, r1
 3d6:	96 95       	lsr	r25
 3d8:	96 95       	lsr	r25
 3da:	96 95       	lsr	r25
 3dc:	99 0f       	add	r25, r25
 3de:	29 2f       	mov	r18, r25
 3e0:	22 0f       	add	r18, r18
 3e2:	22 0f       	add	r18, r18
 3e4:	92 0f       	add	r25, r18
 3e6:	e9 1b       	sub	r30, r25
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	ed 5f       	subi	r30, 0xFD	; 253
 3ec:	f7 4c       	sbci	r31, 0xC7	; 199
 3ee:	d0 81       	ld	r29, Z
		dig3  = 0b00000000;
		dig4  = seg[slv % 10];
 3f0:	68 9f       	mul	r22, r24
 3f2:	e1 2d       	mov	r30, r1
 3f4:	11 24       	eor	r1, r1
 3f6:	e6 95       	lsr	r30
 3f8:	e6 95       	lsr	r30
 3fa:	e6 95       	lsr	r30
 3fc:	2e 2f       	mov	r18, r30
 3fe:	22 0f       	add	r18, r18
 400:	92 2f       	mov	r25, r18
 402:	99 0f       	add	r25, r25
 404:	99 0f       	add	r25, r25
 406:	92 0f       	add	r25, r18
 408:	69 1b       	sub	r22, r25
 40a:	a6 2f       	mov	r26, r22
 40c:	b0 e0       	ldi	r27, 0x00	; 0
 40e:	ad 5f       	subi	r26, 0xFD	; 253
 410:	b7 4c       	sbci	r27, 0xC7	; 199
 412:	0c 91       	ld	r16, X
		dig5  = seg[(slv / 10) % 10];
 414:	e8 9f       	mul	r30, r24
 416:	81 2d       	mov	r24, r1
 418:	11 24       	eor	r1, r1
 41a:	86 95       	lsr	r24
 41c:	86 95       	lsr	r24
 41e:	86 95       	lsr	r24
 420:	88 0f       	add	r24, r24
 422:	98 2f       	mov	r25, r24
 424:	99 0f       	add	r25, r25
 426:	99 0f       	add	r25, r25
 428:	89 0f       	add	r24, r25
 42a:	e8 1b       	sub	r30, r24
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	ed 5f       	subi	r30, 0xFD	; 253
 430:	f7 4c       	sbci	r31, 0xC7	; 199
 432:	f0 80       	ld	r15, Z
		dig2c = dig5c = 0b00000001;//ドット(小数点)
 434:	ee 24       	eor	r14, r14
 436:	e3 94       	inc	r14
	if(display_v && mode == MODE_CLOCK) {
		uint8_t spv = supply_v * 10;
		uint8_t slv =  solar_v * 10;
		dig1  = seg[spv % 10];
		dig2  = seg[(spv / 10) % 10];
		dig3  = 0b00000000;
 438:	10 e0       	ldi	r17, 0x00	; 0
	//現状このドットは使用していないのでコメントアウト 使うときは有効化してください
	//uint8_t dig1c, dig4c,;
	//dig1c = di45c = 0;

	//太陽電池の発電電圧とキャパシタの電圧を表示
	if(display_v && mode == MODE_CLOCK) {
 43a:	5d c0       	rjmp	.+186    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		dig4  = seg[slv % 10];
		dig5  = seg[(slv / 10) % 10];
		dig2c = dig5c = 0b00000001;//ドット(小数点)

	}else{//時刻を表示
		dig1  = seg[min % 10];
 43c:	a0 91 22 38 	lds	r26, 0x3822	; 0x803822 <min>
 440:	8d ec       	ldi	r24, 0xCD	; 205
 442:	a8 9f       	mul	r26, r24
 444:	e1 2d       	mov	r30, r1
 446:	11 24       	eor	r1, r1
 448:	e6 95       	lsr	r30
 44a:	e6 95       	lsr	r30
 44c:	e6 95       	lsr	r30
 44e:	2e 2f       	mov	r18, r30
 450:	22 0f       	add	r18, r18
 452:	92 2f       	mov	r25, r18
 454:	99 0f       	add	r25, r25
 456:	99 0f       	add	r25, r25
 458:	92 0f       	add	r25, r18
 45a:	a9 1b       	sub	r26, r25
 45c:	b0 e0       	ldi	r27, 0x00	; 0
 45e:	ad 5f       	subi	r26, 0xFD	; 253
 460:	b7 4c       	sbci	r27, 0xC7	; 199
 462:	cc 91       	ld	r28, X
		dig2  = seg[(min / 10) % 10];
 464:	e8 9f       	mul	r30, r24
 466:	81 2d       	mov	r24, r1
 468:	11 24       	eor	r1, r1
 46a:	86 95       	lsr	r24
 46c:	86 95       	lsr	r24
 46e:	86 95       	lsr	r24
 470:	88 0f       	add	r24, r24
 472:	98 2f       	mov	r25, r24
 474:	99 0f       	add	r25, r25
 476:	99 0f       	add	r25, r25
 478:	89 0f       	add	r24, r25
 47a:	e8 1b       	sub	r30, r24
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	ed 5f       	subi	r30, 0xFD	; 253
 480:	f7 4c       	sbci	r31, 0xC7	; 199
 482:	d0 81       	ld	r29, Z
		if(!(RTC_CNT % 2) || mode != MODE_CLOCK) { //コロンの点滅
 484:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 488:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
 48c:	80 ff       	sbrs	r24, 0
 48e:	06 c0       	rjmp	.+12     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 490:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <mode>
 494:	81 30       	cpi	r24, 0x01	; 1
 496:	21 f0       	breq	.+8      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
			dig3  = 0b00000110;
 498:	16 e0       	ldi	r17, 0x06	; 6
 49a:	03 c0       	rjmp	.+6      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 49c:	16 e0       	ldi	r17, 0x06	; 6
 49e:	01 c0       	rjmp	.+2      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		}else{
			dig3  = 0b00000000;
 4a0:	10 e0       	ldi	r17, 0x00	; 0
		}
		dig4  = seg[hour % 10];
 4a2:	a0 91 21 38 	lds	r26, 0x3821	; 0x803821 <hour>
 4a6:	ed ec       	ldi	r30, 0xCD	; 205
 4a8:	ae 9f       	mul	r26, r30
 4aa:	81 2d       	mov	r24, r1
 4ac:	11 24       	eor	r1, r1
 4ae:	86 95       	lsr	r24
 4b0:	86 95       	lsr	r24
 4b2:	86 95       	lsr	r24
 4b4:	28 2f       	mov	r18, r24
 4b6:	22 0f       	add	r18, r18
 4b8:	92 2f       	mov	r25, r18
 4ba:	99 0f       	add	r25, r25
 4bc:	99 0f       	add	r25, r25
 4be:	92 0f       	add	r25, r18
 4c0:	a9 1b       	sub	r26, r25
 4c2:	b0 e0       	ldi	r27, 0x00	; 0
 4c4:	ad 5f       	subi	r26, 0xFD	; 253
 4c6:	b7 4c       	sbci	r27, 0xC7	; 199
 4c8:	0c 91       	ld	r16, X

		//dig5のみ0なら不点灯にする(ゼロサプレス)
		uint8_t zerocheck = (hour / 10) % 10;
 4ca:	8e 9f       	mul	r24, r30
 4cc:	e1 2d       	mov	r30, r1
 4ce:	11 24       	eor	r1, r1
 4d0:	e6 95       	lsr	r30
 4d2:	e6 95       	lsr	r30
 4d4:	e6 95       	lsr	r30
 4d6:	ee 0f       	add	r30, r30
 4d8:	9e 2f       	mov	r25, r30
 4da:	99 0f       	add	r25, r25
 4dc:	99 0f       	add	r25, r25
 4de:	e9 0f       	add	r30, r25
 4e0:	8e 1b       	sub	r24, r30
		if(zerocheck == 0) {
 4e2:	39 f0       	breq	.+14     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
			dig5 = 0b00000000;
		}else{
			dig5   = seg[zerocheck];
 4e4:	e8 2f       	mov	r30, r24
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	ed 5f       	subi	r30, 0xFD	; 253
 4ea:	f7 4c       	sbci	r31, 0xC7	; 199
 4ec:	f0 80       	ld	r15, Z
	}

	static uint8_t sel = 0;
	uint8_t dig1, dig2, dig3, dig4, dig5 = 0;
	uint8_t dig2c, dig5c;
	dig2c = dig5c = 0;
 4ee:	e1 2c       	mov	r14, r1
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4f2:	e1 2c       	mov	r14, r1
		dig4  = seg[hour % 10];

		//dig5のみ0なら不点灯にする(ゼロサプレス)
		uint8_t zerocheck = (hour / 10) % 10;
		if(zerocheck == 0) {
			dig5 = 0b00000000;
 4f4:	f1 2c       	mov	r15, r1
	}

	//時刻設定時の点滅演出
	//点滅カウンター
	static uint16_t wink = 0;
	if(mode == MODE_HOUR_SET) {
 4f6:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <mode>
 4fa:	82 30       	cpi	r24, 0x02	; 2
 4fc:	a9 f4       	brne	.+42     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		if(++wink < 512) dig4 = dig5 = 0b00000000;
 4fe:	80 91 10 38 	lds	r24, 0x3810	; 0x803810 <wink.3358>
 502:	90 91 11 38 	lds	r25, 0x3811	; 0x803811 <wink.3358+0x1>
 506:	01 96       	adiw	r24, 0x01	; 1
 508:	80 93 10 38 	sts	0x3810, r24	; 0x803810 <wink.3358>
 50c:	90 93 11 38 	sts	0x3811, r25	; 0x803811 <wink.3358+0x1>
 510:	81 15       	cp	r24, r1
 512:	22 e0       	ldi	r18, 0x02	; 2
 514:	92 07       	cpc	r25, r18
 516:	20 f1       	brcs	.+72     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
		else if (wink > 1023) wink = 0;
 518:	81 15       	cp	r24, r1
 51a:	94 40       	sbci	r25, 0x04	; 4
 51c:	30 f1       	brcs	.+76     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 51e:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <wink.3358>
 522:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <wink.3358+0x1>
 526:	21 c0       	rjmp	.+66     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
	}else if(mode == MODE_MIN_SET) {
 528:	83 30       	cpi	r24, 0x03	; 3
 52a:	a9 f4       	brne	.+42     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
		if(++wink < 512) dig1 = dig2 = 0b00000000;
 52c:	80 91 10 38 	lds	r24, 0x3810	; 0x803810 <wink.3358>
 530:	90 91 11 38 	lds	r25, 0x3811	; 0x803811 <wink.3358+0x1>
 534:	01 96       	adiw	r24, 0x01	; 1
 536:	80 93 10 38 	sts	0x3810, r24	; 0x803810 <wink.3358>
 53a:	90 93 11 38 	sts	0x3811, r25	; 0x803811 <wink.3358+0x1>
 53e:	81 15       	cp	r24, r1
 540:	22 e0       	ldi	r18, 0x02	; 2
 542:	92 07       	cpc	r25, r18
 544:	80 f0       	brcs	.+32     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
		else if (wink > 1023) wink = 0;
 546:	81 15       	cp	r24, r1
 548:	94 40       	sbci	r25, 0x04	; 4
 54a:	78 f0       	brcs	.+30     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 54c:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <wink.3358>
 550:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <wink.3358+0x1>
 554:	0a c0       	rjmp	.+20     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
	}else{
		wink = 0;
 556:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <wink.3358>
 55a:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <wink.3358+0x1>
 55e:	05 c0       	rjmp	.+10     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>

	//時刻設定時の点滅演出
	//点滅カウンター
	static uint16_t wink = 0;
	if(mode == MODE_HOUR_SET) {
		if(++wink < 512) dig4 = dig5 = 0b00000000;
 560:	f1 2c       	mov	r15, r1
 562:	00 e0       	ldi	r16, 0x00	; 0
 564:	02 c0       	rjmp	.+4      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
		else if (wink > 1023) wink = 0;
	}else if(mode == MODE_MIN_SET) {
		if(++wink < 512) dig1 = dig2 = 0b00000000;
 566:	d0 e0       	ldi	r29, 0x00	; 0
 568:	c0 e0       	ldi	r28, 0x00	; 0
		wink = 0;
	}


	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();
 56a:	0e 94 65 01 	call	0x2ca	; 0x2ca <seg_all_off>

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
	static uint8_t bn_pwm_count = 0; //7セグを間欠で点灯させるために0～7までを繰り返し数えるカウンター

	if(++bn_pwm_count > 7) bn_pwm_count = 0;
 56e:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <bn_pwm_count.3360>
 572:	8f 5f       	subi	r24, 0xFF	; 255
 574:	80 93 0f 38 	sts	0x380F, r24	; 0x80380f <bn_pwm_count.3360>
 578:	88 30       	cpi	r24, 0x08	; 8
 57a:	10 f0       	brcs	.+4      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 57c:	10 92 0f 38 	sts	0x380F, r1	; 0x80380f <bn_pwm_count.3360>

	if(brightness == 1) {
 580:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 584:	81 30       	cpi	r24, 0x01	; 1
 586:	31 f4       	brne	.+12     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
		if(!(bn_pwm_count % 4)) { //bn_pwm_countが0、4のタイミングで点灯
 588:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <bn_pwm_count.3360>
 58c:	83 70       	andi	r24, 0x03	; 3
 58e:	71 f0       	breq	.+28     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	11 c0       	rjmp	.+34     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>

	if(brightness == 1) {
		if(!(bn_pwm_count % 4)) { //bn_pwm_countが0、4のタイミングで点灯
			seg_on = 1;
		}
	}else if(brightness == 2) {
 594:	82 30       	cpi	r24, 0x02	; 2
 596:	31 f4       	brne	.+12     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
		if(bn_pwm_count % 2) { //bn_pwm_countが1、3、5、7のタイミングで点灯
 598:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <bn_pwm_count.3360>
 59c:	80 fd       	sbrc	r24, 0
 59e:	08 c0       	rjmp	.+16     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	09 c0       	rjmp	.+18     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
		}
	}else if(brightness == 2) {
		if(bn_pwm_count % 2) { //bn_pwm_countが1、3、5、7のタイミングで点灯
			seg_on = 1;
		}
	}else if(brightness == 3) { //bn_pwm_countがいくつでも全てのタイミングで点灯
 5a4:	83 30       	cpi	r24, 0x03	; 3
 5a6:	31 f0       	breq	.+12     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	05 c0       	rjmp	.+10     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>

	if(++bn_pwm_count > 7) bn_pwm_count = 0;

	if(brightness == 1) {
		if(!(bn_pwm_count % 4)) { //bn_pwm_countが0、4のタイミングで点灯
			seg_on = 1;
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	03 c0       	rjmp	.+6      	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
		}
	}else if(brightness == 2) {
		if(bn_pwm_count % 2) { //bn_pwm_countが1、3、5、7のタイミングで点灯
			seg_on = 1;
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	01 c0       	rjmp	.+2      	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
		}
	}else if(brightness == 3) { //bn_pwm_countがいくつでも全てのタイミングで点灯
		seg_on = 1;
 5b4:	81 e0       	ldi	r24, 0x01	; 1
	}

	//点灯実行
	if(seg_on) {
 5b6:	88 23       	and	r24, r24
 5b8:	79 f1       	breq	.+94     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
		switch ( sel ) {
 5ba:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <__data_end>
 5be:	82 30       	cpi	r24, 0x02	; 2
 5c0:	c9 f0       	breq	.+50     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5c2:	28 f4       	brcc	.+10     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5c4:	88 23       	and	r24, r24
 5c6:	41 f0       	breq	.+16     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5c8:	81 30       	cpi	r24, 0x01	; 1
 5ca:	59 f0       	breq	.+22     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 5cc:	25 c0       	rjmp	.+74     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
 5ce:	83 30       	cpi	r24, 0x03	; 3
 5d0:	b1 f0       	breq	.+44     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 5d2:	84 30       	cpi	r24, 0x04	; 4
 5d4:	c9 f0       	breq	.+50     	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
 5d6:	20 c0       	rjmp	.+64     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>

			case 0:
			VPORTB_OUT |= 0b00010000;
 5d8:	85 b1       	in	r24, 0x05	; 5
 5da:	80 61       	ori	r24, 0x10	; 16
 5dc:	85 b9       	out	0x05, r24	; 5
			VPORTA_OUT = dig1;
 5de:	c1 b9       	out	0x01, r28	; 1
			//現状このドットは使用していないのでコメントアウト 使うときは有効化してください
			//VPORTC_OUT = (dig1c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
			break;
 5e0:	1b c0       	rjmp	.+54     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>

			case 1:
			VPORTC_OUT |= 0b00001000;
 5e2:	89 b1       	in	r24, 0x09	; 9
 5e4:	88 60       	ori	r24, 0x08	; 8
 5e6:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig2;
 5e8:	d1 b9       	out	0x01, r29	; 1
			VPORTC_OUT = (dig2c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 5ea:	89 b1       	in	r24, 0x09	; 9
 5ec:	8e 7f       	andi	r24, 0xFE	; 254
 5ee:	e8 2a       	or	r14, r24
 5f0:	e9 b8       	out	0x09, r14	; 9
			break;
 5f2:	12 c0       	rjmp	.+36     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>

			case 2:
			VPORTB_OUT |= 0b00100000;
 5f4:	85 b1       	in	r24, 0x05	; 5
 5f6:	80 62       	ori	r24, 0x20	; 32
 5f8:	85 b9       	out	0x05, r24	; 5
			VPORTA_OUT = dig3;
 5fa:	11 b9       	out	0x01, r17	; 1
			break;
 5fc:	0d c0       	rjmp	.+26     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>

			case 3:
			VPORTC_OUT |= 0b00000100;
 5fe:	89 b1       	in	r24, 0x09	; 9
 600:	84 60       	ori	r24, 0x04	; 4
 602:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig4;
 604:	01 b9       	out	0x01, r16	; 1
			//現状このドットは使用していないのでコメントアウト 使うときは有効化してください
			//VPORTC_OUT = (dig4c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
			break;
 606:	08 c0       	rjmp	.+16     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>

			case 4:
			VPORTC_OUT |= 0b00000010;
 608:	89 b1       	in	r24, 0x09	; 9
 60a:	82 60       	ori	r24, 0x02	; 2
 60c:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig5;
 60e:	f1 b8       	out	0x01, r15	; 1
			VPORTC_OUT = (dig5c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 610:	89 b1       	in	r24, 0x09	; 9
 612:	8e 7f       	andi	r24, 0xFE	; 254
 614:	e8 2a       	or	r14, r24
 616:	e9 b8       	out	0x09, r14	; 9
		}
	}


	//5回に1回やること
	if ( ++sel == 5 ) {
 618:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <__data_end>
 61c:	8f 5f       	subi	r24, 0xFF	; 255
 61e:	80 93 0e 38 	sts	0x380E, r24	; 0x80380e <__data_end>
 622:	85 30       	cpi	r24, 0x05	; 5
 624:	a9 f5       	brne	.+106    	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
		//selの0~5トグル動作
		sel = 0;
 626:	10 92 0e 38 	sts	0x380E, r1	; 0x80380e <__data_end>

		//スリープへ向けwakeupを減らす
		if(wakeup) wakeup--;
 62a:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <wakeup>
 62e:	90 91 20 38 	lds	r25, 0x3820	; 0x803820 <wakeup+0x1>
 632:	00 97       	sbiw	r24, 0x00	; 0
 634:	29 f0       	breq	.+10     	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 636:	01 97       	sbiw	r24, 0x01	; 1
 638:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 63c:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>

		//電圧表示時間を減らす
		if(display_v) display_v--;
 640:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <display_v>
 644:	88 23       	and	r24, r24
 646:	19 f0       	breq	.+6      	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
 648:	81 50       	subi	r24, 0x01	; 1
 64a:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <display_v>

		//タクトスイッチが長押しされている場合、長押しカウントを加算
		if(VPORTB_IN & PIN1_bm) {
 64e:	31 9b       	sbis	0x06, 1	; 6
 650:	05 c0       	rjmp	.+10     	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
			long_push = 0;
 652:	10 92 1d 38 	sts	0x381D, r1	; 0x80381d <long_push>
 656:	10 92 1e 38 	sts	0x381E, r1	; 0x80381e <long_push+0x1>
 65a:	1a c0       	rjmp	.+52     	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
		}else{
			if(++long_push > 1200) {
 65c:	80 91 1d 38 	lds	r24, 0x381D	; 0x80381d <long_push>
 660:	90 91 1e 38 	lds	r25, 0x381E	; 0x80381e <long_push+0x1>
 664:	01 96       	adiw	r24, 0x01	; 1
 666:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <long_push>
 66a:	90 93 1e 38 	sts	0x381E, r25	; 0x80381e <long_push+0x1>
 66e:	81 3b       	cpi	r24, 0xB1	; 177
 670:	94 40       	sbci	r25, 0x04	; 4
 672:	70 f0       	brcs	.+28     	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
				long_push = 0;
 674:	10 92 1d 38 	sts	0x381D, r1	; 0x80381d <long_push>
 678:	10 92 1e 38 	sts	0x381E, r1	; 0x80381e <long_push+0x1>
				RTC_CNT = 0; //時刻設定をした後、秒数が0から始まるようにする
 67c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 680:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
				change_mode(0);
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	0e 94 72 01 	call	0x2e4	; 0x2e4 <change_mode>
				change_mode_after = 1;
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <change_mode_after>
			}
		}
	}

}
 690:	ff 91       	pop	r31
 692:	ef 91       	pop	r30
 694:	df 91       	pop	r29
 696:	cf 91       	pop	r28
 698:	bf 91       	pop	r27
 69a:	af 91       	pop	r26
 69c:	9f 91       	pop	r25
 69e:	8f 91       	pop	r24
 6a0:	7f 91       	pop	r23
 6a2:	6f 91       	pop	r22
 6a4:	5f 91       	pop	r21
 6a6:	4f 91       	pop	r20
 6a8:	3f 91       	pop	r19
 6aa:	2f 91       	pop	r18
 6ac:	1f 91       	pop	r17
 6ae:	0f 91       	pop	r16
 6b0:	ff 90       	pop	r15
 6b2:	ef 90       	pop	r14
 6b4:	0f 90       	pop	r0
 6b6:	0f be       	out	0x3f, r0	; 63
 6b8:	0f 90       	pop	r0
 6ba:	1f 90       	pop	r1
 6bc:	18 95       	reti

000006be <__vector_4>:

//外部割り込み PB0が変化したら 両方のエッジを検出する(片方エッジにしたいがそうするとなぜかスタンバイから復帰しない)
ISR(PORTB_PORT_vect) {
 6be:	1f 92       	push	r1
 6c0:	0f 92       	push	r0
 6c2:	0f b6       	in	r0, 0x3f	; 63
 6c4:	0f 92       	push	r0
 6c6:	11 24       	eor	r1, r1
 6c8:	2f 93       	push	r18
 6ca:	3f 93       	push	r19
 6cc:	4f 93       	push	r20
 6ce:	5f 93       	push	r21
 6d0:	6f 93       	push	r22
 6d2:	7f 93       	push	r23
 6d4:	8f 93       	push	r24
 6d6:	9f 93       	push	r25
 6d8:	af 93       	push	r26
 6da:	bf 93       	push	r27
 6dc:	ef 93       	push	r30
 6de:	ff 93       	push	r31
	
	PORTB_INTFLAGS = PORTB_INTFLAGS | 0b00000010; //割り込み要求フラグ解除
 6e0:	e9 e2       	ldi	r30, 0x29	; 41
 6e2:	f4 e0       	ldi	r31, 0x04	; 4
 6e4:	80 81       	ld	r24, Z
 6e6:	82 60       	ori	r24, 0x02	; 2
 6e8:	80 83       	st	Z, r24

	//赤外線センサー PB0がLowに切り替わったら何もせず返す 両方のエッジを検出するようにしているので立ち下がりエッジ割り込みはここで無効にする
	if(!(VPORTB_IN & PIN0_bm)) {
 6ea:	30 9b       	sbis	0x06, 0	; 6
 6ec:	17 c0       	rjmp	.+46     	; 0x71c <__vector_4+0x5e>
		return;
	}

	//赤外線センサー PB0がHighだったら一定時間起き上がらせる
	if(VPORTB_IN & PIN0_bm) {
 6ee:	30 9b       	sbis	0x06, 0	; 6
 6f0:	15 c0       	rjmp	.+42     	; 0x71c <__vector_4+0x5e>

		//まず電圧測定する
		if(yet_v) {
 6f2:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <yet_v>
 6f6:	88 23       	and	r24, r24
 6f8:	21 f0       	breq	.+8      	; 0x702 <__vector_4+0x44>
			yet_v = 0; //電圧測定をしたことをyet_vに記録
 6fa:	10 92 01 38 	sts	0x3801, r1	; 0x803801 <yet_v>
			get_v();
 6fe:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
		}

		//一定時間起き上がらせる
		if(wakeup < 800) wakeup = 800;
 702:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <wakeup>
 706:	90 91 20 38 	lds	r25, 0x3820	; 0x803820 <wakeup+0x1>
 70a:	80 32       	cpi	r24, 0x20	; 32
 70c:	93 40       	sbci	r25, 0x03	; 3
 70e:	30 f4       	brcc	.+12     	; 0x71c <__vector_4+0x5e>
 710:	80 e2       	ldi	r24, 0x20	; 32
 712:	93 e0       	ldi	r25, 0x03	; 3
 714:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 718:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>
		return;
	}

	return;
}
 71c:	ff 91       	pop	r31
 71e:	ef 91       	pop	r30
 720:	bf 91       	pop	r27
 722:	af 91       	pop	r26
 724:	9f 91       	pop	r25
 726:	8f 91       	pop	r24
 728:	7f 91       	pop	r23
 72a:	6f 91       	pop	r22
 72c:	5f 91       	pop	r21
 72e:	4f 91       	pop	r20
 730:	3f 91       	pop	r19
 732:	2f 91       	pop	r18
 734:	0f 90       	pop	r0
 736:	0f be       	out	0x3f, r0	; 63
 738:	0f 90       	pop	r0
 73a:	1f 90       	pop	r1
 73c:	18 95       	reti

0000073e <__vector_6>:

//リアルタイムクロック 比較一致割り込み
ISR(RTC_CNT_vect) {
 73e:	1f 92       	push	r1
 740:	0f 92       	push	r0
 742:	0f b6       	in	r0, 0x3f	; 63
 744:	0f 92       	push	r0
 746:	11 24       	eor	r1, r1
 748:	2f 93       	push	r18
 74a:	3f 93       	push	r19
 74c:	4f 93       	push	r20
 74e:	5f 93       	push	r21
 750:	6f 93       	push	r22
 752:	7f 93       	push	r23
 754:	8f 93       	push	r24
 756:	9f 93       	push	r25
 758:	af 93       	push	r26
 75a:	bf 93       	push	r27
 75c:	ef 93       	push	r30
 75e:	ff 93       	push	r31
	RTC_CNT = 0;
 760:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 764:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
	RTC_INTFLAGS = RTC_INTFLAGS | 0b00000010;
 768:	e3 e4       	ldi	r30, 0x43	; 67
 76a:	f1 e0       	ldi	r31, 0x01	; 1
 76c:	80 81       	ld	r24, Z
 76e:	82 60       	ori	r24, 0x02	; 2
 770:	80 83       	st	Z, r24

	//時計を進める
	if (mode == MODE_CLOCK && ++min >= 60) {
 772:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <mode>
 776:	81 30       	cpi	r24, 0x01	; 1
 778:	91 f4       	brne	.+36     	; 0x79e <__vector_6+0x60>
 77a:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <min>
 77e:	8f 5f       	subi	r24, 0xFF	; 255
 780:	80 93 22 38 	sts	0x3822, r24	; 0x803822 <min>
 784:	8c 33       	cpi	r24, 0x3C	; 60
 786:	58 f0       	brcs	.+22     	; 0x79e <__vector_6+0x60>
		min = 0;
 788:	10 92 22 38 	sts	0x3822, r1	; 0x803822 <min>
		if(++hour >= 24) hour = 0;
 78c:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <hour>
 790:	8f 5f       	subi	r24, 0xFF	; 255
 792:	80 93 21 38 	sts	0x3821, r24	; 0x803821 <hour>
 796:	88 31       	cpi	r24, 0x18	; 24
 798:	10 f0       	brcs	.+4      	; 0x79e <__vector_6+0x60>
 79a:	10 92 21 38 	sts	0x3821, r1	; 0x803821 <hour>
	}
	
	//1時間に1回やる処理
	if(!min) {
 79e:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <min>
 7a2:	81 11       	cpse	r24, r1
 7a4:	44 c0       	rjmp	.+136    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>

		if(!wakeup){
 7a6:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <wakeup>
 7aa:	90 91 20 38 	lds	r25, 0x3820	; 0x803820 <wakeup+0x1>
 7ae:	89 2b       	or	r24, r25
 7b0:	09 f0       	breq	.+2      	; 0x7b4 <__vector_6+0x76>
 7b2:	3d c0       	rjmp	.+122    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
			get_v();
 7b4:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
			//低電圧再起動処理 起きてる時にやると一瞬7セグがちらつくので起きてない時(厳密には起きてるカウントがされていない時)にやる
			if(supply_v <= MIN_SUPPLY_V) {
 7b8:	60 91 18 38 	lds	r22, 0x3818	; 0x803818 <supply_v>
 7bc:	70 91 19 38 	lds	r23, 0x3819	; 0x803819 <supply_v+0x1>
 7c0:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <supply_v+0x2>
 7c4:	90 91 1b 38 	lds	r25, 0x381B	; 0x80381b <supply_v+0x3>
 7c8:	2a e9       	ldi	r18, 0x9A	; 154
 7ca:	39 e9       	ldi	r19, 0x99	; 153
 7cc:	49 ed       	ldi	r20, 0xD9	; 217
 7ce:	5f e3       	ldi	r21, 0x3F	; 63
 7d0:	0e 94 be 04 	call	0x97c	; 0x97c <__cmpsf2>
 7d4:	18 16       	cp	r1, r24
 7d6:	94 f0       	brlt	.+36     	; 0x7fc <__vector_6+0xbe>
				//停止処理
				//ウォッチドッグタイマを0.008秒で起動
				wdt_enable(0b00000001);//0.008秒の場合、右4桁をデータシート上の8CLKのレジスタ設定値にする
 7d8:	88 ed       	ldi	r24, 0xD8	; 216
 7da:	a8 95       	wdr
 7dc:	84 bf       	out	0x34, r24	; 52
 7de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
 7e2:	81 60       	ori	r24, 0x01	; 1
 7e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
 7e8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__RODATA_PM_OFFSET__+0x7f8101>
 7ec:	81 fd       	sbrc	r24, 1
 7ee:	fc cf       	rjmp	.-8      	; 0x7e8 <__vector_6+0xaa>
 7f0:	87 ea       	ldi	r24, 0xA7	; 167
 7f2:	91 e6       	ldi	r25, 0x61	; 97
 7f4:	01 97       	sbiw	r24, 0x01	; 1
 7f6:	f1 f7       	brne	.-4      	; 0x7f4 <__vector_6+0xb6>
 7f8:	00 c0       	rjmp	.+0      	; 0x7fa <__vector_6+0xbc>
 7fa:	00 00       	nop
				//待機(しているあいだにウォッチドッグリセットがかかる)
				_delay_ms(100);
			}
			//高電圧放電処理
			if(supply_v >= MAX_SUPPLY_V) {
 7fc:	60 91 18 38 	lds	r22, 0x3818	; 0x803818 <supply_v>
 800:	70 91 19 38 	lds	r23, 0x3819	; 0x803819 <supply_v+0x1>
 804:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <supply_v+0x2>
 808:	90 91 1b 38 	lds	r25, 0x381B	; 0x80381b <supply_v+0x3>
 80c:	26 e6       	ldi	r18, 0x66	; 102
 80e:	36 e6       	ldi	r19, 0x66	; 102
 810:	46 ea       	ldi	r20, 0xA6	; 166
 812:	50 e4       	ldi	r21, 0x40	; 64
 814:	0e 94 16 06 	call	0xc2c	; 0xc2c <__gesf2>
 818:	88 23       	and	r24, r24
 81a:	4c f0       	brlt	.+18     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
				wakeup = 5200;
 81c:	80 e5       	ldi	r24, 0x50	; 80
 81e:	94 e1       	ldi	r25, 0x14	; 20
 820:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 824:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>
				discharge = 1;
 828:	81 e0       	ldi	r24, 0x01	; 1
 82a:	80 93 12 38 	sts	0x3812, r24	; 0x803812 <discharge>
		}

	}

	return;
}
 82e:	ff 91       	pop	r31
 830:	ef 91       	pop	r30
 832:	bf 91       	pop	r27
 834:	af 91       	pop	r26
 836:	9f 91       	pop	r25
 838:	8f 91       	pop	r24
 83a:	7f 91       	pop	r23
 83c:	6f 91       	pop	r22
 83e:	5f 91       	pop	r21
 840:	4f 91       	pop	r20
 842:	3f 91       	pop	r19
 844:	2f 91       	pop	r18
 846:	0f 90       	pop	r0
 848:	0f be       	out	0x3f, r0	; 63
 84a:	0f 90       	pop	r0
 84c:	1f 90       	pop	r1
 84e:	18 95       	reti

00000850 <main>:
int main(void) {

	//■□■――――――――――――――――――――――――――――――――――――■□■
	//		□ レジスタの設定
	//■□■――――――――――――――――――――――――――――――――――――■□■
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 850:	88 ed       	ldi	r24, 0xD8	; 216
 852:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLA = 0b00000000; //16/20 MHz内部オシレータ
 854:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RODATA_PM_OFFSET__+0x7f8060>
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 858:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLB = 0b00000111; //16分周
 85a:	97 e0       	ldi	r25, 0x07	; 7
 85c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>

	//入出力モード設定
	VPORTA_DIR = 0b11111111; //ポートA 
 860:	9f ef       	ldi	r25, 0xFF	; 255
 862:	90 b9       	out	0x00, r25	; 0
	VPORTB_DIR = 0b11111100; //ポートB 
 864:	2c ef       	ldi	r18, 0xFC	; 252
 866:	24 b9       	out	0x04, r18	; 4
	VPORTC_DIR = 0b11111111; //ポートC
 868:	98 b9       	out	0x08, r25	; 8

	//出力の初期化
	VPORTA_OUT = 0b00000000; //ポートA
 86a:	11 b8       	out	0x01, r1	; 1
	VPORTB_OUT = 0b00000000; //ポートB
 86c:	15 b8       	out	0x05, r1	; 5
	VPORTC_OUT = 0b00000000; //ポートC
 86e:	19 b8       	out	0x09, r1	; 9

	//焦電型赤外線センサー入力
	PORTB_PIN0CTRL = 0b00000001; //プルアップ無効 両方のエッジを検出する
 870:	91 e0       	ldi	r25, 0x01	; 1
 872:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <__RODATA_PM_OFFSET__+0x7f8430>
	//タクトスイッチ入力
	PORTB_PIN1CTRL = 0b00001000; //プルアップ有効
 876:	28 e0       	ldi	r18, 0x08	; 8
 878:	20 93 31 04 	sts	0x0431, r18	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>

	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 87c:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_XOSC32KCTRLA = 0b00000001; //外付け水晶振動子 イネーブル
 87e:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__RODATA_PM_OFFSET__+0x7f807c>
	
	//RTC設定
	RTC_INTCTRL = 0b00000010; //比較一致割り込み許可
 882:	82 e0       	ldi	r24, 0x02	; 2
 884:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__RODATA_PM_OFFSET__+0x7f8142>
	RTC_CLKSEL  = 0b00000010; //クロック選択 XOSC32Kからの32.768 kHz
 888:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <__RODATA_PM_OFFSET__+0x7f8147>
	//STATUS.CTRLABUSYフラグが1の間待機
	while((RTC_STATUS & 0b00000001));
 88c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7f8141>
 890:	80 fd       	sbrc	r24, 0
 892:	fc cf       	rjmp	.-8      	; 0x88c <main+0x3c>
	RTC_CTRLA   = 0b11110001; //ｽﾀﾝﾊﾞｲ休止動作でもRTC許可 16384分周=0.5秒カウント RTC許可
 894:	81 ef       	ldi	r24, 0xF1	; 241
 896:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__RODATA_PM_OFFSET__+0x7f8140>

	//割り込みたい間隔の秒数をx2-1して代入
	RTC_CMP = 60 * 2 - 1;
 89a:	87 e7       	ldi	r24, 0x77	; 119
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__RODATA_PM_OFFSET__+0x7f814c>
 8a2:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__RODATA_PM_OFFSET__+0x7f814d>

	//タイマーA
	TCA0_SINGLE_CTRLA = 0b00001101; //1024分周 動作許可
 8a6:	8d e0       	ldi	r24, 0x0D	; 13
 8a8:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
	TCA0_SINGLE_CTRLB = 0b00000000; //
 8ac:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
	TCA0_SINGLE_CMP0 = 1; // カウントがこの値に達したら割り込み(TCA0_CMP1_vect)が発生
 8b0:	81 e0       	ldi	r24, 0x01	; 1
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
 8b8:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__RODATA_PM_OFFSET__+0x7f8a29>
	TCA0_SINGLE_INTCTRL = 0b00010000; //CMP0割り込み許可
 8bc:	80 e1       	ldi	r24, 0x10	; 16
 8be:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__RODATA_PM_OFFSET__+0x7f8a0a>

	//ADC設定
	ADC0_CTRLA = 0b00000001; //ADC Enable
 8c2:	91 e0       	ldi	r25, 0x01	; 1
 8c4:	90 93 00 06 	sts	0x0600, r25	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
	ADC0_CTRLB = 0b00000000; //累積なし
 8c8:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <__RODATA_PM_OFFSET__+0x7f8601>
	ADC0_CTRLC = 0b01010101; //VREF = VDD, プリスケーラ1/64
 8cc:	95 e5       	ldi	r25, 0x55	; 85
 8ce:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__RODATA_PM_OFFSET__+0x7f8602>
	VREF_CTRLA = 0b00010000; //内部基準電圧 1.1V
 8d2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__RODATA_PM_OFFSET__+0x7f80a0>

	set_sleep_mode(SLEEP_MODE_STANDBY); //スリープモードを設定
 8d6:	e0 e5       	ldi	r30, 0x50	; 80
 8d8:	f0 e0       	ldi	r31, 0x00	; 0
 8da:	80 81       	ld	r24, Z
 8dc:	89 7f       	andi	r24, 0xF9	; 249
 8de:	82 60       	ori	r24, 0x02	; 2
 8e0:	80 83       	st	Z, r24
 8e2:	81 ee       	ldi	r24, 0xE1	; 225
 8e4:	94 e0       	ldi	r25, 0x04	; 4
 8e6:	01 97       	sbiw	r24, 0x01	; 1
 8e8:	f1 f7       	brne	.-4      	; 0x8e6 <main+0x96>
 8ea:	00 c0       	rjmp	.+0      	; 0x8ec <main+0x9c>
 8ec:	00 00       	nop

	//少し待機
	_delay_ms(5);

	sei(); //割り込み許可
 8ee:	78 94       	sei
 8f0:	23 c0       	rjmp	.+70     	; 0x938 <main+0xe8>
	
	while (1) {

		//放電中ループ 起き続け3秒毎に電圧を計り下がっていたらブレイク
		while (discharge) {
			get_v();
 8f2:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
			if(supply_v < (MAX_SUPPLY_V - 0.1)) {
 8f6:	60 91 18 38 	lds	r22, 0x3818	; 0x803818 <supply_v>
 8fa:	70 91 19 38 	lds	r23, 0x3819	; 0x803819 <supply_v+0x1>
 8fe:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <supply_v+0x2>
 902:	90 91 1b 38 	lds	r25, 0x381B	; 0x80381b <supply_v+0x3>
 906:	23 e3       	ldi	r18, 0x33	; 51
 908:	33 e3       	ldi	r19, 0x33	; 51
 90a:	43 ea       	ldi	r20, 0xA3	; 163
 90c:	50 e4       	ldi	r21, 0x40	; 64
 90e:	0e 94 be 04 	call	0x97c	; 0x97c <__cmpsf2>
 912:	88 23       	and	r24, r24
 914:	3c f4       	brge	.+14     	; 0x924 <main+0xd4>
				discharge = 0;
 916:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <discharge>
				wakeup = 0;
 91a:	10 92 1f 38 	sts	0x381F, r1	; 0x80381f <wakeup>
 91e:	10 92 20 38 	sts	0x3820, r1	; 0x803820 <wakeup+0x1>
				break;
 922:	0e c0       	rjmp	.+28     	; 0x940 <main+0xf0>
			}
			sens_delay_ms(3000);
 924:	88 eb       	ldi	r24, 0xB8	; 184
 926:	9b e0       	ldi	r25, 0x0B	; 11
 928:	0e 94 e7 00 	call	0x1ce	; 0x1ce <sens_delay_ms>
			wakeup = 5200;
 92c:	80 e5       	ldi	r24, 0x50	; 80
 92e:	94 e1       	ldi	r25, 0x14	; 20
 930:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 934:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>
	sei(); //割り込み許可
	
	while (1) {

		//放電中ループ 起き続け3秒毎に電圧を計り下がっていたらブレイク
		while (discharge) {
 938:	80 91 12 38 	lds	r24, 0x3812	; 0x803812 <discharge>
 93c:	81 11       	cpse	r24, r1
 93e:	d9 cf       	rjmp	.-78     	; 0x8f2 <main+0xa2>
			}
			sens_delay_ms(3000);
			wakeup = 5200;
		}

		if(!wakeup) {
 940:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <wakeup>
 944:	90 91 20 38 	lds	r25, 0x3820	; 0x803820 <wakeup+0x1>
 948:	89 2b       	or	r24, r25
 94a:	99 f4       	brne	.+38     	; 0x972 <main+0x122>
			//寝る準備
			seg_all_off();
 94c:	0e 94 65 01 	call	0x2ca	; 0x2ca <seg_all_off>
			change_mode(MODE_CLOCK);
 950:	81 e0       	ldi	r24, 0x01	; 1
 952:	0e 94 72 01 	call	0x2e4	; 0x2e4 <change_mode>
			display_v = 0;
 956:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <display_v>
			yet_v = 1;
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <yet_v>
			//寝る
			sleep_mode();
 960:	e0 e5       	ldi	r30, 0x50	; 80
 962:	f0 e0       	ldi	r31, 0x00	; 0
 964:	80 81       	ld	r24, Z
 966:	81 60       	ori	r24, 0x01	; 1
 968:	80 83       	st	Z, r24
 96a:	88 95       	sleep
 96c:	80 81       	ld	r24, Z
 96e:	8e 7f       	andi	r24, 0xFE	; 254
 970:	80 83       	st	Z, r24
		}
		
		sens_delay_ms(5);
 972:	85 e0       	ldi	r24, 0x05	; 5
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	0e 94 e7 00 	call	0x1ce	; 0x1ce <sens_delay_ms>

	}
 97a:	de cf       	rjmp	.-68     	; 0x938 <main+0xe8>

0000097c <__cmpsf2>:
 97c:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fp_cmp>
 980:	08 f4       	brcc	.+2      	; 0x984 <__cmpsf2+0x8>
 982:	81 e0       	ldi	r24, 0x01	; 1
 984:	08 95       	ret

00000986 <__divsf3>:
 986:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__divsf3x>
 98a:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__fp_round>
 98e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__fp_pscB>
 992:	58 f0       	brcs	.+22     	; 0x9aa <__divsf3+0x24>
 994:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__fp_pscA>
 998:	40 f0       	brcs	.+16     	; 0x9aa <__divsf3+0x24>
 99a:	29 f4       	brne	.+10     	; 0x9a6 <__divsf3+0x20>
 99c:	5f 3f       	cpi	r21, 0xFF	; 255
 99e:	29 f0       	breq	.+10     	; 0x9aa <__divsf3+0x24>
 9a0:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_inf>
 9a4:	51 11       	cpse	r21, r1
 9a6:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__fp_szero>
 9aa:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__fp_nan>

000009ae <__divsf3x>:
 9ae:	0e 94 ed 05 	call	0xbda	; 0xbda <__fp_split3>
 9b2:	68 f3       	brcs	.-38     	; 0x98e <__divsf3+0x8>

000009b4 <__divsf3_pse>:
 9b4:	99 23       	and	r25, r25
 9b6:	b1 f3       	breq	.-20     	; 0x9a4 <__divsf3+0x1e>
 9b8:	55 23       	and	r21, r21
 9ba:	91 f3       	breq	.-28     	; 0x9a0 <__divsf3+0x1a>
 9bc:	95 1b       	sub	r25, r21
 9be:	55 0b       	sbc	r21, r21
 9c0:	bb 27       	eor	r27, r27
 9c2:	aa 27       	eor	r26, r26
 9c4:	62 17       	cp	r22, r18
 9c6:	73 07       	cpc	r23, r19
 9c8:	84 07       	cpc	r24, r20
 9ca:	38 f0       	brcs	.+14     	; 0x9da <__divsf3_pse+0x26>
 9cc:	9f 5f       	subi	r25, 0xFF	; 255
 9ce:	5f 4f       	sbci	r21, 0xFF	; 255
 9d0:	22 0f       	add	r18, r18
 9d2:	33 1f       	adc	r19, r19
 9d4:	44 1f       	adc	r20, r20
 9d6:	aa 1f       	adc	r26, r26
 9d8:	a9 f3       	breq	.-22     	; 0x9c4 <__divsf3_pse+0x10>
 9da:	35 d0       	rcall	.+106    	; 0xa46 <__divsf3_pse+0x92>
 9dc:	0e 2e       	mov	r0, r30
 9de:	3a f0       	brmi	.+14     	; 0x9ee <__divsf3_pse+0x3a>
 9e0:	e0 e8       	ldi	r30, 0x80	; 128
 9e2:	32 d0       	rcall	.+100    	; 0xa48 <__divsf3_pse+0x94>
 9e4:	91 50       	subi	r25, 0x01	; 1
 9e6:	50 40       	sbci	r21, 0x00	; 0
 9e8:	e6 95       	lsr	r30
 9ea:	00 1c       	adc	r0, r0
 9ec:	ca f7       	brpl	.-14     	; 0x9e0 <__divsf3_pse+0x2c>
 9ee:	2b d0       	rcall	.+86     	; 0xa46 <__divsf3_pse+0x92>
 9f0:	fe 2f       	mov	r31, r30
 9f2:	29 d0       	rcall	.+82     	; 0xa46 <__divsf3_pse+0x92>
 9f4:	66 0f       	add	r22, r22
 9f6:	77 1f       	adc	r23, r23
 9f8:	88 1f       	adc	r24, r24
 9fa:	bb 1f       	adc	r27, r27
 9fc:	26 17       	cp	r18, r22
 9fe:	37 07       	cpc	r19, r23
 a00:	48 07       	cpc	r20, r24
 a02:	ab 07       	cpc	r26, r27
 a04:	b0 e8       	ldi	r27, 0x80	; 128
 a06:	09 f0       	breq	.+2      	; 0xa0a <__divsf3_pse+0x56>
 a08:	bb 0b       	sbc	r27, r27
 a0a:	80 2d       	mov	r24, r0
 a0c:	bf 01       	movw	r22, r30
 a0e:	ff 27       	eor	r31, r31
 a10:	93 58       	subi	r25, 0x83	; 131
 a12:	5f 4f       	sbci	r21, 0xFF	; 255
 a14:	3a f0       	brmi	.+14     	; 0xa24 <__divsf3_pse+0x70>
 a16:	9e 3f       	cpi	r25, 0xFE	; 254
 a18:	51 05       	cpc	r21, r1
 a1a:	78 f0       	brcs	.+30     	; 0xa3a <__divsf3_pse+0x86>
 a1c:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_inf>
 a20:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__fp_szero>
 a24:	5f 3f       	cpi	r21, 0xFF	; 255
 a26:	e4 f3       	brlt	.-8      	; 0xa20 <__divsf3_pse+0x6c>
 a28:	98 3e       	cpi	r25, 0xE8	; 232
 a2a:	d4 f3       	brlt	.-12     	; 0xa20 <__divsf3_pse+0x6c>
 a2c:	86 95       	lsr	r24
 a2e:	77 95       	ror	r23
 a30:	67 95       	ror	r22
 a32:	b7 95       	ror	r27
 a34:	f7 95       	ror	r31
 a36:	9f 5f       	subi	r25, 0xFF	; 255
 a38:	c9 f7       	brne	.-14     	; 0xa2c <__divsf3_pse+0x78>
 a3a:	88 0f       	add	r24, r24
 a3c:	91 1d       	adc	r25, r1
 a3e:	96 95       	lsr	r25
 a40:	87 95       	ror	r24
 a42:	97 f9       	bld	r25, 7
 a44:	08 95       	ret
 a46:	e1 e0       	ldi	r30, 0x01	; 1
 a48:	66 0f       	add	r22, r22
 a4a:	77 1f       	adc	r23, r23
 a4c:	88 1f       	adc	r24, r24
 a4e:	bb 1f       	adc	r27, r27
 a50:	62 17       	cp	r22, r18
 a52:	73 07       	cpc	r23, r19
 a54:	84 07       	cpc	r24, r20
 a56:	ba 07       	cpc	r27, r26
 a58:	20 f0       	brcs	.+8      	; 0xa62 <__divsf3_pse+0xae>
 a5a:	62 1b       	sub	r22, r18
 a5c:	73 0b       	sbc	r23, r19
 a5e:	84 0b       	sbc	r24, r20
 a60:	ba 0b       	sbc	r27, r26
 a62:	ee 1f       	adc	r30, r30
 a64:	88 f7       	brcc	.-30     	; 0xa48 <__divsf3_pse+0x94>
 a66:	e0 95       	com	r30
 a68:	08 95       	ret

00000a6a <__fixunssfsi>:
 a6a:	0e 94 f5 05 	call	0xbea	; 0xbea <__fp_splitA>
 a6e:	88 f0       	brcs	.+34     	; 0xa92 <__fixunssfsi+0x28>
 a70:	9f 57       	subi	r25, 0x7F	; 127
 a72:	98 f0       	brcs	.+38     	; 0xa9a <__fixunssfsi+0x30>
 a74:	b9 2f       	mov	r27, r25
 a76:	99 27       	eor	r25, r25
 a78:	b7 51       	subi	r27, 0x17	; 23
 a7a:	b0 f0       	brcs	.+44     	; 0xaa8 <__fixunssfsi+0x3e>
 a7c:	e1 f0       	breq	.+56     	; 0xab6 <__fixunssfsi+0x4c>
 a7e:	66 0f       	add	r22, r22
 a80:	77 1f       	adc	r23, r23
 a82:	88 1f       	adc	r24, r24
 a84:	99 1f       	adc	r25, r25
 a86:	1a f0       	brmi	.+6      	; 0xa8e <__fixunssfsi+0x24>
 a88:	ba 95       	dec	r27
 a8a:	c9 f7       	brne	.-14     	; 0xa7e <__fixunssfsi+0x14>
 a8c:	14 c0       	rjmp	.+40     	; 0xab6 <__fixunssfsi+0x4c>
 a8e:	b1 30       	cpi	r27, 0x01	; 1
 a90:	91 f0       	breq	.+36     	; 0xab6 <__fixunssfsi+0x4c>
 a92:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__fp_zero>
 a96:	b1 e0       	ldi	r27, 0x01	; 1
 a98:	08 95       	ret
 a9a:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_zero>
 a9e:	67 2f       	mov	r22, r23
 aa0:	78 2f       	mov	r23, r24
 aa2:	88 27       	eor	r24, r24
 aa4:	b8 5f       	subi	r27, 0xF8	; 248
 aa6:	39 f0       	breq	.+14     	; 0xab6 <__fixunssfsi+0x4c>
 aa8:	b9 3f       	cpi	r27, 0xF9	; 249
 aaa:	cc f3       	brlt	.-14     	; 0xa9e <__fixunssfsi+0x34>
 aac:	86 95       	lsr	r24
 aae:	77 95       	ror	r23
 ab0:	67 95       	ror	r22
 ab2:	b3 95       	inc	r27
 ab4:	d9 f7       	brne	.-10     	; 0xaac <__fixunssfsi+0x42>
 ab6:	3e f4       	brtc	.+14     	; 0xac6 <__fixunssfsi+0x5c>
 ab8:	90 95       	com	r25
 aba:	80 95       	com	r24
 abc:	70 95       	com	r23
 abe:	61 95       	neg	r22
 ac0:	7f 4f       	sbci	r23, 0xFF	; 255
 ac2:	8f 4f       	sbci	r24, 0xFF	; 255
 ac4:	9f 4f       	sbci	r25, 0xFF	; 255
 ac6:	08 95       	ret

00000ac8 <__floatunsisf>:
 ac8:	e8 94       	clt
 aca:	09 c0       	rjmp	.+18     	; 0xade <__floatsisf+0x12>

00000acc <__floatsisf>:
 acc:	97 fb       	bst	r25, 7
 ace:	3e f4       	brtc	.+14     	; 0xade <__floatsisf+0x12>
 ad0:	90 95       	com	r25
 ad2:	80 95       	com	r24
 ad4:	70 95       	com	r23
 ad6:	61 95       	neg	r22
 ad8:	7f 4f       	sbci	r23, 0xFF	; 255
 ada:	8f 4f       	sbci	r24, 0xFF	; 255
 adc:	9f 4f       	sbci	r25, 0xFF	; 255
 ade:	99 23       	and	r25, r25
 ae0:	a9 f0       	breq	.+42     	; 0xb0c <__floatsisf+0x40>
 ae2:	f9 2f       	mov	r31, r25
 ae4:	96 e9       	ldi	r25, 0x96	; 150
 ae6:	bb 27       	eor	r27, r27
 ae8:	93 95       	inc	r25
 aea:	f6 95       	lsr	r31
 aec:	87 95       	ror	r24
 aee:	77 95       	ror	r23
 af0:	67 95       	ror	r22
 af2:	b7 95       	ror	r27
 af4:	f1 11       	cpse	r31, r1
 af6:	f8 cf       	rjmp	.-16     	; 0xae8 <__floatsisf+0x1c>
 af8:	fa f4       	brpl	.+62     	; 0xb38 <__floatsisf+0x6c>
 afa:	bb 0f       	add	r27, r27
 afc:	11 f4       	brne	.+4      	; 0xb02 <__floatsisf+0x36>
 afe:	60 ff       	sbrs	r22, 0
 b00:	1b c0       	rjmp	.+54     	; 0xb38 <__floatsisf+0x6c>
 b02:	6f 5f       	subi	r22, 0xFF	; 255
 b04:	7f 4f       	sbci	r23, 0xFF	; 255
 b06:	8f 4f       	sbci	r24, 0xFF	; 255
 b08:	9f 4f       	sbci	r25, 0xFF	; 255
 b0a:	16 c0       	rjmp	.+44     	; 0xb38 <__floatsisf+0x6c>
 b0c:	88 23       	and	r24, r24
 b0e:	11 f0       	breq	.+4      	; 0xb14 <__floatsisf+0x48>
 b10:	96 e9       	ldi	r25, 0x96	; 150
 b12:	11 c0       	rjmp	.+34     	; 0xb36 <__floatsisf+0x6a>
 b14:	77 23       	and	r23, r23
 b16:	21 f0       	breq	.+8      	; 0xb20 <__floatsisf+0x54>
 b18:	9e e8       	ldi	r25, 0x8E	; 142
 b1a:	87 2f       	mov	r24, r23
 b1c:	76 2f       	mov	r23, r22
 b1e:	05 c0       	rjmp	.+10     	; 0xb2a <__floatsisf+0x5e>
 b20:	66 23       	and	r22, r22
 b22:	71 f0       	breq	.+28     	; 0xb40 <__floatsisf+0x74>
 b24:	96 e8       	ldi	r25, 0x86	; 134
 b26:	86 2f       	mov	r24, r22
 b28:	70 e0       	ldi	r23, 0x00	; 0
 b2a:	60 e0       	ldi	r22, 0x00	; 0
 b2c:	2a f0       	brmi	.+10     	; 0xb38 <__floatsisf+0x6c>
 b2e:	9a 95       	dec	r25
 b30:	66 0f       	add	r22, r22
 b32:	77 1f       	adc	r23, r23
 b34:	88 1f       	adc	r24, r24
 b36:	da f7       	brpl	.-10     	; 0xb2e <__floatsisf+0x62>
 b38:	88 0f       	add	r24, r24
 b3a:	96 95       	lsr	r25
 b3c:	87 95       	ror	r24
 b3e:	97 f9       	bld	r25, 7
 b40:	08 95       	ret

00000b42 <__fp_cmp>:
 b42:	99 0f       	add	r25, r25
 b44:	00 08       	sbc	r0, r0
 b46:	55 0f       	add	r21, r21
 b48:	aa 0b       	sbc	r26, r26
 b4a:	e0 e8       	ldi	r30, 0x80	; 128
 b4c:	fe ef       	ldi	r31, 0xFE	; 254
 b4e:	16 16       	cp	r1, r22
 b50:	17 06       	cpc	r1, r23
 b52:	e8 07       	cpc	r30, r24
 b54:	f9 07       	cpc	r31, r25
 b56:	c0 f0       	brcs	.+48     	; 0xb88 <__fp_cmp+0x46>
 b58:	12 16       	cp	r1, r18
 b5a:	13 06       	cpc	r1, r19
 b5c:	e4 07       	cpc	r30, r20
 b5e:	f5 07       	cpc	r31, r21
 b60:	98 f0       	brcs	.+38     	; 0xb88 <__fp_cmp+0x46>
 b62:	62 1b       	sub	r22, r18
 b64:	73 0b       	sbc	r23, r19
 b66:	84 0b       	sbc	r24, r20
 b68:	95 0b       	sbc	r25, r21
 b6a:	39 f4       	brne	.+14     	; 0xb7a <__fp_cmp+0x38>
 b6c:	0a 26       	eor	r0, r26
 b6e:	61 f0       	breq	.+24     	; 0xb88 <__fp_cmp+0x46>
 b70:	23 2b       	or	r18, r19
 b72:	24 2b       	or	r18, r20
 b74:	25 2b       	or	r18, r21
 b76:	21 f4       	brne	.+8      	; 0xb80 <__fp_cmp+0x3e>
 b78:	08 95       	ret
 b7a:	0a 26       	eor	r0, r26
 b7c:	09 f4       	brne	.+2      	; 0xb80 <__fp_cmp+0x3e>
 b7e:	a1 40       	sbci	r26, 0x01	; 1
 b80:	a6 95       	lsr	r26
 b82:	8f ef       	ldi	r24, 0xFF	; 255
 b84:	81 1d       	adc	r24, r1
 b86:	81 1d       	adc	r24, r1
 b88:	08 95       	ret

00000b8a <__fp_inf>:
 b8a:	97 f9       	bld	r25, 7
 b8c:	9f 67       	ori	r25, 0x7F	; 127
 b8e:	80 e8       	ldi	r24, 0x80	; 128
 b90:	70 e0       	ldi	r23, 0x00	; 0
 b92:	60 e0       	ldi	r22, 0x00	; 0
 b94:	08 95       	ret

00000b96 <__fp_nan>:
 b96:	9f ef       	ldi	r25, 0xFF	; 255
 b98:	80 ec       	ldi	r24, 0xC0	; 192
 b9a:	08 95       	ret

00000b9c <__fp_pscA>:
 b9c:	00 24       	eor	r0, r0
 b9e:	0a 94       	dec	r0
 ba0:	16 16       	cp	r1, r22
 ba2:	17 06       	cpc	r1, r23
 ba4:	18 06       	cpc	r1, r24
 ba6:	09 06       	cpc	r0, r25
 ba8:	08 95       	ret

00000baa <__fp_pscB>:
 baa:	00 24       	eor	r0, r0
 bac:	0a 94       	dec	r0
 bae:	12 16       	cp	r1, r18
 bb0:	13 06       	cpc	r1, r19
 bb2:	14 06       	cpc	r1, r20
 bb4:	05 06       	cpc	r0, r21
 bb6:	08 95       	ret

00000bb8 <__fp_round>:
 bb8:	09 2e       	mov	r0, r25
 bba:	03 94       	inc	r0
 bbc:	00 0c       	add	r0, r0
 bbe:	11 f4       	brne	.+4      	; 0xbc4 <__fp_round+0xc>
 bc0:	88 23       	and	r24, r24
 bc2:	52 f0       	brmi	.+20     	; 0xbd8 <__fp_round+0x20>
 bc4:	bb 0f       	add	r27, r27
 bc6:	40 f4       	brcc	.+16     	; 0xbd8 <__fp_round+0x20>
 bc8:	bf 2b       	or	r27, r31
 bca:	11 f4       	brne	.+4      	; 0xbd0 <__fp_round+0x18>
 bcc:	60 ff       	sbrs	r22, 0
 bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__fp_round+0x20>
 bd0:	6f 5f       	subi	r22, 0xFF	; 255
 bd2:	7f 4f       	sbci	r23, 0xFF	; 255
 bd4:	8f 4f       	sbci	r24, 0xFF	; 255
 bd6:	9f 4f       	sbci	r25, 0xFF	; 255
 bd8:	08 95       	ret

00000bda <__fp_split3>:
 bda:	57 fd       	sbrc	r21, 7
 bdc:	90 58       	subi	r25, 0x80	; 128
 bde:	44 0f       	add	r20, r20
 be0:	55 1f       	adc	r21, r21
 be2:	59 f0       	breq	.+22     	; 0xbfa <__fp_splitA+0x10>
 be4:	5f 3f       	cpi	r21, 0xFF	; 255
 be6:	71 f0       	breq	.+28     	; 0xc04 <__fp_splitA+0x1a>
 be8:	47 95       	ror	r20

00000bea <__fp_splitA>:
 bea:	88 0f       	add	r24, r24
 bec:	97 fb       	bst	r25, 7
 bee:	99 1f       	adc	r25, r25
 bf0:	61 f0       	breq	.+24     	; 0xc0a <__fp_splitA+0x20>
 bf2:	9f 3f       	cpi	r25, 0xFF	; 255
 bf4:	79 f0       	breq	.+30     	; 0xc14 <__fp_splitA+0x2a>
 bf6:	87 95       	ror	r24
 bf8:	08 95       	ret
 bfa:	12 16       	cp	r1, r18
 bfc:	13 06       	cpc	r1, r19
 bfe:	14 06       	cpc	r1, r20
 c00:	55 1f       	adc	r21, r21
 c02:	f2 cf       	rjmp	.-28     	; 0xbe8 <__fp_split3+0xe>
 c04:	46 95       	lsr	r20
 c06:	f1 df       	rcall	.-30     	; 0xbea <__fp_splitA>
 c08:	08 c0       	rjmp	.+16     	; 0xc1a <__fp_splitA+0x30>
 c0a:	16 16       	cp	r1, r22
 c0c:	17 06       	cpc	r1, r23
 c0e:	18 06       	cpc	r1, r24
 c10:	99 1f       	adc	r25, r25
 c12:	f1 cf       	rjmp	.-30     	; 0xbf6 <__fp_splitA+0xc>
 c14:	86 95       	lsr	r24
 c16:	71 05       	cpc	r23, r1
 c18:	61 05       	cpc	r22, r1
 c1a:	08 94       	sec
 c1c:	08 95       	ret

00000c1e <__fp_zero>:
 c1e:	e8 94       	clt

00000c20 <__fp_szero>:
 c20:	bb 27       	eor	r27, r27
 c22:	66 27       	eor	r22, r22
 c24:	77 27       	eor	r23, r23
 c26:	cb 01       	movw	r24, r22
 c28:	97 f9       	bld	r25, 7
 c2a:	08 95       	ret

00000c2c <__gesf2>:
 c2c:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fp_cmp>
 c30:	08 f4       	brcc	.+2      	; 0xc34 <__gesf2+0x8>
 c32:	8f ef       	ldi	r24, 0xFF	; 255
 c34:	08 95       	ret

00000c36 <__mulsf3>:
 c36:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__mulsf3x>
 c3a:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__fp_round>
 c3e:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__fp_pscA>
 c42:	38 f0       	brcs	.+14     	; 0xc52 <__mulsf3+0x1c>
 c44:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__fp_pscB>
 c48:	20 f0       	brcs	.+8      	; 0xc52 <__mulsf3+0x1c>
 c4a:	95 23       	and	r25, r21
 c4c:	11 f0       	breq	.+4      	; 0xc52 <__mulsf3+0x1c>
 c4e:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_inf>
 c52:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__fp_nan>
 c56:	11 24       	eor	r1, r1
 c58:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__fp_szero>

00000c5c <__mulsf3x>:
 c5c:	0e 94 ed 05 	call	0xbda	; 0xbda <__fp_split3>
 c60:	70 f3       	brcs	.-36     	; 0xc3e <__mulsf3+0x8>

00000c62 <__mulsf3_pse>:
 c62:	95 9f       	mul	r25, r21
 c64:	c1 f3       	breq	.-16     	; 0xc56 <__mulsf3+0x20>
 c66:	95 0f       	add	r25, r21
 c68:	50 e0       	ldi	r21, 0x00	; 0
 c6a:	55 1f       	adc	r21, r21
 c6c:	62 9f       	mul	r22, r18
 c6e:	f0 01       	movw	r30, r0
 c70:	72 9f       	mul	r23, r18
 c72:	bb 27       	eor	r27, r27
 c74:	f0 0d       	add	r31, r0
 c76:	b1 1d       	adc	r27, r1
 c78:	63 9f       	mul	r22, r19
 c7a:	aa 27       	eor	r26, r26
 c7c:	f0 0d       	add	r31, r0
 c7e:	b1 1d       	adc	r27, r1
 c80:	aa 1f       	adc	r26, r26
 c82:	64 9f       	mul	r22, r20
 c84:	66 27       	eor	r22, r22
 c86:	b0 0d       	add	r27, r0
 c88:	a1 1d       	adc	r26, r1
 c8a:	66 1f       	adc	r22, r22
 c8c:	82 9f       	mul	r24, r18
 c8e:	22 27       	eor	r18, r18
 c90:	b0 0d       	add	r27, r0
 c92:	a1 1d       	adc	r26, r1
 c94:	62 1f       	adc	r22, r18
 c96:	73 9f       	mul	r23, r19
 c98:	b0 0d       	add	r27, r0
 c9a:	a1 1d       	adc	r26, r1
 c9c:	62 1f       	adc	r22, r18
 c9e:	83 9f       	mul	r24, r19
 ca0:	a0 0d       	add	r26, r0
 ca2:	61 1d       	adc	r22, r1
 ca4:	22 1f       	adc	r18, r18
 ca6:	74 9f       	mul	r23, r20
 ca8:	33 27       	eor	r19, r19
 caa:	a0 0d       	add	r26, r0
 cac:	61 1d       	adc	r22, r1
 cae:	23 1f       	adc	r18, r19
 cb0:	84 9f       	mul	r24, r20
 cb2:	60 0d       	add	r22, r0
 cb4:	21 1d       	adc	r18, r1
 cb6:	82 2f       	mov	r24, r18
 cb8:	76 2f       	mov	r23, r22
 cba:	6a 2f       	mov	r22, r26
 cbc:	11 24       	eor	r1, r1
 cbe:	9f 57       	subi	r25, 0x7F	; 127
 cc0:	50 40       	sbci	r21, 0x00	; 0
 cc2:	9a f0       	brmi	.+38     	; 0xcea <__mulsf3_pse+0x88>
 cc4:	f1 f0       	breq	.+60     	; 0xd02 <__mulsf3_pse+0xa0>
 cc6:	88 23       	and	r24, r24
 cc8:	4a f0       	brmi	.+18     	; 0xcdc <__mulsf3_pse+0x7a>
 cca:	ee 0f       	add	r30, r30
 ccc:	ff 1f       	adc	r31, r31
 cce:	bb 1f       	adc	r27, r27
 cd0:	66 1f       	adc	r22, r22
 cd2:	77 1f       	adc	r23, r23
 cd4:	88 1f       	adc	r24, r24
 cd6:	91 50       	subi	r25, 0x01	; 1
 cd8:	50 40       	sbci	r21, 0x00	; 0
 cda:	a9 f7       	brne	.-22     	; 0xcc6 <__mulsf3_pse+0x64>
 cdc:	9e 3f       	cpi	r25, 0xFE	; 254
 cde:	51 05       	cpc	r21, r1
 ce0:	80 f0       	brcs	.+32     	; 0xd02 <__mulsf3_pse+0xa0>
 ce2:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_inf>
 ce6:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__fp_szero>
 cea:	5f 3f       	cpi	r21, 0xFF	; 255
 cec:	e4 f3       	brlt	.-8      	; 0xce6 <__mulsf3_pse+0x84>
 cee:	98 3e       	cpi	r25, 0xE8	; 232
 cf0:	d4 f3       	brlt	.-12     	; 0xce6 <__mulsf3_pse+0x84>
 cf2:	86 95       	lsr	r24
 cf4:	77 95       	ror	r23
 cf6:	67 95       	ror	r22
 cf8:	b7 95       	ror	r27
 cfa:	f7 95       	ror	r31
 cfc:	e7 95       	ror	r30
 cfe:	9f 5f       	subi	r25, 0xFF	; 255
 d00:	c1 f7       	brne	.-16     	; 0xcf2 <__mulsf3_pse+0x90>
 d02:	fe 2b       	or	r31, r30
 d04:	88 0f       	add	r24, r24
 d06:	91 1d       	adc	r25, r1
 d08:	96 95       	lsr	r25
 d0a:	87 95       	ror	r24
 d0c:	97 f9       	bld	r25, 7
 d0e:	08 95       	ret

00000d10 <_exit>:
 d10:	f8 94       	cli

00000d12 <__stop_program>:
 d12:	ff cf       	rjmp	.-2      	; 0xd12 <__stop_program>
