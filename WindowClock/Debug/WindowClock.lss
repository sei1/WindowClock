
WindowClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00803800  00000d16  00000daa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  0080380e  0080380e  00000db8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000de8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000202c  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b01  00000000  00000000  00002eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ca  00000000  00000000  000049ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00005278  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d7d  00000000  00000000  00005448  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007aa  00000000  00000000  000061c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000696f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__vector_4>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 a0 03 	jmp	0x740	; 0x740 <__vector_6>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_10>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
  88:	18 e3       	ldi	r17, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	e6 e1       	ldi	r30, 0x16	; 22
  90:	fd e0       	ldi	r31, 0x0D	; 13
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ae 30       	cpi	r26, 0x0E	; 14
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	28 e3       	ldi	r18, 0x38	; 56
  a0:	ae e0       	ldi	r26, 0x0E	; 14
  a2:	b8 e3       	ldi	r27, 0x38	; 56
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a3 32       	cpi	r26, 0x23	; 35
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 29 04 	call	0x852	; 0x852 <main>
  b2:	0c 94 89 06 	jmp	0xd12	; 0xd12 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <get_v>:
// プログラム本文
//---------------------------------


//キャパシタに蓄えられた電源電圧と太陽電池の発電電圧を取得する関数
void get_v (void) {
  ba:	cf 92       	push	r12
  bc:	df 92       	push	r13
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
	
	uint16_t x = 0;
	uint16_t y = 0;

	//PB1をタクトスイッチ入力から一時的に太陽電池電圧の測定ピンに切り替える
	PORTB_PIN1CTRL = 0b00000000; //プルアップ無効 エッジを検出しない
  c6:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>
	VPORTB_DIR    |= 0b00000010; //出力モードに変更
  ca:	84 b1       	in	r24, 0x04	; 4
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	84 b9       	out	0x04, r24	; 4
	VPORTB_OUT    &= 0b11111101; //出力Low
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	8d 7f       	andi	r24, 0xFD	; 253
  d4:	85 b9       	out	0x05, r24	; 5

	//この状態でPB1の電圧を抜いている間に基準電圧1.1V / 電源電圧を測定しておく

	// 基準電圧1.1V / 電源電圧 を10bit(1024段階)で測定
	ADC0_MUXPOS = 0b00011101; //基準電圧
  d6:	8d e1       	ldi	r24, 0x1D	; 29
  d8:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7f8606>

	ADC0_COMMAND = 1;//AD変換開始
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
	while(ADC0_COMMAND);
  e2:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
  e6:	81 11       	cpse	r24, r1
  e8:	fc cf       	rjmp	.-8      	; 0xe2 <get_v+0x28>
	ADC0_COMMAND = 0;//AD変換終了
  ea:	c8 e0       	ldi	r28, 0x08	; 8
  ec:	d6 e0       	ldi	r29, 0x06	; 6
  ee:	18 82       	st	Y, r1

	y = ADC0_RES;
  f0:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
  f4:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
	
	//電源電圧を算出
	supply_v = 1023 * 1.1 / y;
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 65 05 	call	0xaca	; 0xaca <__floatunsisf>
 100:	6b 01       	movw	r12, r22
 102:	7c 01       	movw	r14, r24
 104:	9b 01       	movw	r18, r22
 106:	ac 01       	movw	r20, r24
 108:	6a e9       	ldi	r22, 0x9A	; 154
 10a:	79 ea       	ldi	r23, 0xA9	; 169
 10c:	8c e8       	ldi	r24, 0x8C	; 140
 10e:	94 e4       	ldi	r25, 0x44	; 68
 110:	0e 94 c4 04 	call	0x988	; 0x988 <__divsf3>
 114:	60 93 18 38 	sts	0x3818, r22	; 0x803818 <supply_v>
 118:	70 93 19 38 	sts	0x3819, r23	; 0x803819 <supply_v+0x1>
 11c:	80 93 1a 38 	sts	0x381A, r24	; 0x80381a <supply_v+0x2>
 120:	90 93 1b 38 	sts	0x381B, r25	; 0x80381b <supply_v+0x3>


	//PB1を入力モードに戻す
	VPORTB_DIR    &= 0b11111101; 
 124:	84 b1       	in	r24, 0x04	; 4
 126:	8d 7f       	andi	r24, 0xFD	; 253
 128:	84 b9       	out	0x04, r24	; 4

	//ADC入力ピンの選択
	// PB1ピンの電圧 / 電源電圧 を10bit(1024段階)で測定
	ADC0_MUXPOS = 0b00001010; //AIN10 = PB1
 12a:	8a e0       	ldi	r24, 0x0A	; 10
 12c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7f8606>

	ADC0_COMMAND = 1;//AD変換開始
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	88 83       	st	Y, r24
	while(ADC0_COMMAND);
 134:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
 138:	81 11       	cpse	r24, r1
 13a:	fc cf       	rjmp	.-8      	; 0x134 <__EEPROM_REGION_LENGTH__+0x34>
	ADC0_COMMAND = 0;//AD変換終了
 13c:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>

	x = ADC0_RES;
 140:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
 144:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>

	//PB1のプルアップを有効に戻す
	PORTB_PIN1CTRL = 0b00001001; //プルアップ有効 両方のエッジを検出する
 148:	89 e0       	ldi	r24, 0x09	; 9
 14a:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>

	//太陽電池電圧を算出
	solar_v = x * 1.1 / y;
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 65 05 	call	0xaca	; 0xaca <__floatunsisf>
 156:	2d ec       	ldi	r18, 0xCD	; 205
 158:	3c ec       	ldi	r19, 0xCC	; 204
 15a:	4c e8       	ldi	r20, 0x8C	; 140
 15c:	5f e3       	ldi	r21, 0x3F	; 63
 15e:	0e 94 1c 06 	call	0xc38	; 0xc38 <__mulsf3>
 162:	a7 01       	movw	r20, r14
 164:	96 01       	movw	r18, r12
 166:	0e 94 c4 04 	call	0x988	; 0x988 <__divsf3>
 16a:	60 93 14 38 	sts	0x3814, r22	; 0x803814 <solar_v>
 16e:	70 93 15 38 	sts	0x3815, r23	; 0x803815 <solar_v+0x1>
 172:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <solar_v+0x2>
 176:	90 93 17 38 	sts	0x3817, r25	; 0x803817 <solar_v+0x3>
}
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	ff 90       	pop	r15
 180:	ef 90       	pop	r14
 182:	df 90       	pop	r13
 184:	cf 90       	pop	r12
 186:	08 95       	ret

00000188 <sens_delay_ms>:

//ボタン操作を受け付けながら待機する関数
void sens_delay_ms (uint16_t num) {
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	8c 01       	movw	r16, r24

	for (unsigned int i = 0; i < num; i++){
 192:	c0 e0       	ldi	r28, 0x00	; 0
 194:	d0 e0       	ldi	r29, 0x00	; 0
 196:	67 c0       	rjmp	.+206    	; 0x266 <sens_delay_ms+0xde>
		if(!(VPORTB_IN & PIN1_bm)) {
 198:	31 99       	sbic	0x06, 1	; 6
 19a:	5e c0       	rjmp	.+188    	; 0x258 <sens_delay_ms+0xd0>

			//ここにタクトスイッチが押された時の動作を記述
			wakeup = 4000;
 19c:	80 ea       	ldi	r24, 0xA0	; 160
 19e:	9f e0       	ldi	r25, 0x0F	; 15
 1a0:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 1a4:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>
		
			switch (mode) {
 1a8:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <mode>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	d1 f0       	breq	.+52     	; 0x1e4 <sens_delay_ms+0x5c>
 1b0:	83 30       	cpi	r24, 0x03	; 3
 1b2:	89 f1       	breq	.+98     	; 0x216 <sens_delay_ms+0x8e>
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	09 f0       	breq	.+2      	; 0x1ba <sens_delay_ms+0x32>
 1b8:	4f c0       	rjmp	.+158    	; 0x258 <sens_delay_ms+0xd0>
				case MODE_CLOCK:
					while(!(VPORTB_IN & PIN1_bm));
 1ba:	31 9b       	sbis	0x06, 1	; 6
 1bc:	fe cf       	rjmp	.-4      	; 0x1ba <sens_delay_ms+0x32>
					if(change_mode_after) {
 1be:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <change_mode_after>
 1c2:	88 23       	and	r24, r24
 1c4:	19 f0       	breq	.+6      	; 0x1cc <sens_delay_ms+0x44>
						change_mode_after = 0;
 1c6:	10 92 1c 38 	sts	0x381C, r1	; 0x80381c <change_mode_after>
 1ca:	46 c0       	rjmp	.+140    	; 0x258 <sens_delay_ms+0xd0>
					}else{
						//電圧の取得
						get_v();
 1cc:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
						display_v = 200;
 1d0:	88 ec       	ldi	r24, 0xC8	; 200
 1d2:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <display_v>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	87 ea       	ldi	r24, 0xA7	; 167
 1d8:	91 e6       	ldi	r25, 0x61	; 97
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <sens_delay_ms+0x52>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <sens_delay_ms+0x58>
 1e0:	00 00       	nop
 1e2:	3a c0       	rjmp	.+116    	; 0x258 <sens_delay_ms+0xd0>
						_delay_ms(100);
					}
				break;

				case MODE_HOUR_SET:
					while(!(VPORTB_IN & PIN1_bm));
 1e4:	31 9b       	sbis	0x06, 1	; 6
 1e6:	fe cf       	rjmp	.-4      	; 0x1e4 <sens_delay_ms+0x5c>
					if(change_mode_after) {
 1e8:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <change_mode_after>
 1ec:	88 23       	and	r24, r24
 1ee:	19 f0       	breq	.+6      	; 0x1f6 <sens_delay_ms+0x6e>
						change_mode_after = 0;
 1f0:	10 92 1c 38 	sts	0x381C, r1	; 0x80381c <change_mode_after>
 1f4:	31 c0       	rjmp	.+98     	; 0x258 <sens_delay_ms+0xd0>
					}else{
						if(++hour >= 24) hour = 0;
 1f6:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <hour>
 1fa:	8f 5f       	subi	r24, 0xFF	; 255
 1fc:	80 93 21 38 	sts	0x3821, r24	; 0x803821 <hour>
 200:	88 31       	cpi	r24, 0x18	; 24
 202:	10 f0       	brcs	.+4      	; 0x208 <sens_delay_ms+0x80>
 204:	10 92 21 38 	sts	0x3821, r1	; 0x803821 <hour>
 208:	87 ea       	ldi	r24, 0xA7	; 167
 20a:	91 e6       	ldi	r25, 0x61	; 97
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <sens_delay_ms+0x84>
 210:	00 c0       	rjmp	.+0      	; 0x212 <sens_delay_ms+0x8a>
 212:	00 00       	nop
 214:	21 c0       	rjmp	.+66     	; 0x258 <sens_delay_ms+0xd0>
						_delay_ms(100);
					}
				break;

				case MODE_MIN_SET:
					while(!(VPORTB_IN & PIN1_bm));
 216:	31 9b       	sbis	0x06, 1	; 6
 218:	fe cf       	rjmp	.-4      	; 0x216 <sens_delay_ms+0x8e>
					if(change_mode_after) {
 21a:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <change_mode_after>
 21e:	88 23       	and	r24, r24
 220:	19 f0       	breq	.+6      	; 0x228 <sens_delay_ms+0xa0>
						change_mode_after = 0;
 222:	10 92 1c 38 	sts	0x381C, r1	; 0x80381c <change_mode_after>
 226:	18 c0       	rjmp	.+48     	; 0x258 <sens_delay_ms+0xd0>
					}else{
						if(++min >= 60) {
 228:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <min>
 22c:	8f 5f       	subi	r24, 0xFF	; 255
 22e:	80 93 22 38 	sts	0x3822, r24	; 0x803822 <min>
 232:	8c 33       	cpi	r24, 0x3C	; 60
 234:	88 f0       	brcs	.+34     	; 0x258 <sens_delay_ms+0xd0>
							min = 0;
 236:	10 92 22 38 	sts	0x3822, r1	; 0x803822 <min>
							if(++hour >= 24) hour = 0;
 23a:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <hour>
 23e:	8f 5f       	subi	r24, 0xFF	; 255
 240:	80 93 21 38 	sts	0x3821, r24	; 0x803821 <hour>
 244:	88 31       	cpi	r24, 0x18	; 24
 246:	10 f0       	brcs	.+4      	; 0x24c <sens_delay_ms+0xc4>
 248:	10 92 21 38 	sts	0x3821, r1	; 0x803821 <hour>
 24c:	87 ea       	ldi	r24, 0xA7	; 167
 24e:	91 e6       	ldi	r25, 0x61	; 97
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <sens_delay_ms+0xc8>
 254:	00 c0       	rjmp	.+0      	; 0x256 <sens_delay_ms+0xce>
 256:	00 00       	nop
 258:	89 ef       	ldi	r24, 0xF9	; 249
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <sens_delay_ms+0xd4>
 260:	00 c0       	rjmp	.+0      	; 0x262 <sens_delay_ms+0xda>
 262:	00 00       	nop
}

//ボタン操作を受け付けながら待機する関数
void sens_delay_ms (uint16_t num) {

	for (unsigned int i = 0; i < num; i++){
 264:	21 96       	adiw	r28, 0x01	; 1
 266:	c0 17       	cp	r28, r16
 268:	d1 07       	cpc	r29, r17
 26a:	08 f4       	brcc	.+2      	; 0x26e <sens_delay_ms+0xe6>
 26c:	95 cf       	rjmp	.-214    	; 0x198 <sens_delay_ms+0x10>
				break;
			}
		}
		_delay_ms(1);
	}
}
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	0f 91       	pop	r16
 276:	08 95       	ret

00000278 <seg_all_off>:

//7セグをすべて消灯する関数
void seg_all_off (void) {

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	VPORTA_OUT = VPORTA_OUT & 0b00000001;
 278:	81 b1       	in	r24, 0x01	; 1
 27a:	81 70       	andi	r24, 0x01	; 1
 27c:	81 b9       	out	0x01, r24	; 1
	VPORTC_OUT = VPORTC_OUT & 0b11111110;
 27e:	89 b1       	in	r24, 0x09	; 9
 280:	8e 7f       	andi	r24, 0xFE	; 254
 282:	89 b9       	out	0x09, r24	; 9
	//ダイナミック点灯用トランジスタも全てOFF
	VPORTB_OUT = VPORTB_OUT & 0b11001111;
 284:	85 b1       	in	r24, 0x05	; 5
 286:	8f 7c       	andi	r24, 0xCF	; 207
 288:	85 b9       	out	0x05, r24	; 5
	VPORTC_OUT = VPORTC_OUT & 0b11110001;
 28a:	89 b1       	in	r24, 0x09	; 9
 28c:	81 7f       	andi	r24, 0xF1	; 241
 28e:	89 b9       	out	0x09, r24	; 9
 290:	08 95       	ret

00000292 <change_mode>:
}

//モードを切り替える関数
//引数に0を指定した場合は次の定数のモードへ 定数を指定した場合はそのモードへ
void change_mode (uint8_t cmode) {
	if(cmode) {
 292:	88 23       	and	r24, r24
 294:	19 f0       	breq	.+6      	; 0x29c <change_mode+0xa>
		mode = cmode;
 296:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <mode>
 29a:	08 95       	ret
	}else if(mode == MODE_MIN_SET) {
 29c:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <mode>
 2a0:	83 30       	cpi	r24, 0x03	; 3
 2a2:	21 f4       	brne	.+8      	; 0x2ac <change_mode+0x1a>
		mode = MODE_CLOCK;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <mode>
 2aa:	08 95       	ret
	}else{
		mode++;
 2ac:	8f 5f       	subi	r24, 0xFF	; 255
 2ae:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <mode>
 2b2:	08 95       	ret

000002b4 <__vector_10>:
	}
}

//TCA割り込み
ISR (TCA0_CMP0_vect) {
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	af 92       	push	r10
 2c0:	bf 92       	push	r11
 2c2:	cf 92       	push	r12
 2c4:	df 92       	push	r13
 2c6:	ef 92       	push	r14
 2c8:	ff 92       	push	r15
 2ca:	0f 93       	push	r16
 2cc:	1f 93       	push	r17
 2ce:	2f 93       	push	r18
 2d0:	3f 93       	push	r19
 2d2:	4f 93       	push	r20
 2d4:	5f 93       	push	r21
 2d6:	6f 93       	push	r22
 2d8:	7f 93       	push	r23
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
 2de:	af 93       	push	r26
 2e0:	bf 93       	push	r27
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	ef 93       	push	r30
 2e8:	ff 93       	push	r31

	TCA0_SINGLE_CNT = 0;//カウントリセット
 2ea:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__RODATA_PM_OFFSET__+0x7f8a20>
 2ee:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__RODATA_PM_OFFSET__+0x7f8a21>
	TCA0_SINGLE_INTFLAGS = 0b00010000; //割り込み要求フラグを解除
 2f2:	80 e1       	ldi	r24, 0x10	; 16
 2f4:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>

	//wakeupが0ならセグをすべて消灯してそれ以外を実行しない
	//メインループのseg_all_off関数とsleep_mode関数の間にこの割り込みが入り中途半端に7セグが点灯した状態でスリープするのを防ぐ記述
	if(!wakeup) {
 2f8:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <wakeup>
 2fc:	90 91 20 38 	lds	r25, 0x3820	; 0x803820 <wakeup+0x1>
 300:	89 2b       	or	r24, r25
 302:	19 f4       	brne	.+6      	; 0x30a <__vector_10+0x56>
		seg_all_off();
 304:	0e 94 3c 01 	call	0x278	; 0x278 <seg_all_off>
		return;
 308:	c7 c1       	rjmp	.+910    	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
	uint8_t dig1, dig2, dig3, dig4, dig5 = 0;
	uint8_t dig1c, dig2c, dig4c, dig5c;
	dig1c = dig2c = dig4c = dig5c = 0;

	//太陽電池の発電電圧とキャパシタの電圧を表示
	if(display_v && mode == MODE_CLOCK) {
 30a:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <display_v>
 30e:	88 23       	and	r24, r24
 310:	09 f4       	brne	.+2      	; 0x314 <__vector_10+0x60>
 312:	6f c0       	rjmp	.+222    	; 0x3f2 <__vector_10+0x13e>
 314:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <mode>
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	09 f0       	breq	.+2      	; 0x31e <__vector_10+0x6a>
 31c:	6a c0       	rjmp	.+212    	; 0x3f2 <__vector_10+0x13e>
		uint8_t spv = supply_v * 10;
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	40 e2       	ldi	r20, 0x20	; 32
 324:	51 e4       	ldi	r21, 0x41	; 65
 326:	60 91 18 38 	lds	r22, 0x3818	; 0x803818 <supply_v>
 32a:	70 91 19 38 	lds	r23, 0x3819	; 0x803819 <supply_v+0x1>
 32e:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <supply_v+0x2>
 332:	90 91 1b 38 	lds	r25, 0x381B	; 0x80381b <supply_v+0x3>
 336:	0e 94 1c 06 	call	0xc38	; 0xc38 <__mulsf3>
 33a:	0e 94 36 05 	call	0xa6c	; 0xa6c <__fixunssfsi>
 33e:	c6 2f       	mov	r28, r22
		uint8_t slv =  solar_v * 10;
 340:	20 e0       	ldi	r18, 0x00	; 0
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	40 e2       	ldi	r20, 0x20	; 32
 346:	51 e4       	ldi	r21, 0x41	; 65
 348:	60 91 14 38 	lds	r22, 0x3814	; 0x803814 <solar_v>
 34c:	70 91 15 38 	lds	r23, 0x3815	; 0x803815 <solar_v+0x1>
 350:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <solar_v+0x2>
 354:	90 91 17 38 	lds	r25, 0x3817	; 0x803817 <solar_v+0x3>
 358:	0e 94 1c 06 	call	0xc38	; 0xc38 <__mulsf3>
 35c:	0e 94 36 05 	call	0xa6c	; 0xa6c <__fixunssfsi>
		dig1  = seg[spv % 10];
 360:	8d ec       	ldi	r24, 0xCD	; 205
 362:	c8 9f       	mul	r28, r24
 364:	e1 2d       	mov	r30, r1
 366:	11 24       	eor	r1, r1
 368:	e6 95       	lsr	r30
 36a:	e6 95       	lsr	r30
 36c:	e6 95       	lsr	r30
 36e:	2e 2f       	mov	r18, r30
 370:	22 0f       	add	r18, r18
 372:	92 2f       	mov	r25, r18
 374:	99 0f       	add	r25, r25
 376:	99 0f       	add	r25, r25
 378:	92 0f       	add	r25, r18
 37a:	c9 1b       	sub	r28, r25
 37c:	ac 2f       	mov	r26, r28
 37e:	b0 e0       	ldi	r27, 0x00	; 0
 380:	ad 5f       	subi	r26, 0xFD	; 253
 382:	b7 4c       	sbci	r27, 0xC7	; 199
 384:	cc 91       	ld	r28, X
		dig2  = seg[(spv / 10) % 10];
 386:	e8 9f       	mul	r30, r24
 388:	91 2d       	mov	r25, r1
 38a:	11 24       	eor	r1, r1
 38c:	96 95       	lsr	r25
 38e:	96 95       	lsr	r25
 390:	96 95       	lsr	r25
 392:	99 0f       	add	r25, r25
 394:	29 2f       	mov	r18, r25
 396:	22 0f       	add	r18, r18
 398:	22 0f       	add	r18, r18
 39a:	92 0f       	add	r25, r18
 39c:	e9 1b       	sub	r30, r25
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	ed 5f       	subi	r30, 0xFD	; 253
 3a2:	f7 4c       	sbci	r31, 0xC7	; 199
 3a4:	d0 81       	ld	r29, Z
		dig3  = 0b00000000;
		dig4  = seg[slv % 10];
 3a6:	68 9f       	mul	r22, r24
 3a8:	e1 2d       	mov	r30, r1
 3aa:	11 24       	eor	r1, r1
 3ac:	e6 95       	lsr	r30
 3ae:	e6 95       	lsr	r30
 3b0:	e6 95       	lsr	r30
 3b2:	2e 2f       	mov	r18, r30
 3b4:	22 0f       	add	r18, r18
 3b6:	92 2f       	mov	r25, r18
 3b8:	99 0f       	add	r25, r25
 3ba:	99 0f       	add	r25, r25
 3bc:	92 0f       	add	r25, r18
 3be:	69 1b       	sub	r22, r25
 3c0:	a6 2f       	mov	r26, r22
 3c2:	b0 e0       	ldi	r27, 0x00	; 0
 3c4:	ad 5f       	subi	r26, 0xFD	; 253
 3c6:	b7 4c       	sbci	r27, 0xC7	; 199
 3c8:	1c 91       	ld	r17, X
		dig5  = seg[(slv / 10) % 10];
 3ca:	e8 9f       	mul	r30, r24
 3cc:	81 2d       	mov	r24, r1
 3ce:	11 24       	eor	r1, r1
 3d0:	86 95       	lsr	r24
 3d2:	86 95       	lsr	r24
 3d4:	86 95       	lsr	r24
 3d6:	88 0f       	add	r24, r24
 3d8:	98 2f       	mov	r25, r24
 3da:	99 0f       	add	r25, r25
 3dc:	99 0f       	add	r25, r25
 3de:	89 0f       	add	r24, r25
 3e0:	e8 1b       	sub	r30, r24
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	ed 5f       	subi	r30, 0xFD	; 253
 3e6:	f7 4c       	sbci	r31, 0xC7	; 199
 3e8:	00 81       	ld	r16, Z
		dig2c = dig5c = 0b00000001;//ドット(小数点)
 3ea:	bb 24       	eor	r11, r11
 3ec:	b3 94       	inc	r11
	if(display_v && mode == MODE_CLOCK) {
		uint8_t spv = supply_v * 10;
		uint8_t slv =  solar_v * 10;
		dig1  = seg[spv % 10];
		dig2  = seg[(spv / 10) % 10];
		dig3  = 0b00000000;
 3ee:	a1 2c       	mov	r10, r1
	uint8_t dig1, dig2, dig3, dig4, dig5 = 0;
	uint8_t dig1c, dig2c, dig4c, dig5c;
	dig1c = dig2c = dig4c = dig5c = 0;

	//太陽電池の発電電圧とキャパシタの電圧を表示
	if(display_v && mode == MODE_CLOCK) {
 3f0:	55 c0       	rjmp	.+170    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
		dig4  = seg[slv % 10];
		dig5  = seg[(slv / 10) % 10];
		dig2c = dig5c = 0b00000001;//ドット(小数点)

	}else{//時刻を表示
		dig1  = seg[min % 10];
 3f2:	c0 91 22 38 	lds	r28, 0x3822	; 0x803822 <min>
 3f6:	ed ec       	ldi	r30, 0xCD	; 205
 3f8:	ce 9f       	mul	r28, r30
 3fa:	a1 2d       	mov	r26, r1
 3fc:	11 24       	eor	r1, r1
 3fe:	a6 95       	lsr	r26
 400:	a6 95       	lsr	r26
 402:	a6 95       	lsr	r26
 404:	9a 2f       	mov	r25, r26
 406:	99 0f       	add	r25, r25
 408:	89 2f       	mov	r24, r25
 40a:	88 0f       	add	r24, r24
 40c:	88 0f       	add	r24, r24
 40e:	89 0f       	add	r24, r25
 410:	c8 1b       	sub	r28, r24
 412:	d0 e0       	ldi	r29, 0x00	; 0
 414:	cd 5f       	subi	r28, 0xFD	; 253
 416:	d7 4c       	sbci	r29, 0xC7	; 199
 418:	c8 81       	ld	r28, Y
		dig2  = seg[(min / 10) % 10];
 41a:	ae 9f       	mul	r26, r30
 41c:	81 2d       	mov	r24, r1
 41e:	11 24       	eor	r1, r1
 420:	86 95       	lsr	r24
 422:	86 95       	lsr	r24
 424:	86 95       	lsr	r24
 426:	88 0f       	add	r24, r24
 428:	98 2f       	mov	r25, r24
 42a:	99 0f       	add	r25, r25
 42c:	99 0f       	add	r25, r25
 42e:	89 0f       	add	r24, r25
 430:	a8 1b       	sub	r26, r24
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	ad 5f       	subi	r26, 0xFD	; 253
 436:	b7 4c       	sbci	r27, 0xC7	; 199
 438:	dc 91       	ld	r29, X
		dig3  = 0b00000110;
		dig4  = seg[hour % 10];
 43a:	a0 91 21 38 	lds	r26, 0x3821	; 0x803821 <hour>
 43e:	ae 9f       	mul	r26, r30
 440:	81 2d       	mov	r24, r1
 442:	11 24       	eor	r1, r1
 444:	86 95       	lsr	r24
 446:	86 95       	lsr	r24
 448:	86 95       	lsr	r24
 44a:	28 2f       	mov	r18, r24
 44c:	22 0f       	add	r18, r18
 44e:	92 2f       	mov	r25, r18
 450:	99 0f       	add	r25, r25
 452:	99 0f       	add	r25, r25
 454:	92 0f       	add	r25, r18
 456:	a9 1b       	sub	r26, r25
 458:	b0 e0       	ldi	r27, 0x00	; 0
 45a:	ad 5f       	subi	r26, 0xFD	; 253
 45c:	b7 4c       	sbci	r27, 0xC7	; 199
 45e:	1c 91       	ld	r17, X

		//dig5のみ0なら不点灯にする(ゼロサプレス)
		uint8_t zerocheck = (hour / 10) % 10;
 460:	8e 9f       	mul	r24, r30
 462:	e1 2d       	mov	r30, r1
 464:	11 24       	eor	r1, r1
 466:	e6 95       	lsr	r30
 468:	e6 95       	lsr	r30
 46a:	e6 95       	lsr	r30
 46c:	ee 0f       	add	r30, r30
 46e:	9e 2f       	mov	r25, r30
 470:	99 0f       	add	r25, r25
 472:	99 0f       	add	r25, r25
 474:	e9 0f       	add	r30, r25
 476:	8e 1b       	sub	r24, r30
		if(zerocheck == 0) {
 478:	59 f0       	breq	.+22     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
			dig5 = 0b00000000;
		}else{
			dig5   = seg[zerocheck];
 47a:	e8 2f       	mov	r30, r24
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	ed 5f       	subi	r30, 0xFD	; 253
 480:	f7 4c       	sbci	r31, 0xC7	; 199
 482:	00 81       	ld	r16, Z
	}

	static uint8_t sel = 0;
	uint8_t dig1, dig2, dig3, dig4, dig5 = 0;
	uint8_t dig1c, dig2c, dig4c, dig5c;
	dig1c = dig2c = dig4c = dig5c = 0;
 484:	b1 2c       	mov	r11, r1
		dig2c = dig5c = 0b00000001;//ドット(小数点)

	}else{//時刻を表示
		dig1  = seg[min % 10];
		dig2  = seg[(min / 10) % 10];
		dig3  = 0b00000110;
 486:	0f 2e       	mov	r0, r31
 488:	f6 e0       	ldi	r31, 0x06	; 6
 48a:	af 2e       	mov	r10, r31
 48c:	f0 2d       	mov	r31, r0
 48e:	06 c0       	rjmp	.+12     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
	}

	static uint8_t sel = 0;
	uint8_t dig1, dig2, dig3, dig4, dig5 = 0;
	uint8_t dig1c, dig2c, dig4c, dig5c;
	dig1c = dig2c = dig4c = dig5c = 0;
 490:	b1 2c       	mov	r11, r1
		dig4  = seg[hour % 10];

		//dig5のみ0なら不点灯にする(ゼロサプレス)
		uint8_t zerocheck = (hour / 10) % 10;
		if(zerocheck == 0) {
			dig5 = 0b00000000;
 492:	00 e0       	ldi	r16, 0x00	; 0
		dig2c = dig5c = 0b00000001;//ドット(小数点)

	}else{//時刻を表示
		dig1  = seg[min % 10];
		dig2  = seg[(min / 10) % 10];
		dig3  = 0b00000110;
 494:	0f 2e       	mov	r0, r31
 496:	f6 e0       	ldi	r31, 0x06	; 6
 498:	af 2e       	mov	r10, r31
 49a:	f0 2d       	mov	r31, r0
	}

	//時刻設定時の点滅演出
	//点滅カウンター
	static uint16_t wink = 0;
	if(mode == MODE_HOUR_SET) {
 49c:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <mode>
 4a0:	82 30       	cpi	r24, 0x02	; 2
 4a2:	a9 f4       	brne	.+42     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
		if(++wink < 512) dig4 = dig5 = 0b00000000;
 4a4:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <wink.3361>
 4a8:	90 91 10 38 	lds	r25, 0x3810	; 0x803810 <wink.3361+0x1>
 4ac:	01 96       	adiw	r24, 0x01	; 1
 4ae:	80 93 0f 38 	sts	0x380F, r24	; 0x80380f <wink.3361>
 4b2:	90 93 10 38 	sts	0x3810, r25	; 0x803810 <wink.3361+0x1>
 4b6:	81 15       	cp	r24, r1
 4b8:	22 e0       	ldi	r18, 0x02	; 2
 4ba:	92 07       	cpc	r25, r18
 4bc:	20 f1       	brcs	.+72     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
		else if (wink > 1023) wink = 0;
 4be:	81 15       	cp	r24, r1
 4c0:	94 40       	sbci	r25, 0x04	; 4
 4c2:	30 f1       	brcs	.+76     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 4c4:	10 92 0f 38 	sts	0x380F, r1	; 0x80380f <wink.3361>
 4c8:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <wink.3361+0x1>
 4cc:	21 c0       	rjmp	.+66     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
	}else if(mode == MODE_MIN_SET) {
 4ce:	83 30       	cpi	r24, 0x03	; 3
 4d0:	a9 f4       	brne	.+42     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
		if(++wink < 512) dig1 = dig2 = 0b00000000;
 4d2:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <wink.3361>
 4d6:	90 91 10 38 	lds	r25, 0x3810	; 0x803810 <wink.3361+0x1>
 4da:	01 96       	adiw	r24, 0x01	; 1
 4dc:	80 93 0f 38 	sts	0x380F, r24	; 0x80380f <wink.3361>
 4e0:	90 93 10 38 	sts	0x3810, r25	; 0x803810 <wink.3361+0x1>
 4e4:	81 15       	cp	r24, r1
 4e6:	22 e0       	ldi	r18, 0x02	; 2
 4e8:	92 07       	cpc	r25, r18
 4ea:	80 f0       	brcs	.+32     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
		else if (wink > 1023) wink = 0;
 4ec:	81 15       	cp	r24, r1
 4ee:	94 40       	sbci	r25, 0x04	; 4
 4f0:	78 f0       	brcs	.+30     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 4f2:	10 92 0f 38 	sts	0x380F, r1	; 0x80380f <wink.3361>
 4f6:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <wink.3361+0x1>
 4fa:	0a c0       	rjmp	.+20     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
	}else{
		wink = 0;
 4fc:	10 92 0f 38 	sts	0x380F, r1	; 0x80380f <wink.3361>
 500:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <wink.3361+0x1>
 504:	05 c0       	rjmp	.+10     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>

	//時刻設定時の点滅演出
	//点滅カウンター
	static uint16_t wink = 0;
	if(mode == MODE_HOUR_SET) {
		if(++wink < 512) dig4 = dig5 = 0b00000000;
 506:	00 e0       	ldi	r16, 0x00	; 0
 508:	10 e0       	ldi	r17, 0x00	; 0
 50a:	02 c0       	rjmp	.+4      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		else if (wink > 1023) wink = 0;
	}else if(mode == MODE_MIN_SET) {
		if(++wink < 512) dig1 = dig2 = 0b00000000;
 50c:	d0 e0       	ldi	r29, 0x00	; 0
 50e:	c0 e0       	ldi	r28, 0x00	; 0
		wink = 0;
	}


	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();
 510:	0e 94 3c 01 	call	0x278	; 0x278 <seg_all_off>

	//7セグの明るさ調整
	//太陽電池の電圧によって周囲の明るさを判定し7セグの明るさを変化させる
	if(solar_v > 1.2 || discharge) {
 514:	c0 90 14 38 	lds	r12, 0x3814	; 0x803814 <solar_v>
 518:	d0 90 15 38 	lds	r13, 0x3815	; 0x803815 <solar_v+0x1>
 51c:	e0 90 16 38 	lds	r14, 0x3816	; 0x803816 <solar_v+0x2>
 520:	f0 90 17 38 	lds	r15, 0x3817	; 0x803817 <solar_v+0x3>
 524:	2a e9       	ldi	r18, 0x9A	; 154
 526:	39 e9       	ldi	r19, 0x99	; 153
 528:	49 e9       	ldi	r20, 0x99	; 153
 52a:	5f e3       	ldi	r21, 0x3F	; 63
 52c:	c7 01       	movw	r24, r14
 52e:	b6 01       	movw	r22, r12
 530:	0e 94 17 06 	call	0xc2e	; 0xc2e <__gesf2>
 534:	18 16       	cp	r1, r24
 536:	24 f0       	brlt	.+8      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 538:	80 91 11 38 	lds	r24, 0x3811	; 0x803811 <discharge>
 53c:	88 23       	and	r24, r24
 53e:	21 f0       	breq	.+8      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
		brightness = 3;
 540:	83 e0       	ldi	r24, 0x03	; 3
 542:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 546:	11 c0       	rjmp	.+34     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
	}else if(solar_v > 0.5) {
 548:	20 e0       	ldi	r18, 0x00	; 0
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	40 e0       	ldi	r20, 0x00	; 0
 54e:	5f e3       	ldi	r21, 0x3F	; 63
 550:	c7 01       	movw	r24, r14
 552:	b6 01       	movw	r22, r12
 554:	0e 94 17 06 	call	0xc2e	; 0xc2e <__gesf2>
 558:	18 16       	cp	r1, r24
 55a:	24 f4       	brge	.+8      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
		brightness = 2;
 55c:	82 e0       	ldi	r24, 0x02	; 2
 55e:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 562:	03 c0       	rjmp	.+6      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
	}else{
		brightness = 1;
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
	}

	//点灯判定
	uint8_t seg_on = 0;
	if(++bn_pwm_count > 7) bn_pwm_count = 0;
 56a:	80 91 12 38 	lds	r24, 0x3812	; 0x803812 <bn_pwm_count>
 56e:	8f 5f       	subi	r24, 0xFF	; 255
 570:	80 93 12 38 	sts	0x3812, r24	; 0x803812 <bn_pwm_count>
 574:	88 30       	cpi	r24, 0x08	; 8
 576:	10 f0       	brcs	.+4      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 578:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <bn_pwm_count>

	if(brightness == 3) { //bn_pwm_countがいくつでも全てのタイミングで点灯
 57c:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 580:	83 30       	cpi	r24, 0x03	; 3
 582:	81 f0       	breq	.+32     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
		seg_on = 1;
	}else if(brightness == 2) {
 584:	82 30       	cpi	r24, 0x02	; 2
 586:	31 f4       	brne	.+12     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
		if(bn_pwm_count % 2) { //bn_pwm_countが1、3、5、7のタイミングで点灯
 588:	80 91 12 38 	lds	r24, 0x3812	; 0x803812 <bn_pwm_count>
 58c:	80 fd       	sbrc	r24, 0
 58e:	0c c0       	rjmp	.+24     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
	}else{
		brightness = 1;
	}

	//点灯判定
	uint8_t seg_on = 0;
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	0f c0       	rjmp	.+30     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
		seg_on = 1;
	}else if(brightness == 2) {
		if(bn_pwm_count % 2) { //bn_pwm_countが1、3、5、7のタイミングで点灯
			seg_on = 1;
		}
	}else if(brightness == 1) {
 594:	81 30       	cpi	r24, 0x01	; 1
 596:	51 f4       	brne	.+20     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
		if(!(bn_pwm_count % 4)) { //bn_pwm_countが0、4のタイミングで点灯
 598:	80 91 12 38 	lds	r24, 0x3812	; 0x803812 <bn_pwm_count>
 59c:	83 70       	andi	r24, 0x03	; 3
 59e:	41 f0       	breq	.+16     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
	}else{
		brightness = 1;
	}

	//点灯判定
	uint8_t seg_on = 0;
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	07 c0       	rjmp	.+14     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
	if(++bn_pwm_count > 7) bn_pwm_count = 0;

	if(brightness == 3) { //bn_pwm_countがいくつでも全てのタイミングで点灯
		seg_on = 1;
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	05 c0       	rjmp	.+10     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
	}else if(brightness == 2) {
		if(bn_pwm_count % 2) { //bn_pwm_countが1、3、5、7のタイミングで点灯
			seg_on = 1;
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
	}else{
		brightness = 1;
	}

	//点灯判定
	uint8_t seg_on = 0;
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	01 c0       	rjmp	.+2      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
		if(bn_pwm_count % 2) { //bn_pwm_countが1、3、5、7のタイミングで点灯
			seg_on = 1;
		}
	}else if(brightness == 1) {
		if(!(bn_pwm_count % 4)) { //bn_pwm_countが0、4のタイミングで点灯
			seg_on = 1;
 5b0:	81 e0       	ldi	r24, 0x01	; 1
		}
	}

	//点灯実行
	if(seg_on) {
 5b2:	88 23       	and	r24, r24
 5b4:	a9 f1       	breq	.+106    	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
		switch ( sel ) {
 5b6:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <__data_end>
 5ba:	82 30       	cpi	r24, 0x02	; 2
 5bc:	e1 f0       	breq	.+56     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5be:	28 f4       	brcc	.+10     	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 5c0:	88 23       	and	r24, r24
 5c2:	41 f0       	breq	.+16     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5c4:	81 30       	cpi	r24, 0x01	; 1
 5c6:	71 f0       	breq	.+28     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5c8:	2b c0       	rjmp	.+86     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
 5ca:	83 30       	cpi	r24, 0x03	; 3
 5cc:	c9 f0       	breq	.+50     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 5ce:	84 30       	cpi	r24, 0x04	; 4
 5d0:	f9 f0       	breq	.+62     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 5d2:	26 c0       	rjmp	.+76     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>

			case 0:
			VPORTB_OUT = VPORTB_OUT | 0b00010000;
 5d4:	85 b1       	in	r24, 0x05	; 5
 5d6:	80 61       	ori	r24, 0x10	; 16
 5d8:	85 b9       	out	0x05, r24	; 5
			VPORTA_OUT = dig1;
 5da:	c1 b9       	out	0x01, r28	; 1
			VPORTC_OUT = (dig1c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 5dc:	89 b1       	in	r24, 0x09	; 9
 5de:	8e 7f       	andi	r24, 0xFE	; 254
 5e0:	89 b9       	out	0x09, r24	; 9
			break;
 5e2:	1e c0       	rjmp	.+60     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>

			case 1:
			VPORTC_OUT = VPORTC_OUT | 0b00001000;
 5e4:	89 b1       	in	r24, 0x09	; 9
 5e6:	88 60       	ori	r24, 0x08	; 8
 5e8:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig2;
 5ea:	d1 b9       	out	0x01, r29	; 1
			VPORTC_OUT = (dig2c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 5ec:	89 b1       	in	r24, 0x09	; 9
 5ee:	8e 7f       	andi	r24, 0xFE	; 254
 5f0:	b8 2a       	or	r11, r24
 5f2:	b9 b8       	out	0x09, r11	; 9
			break;
 5f4:	15 c0       	rjmp	.+42     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>

			case 2:
			VPORTB_OUT = VPORTB_OUT | 0b00100000;
 5f6:	85 b1       	in	r24, 0x05	; 5
 5f8:	80 62       	ori	r24, 0x20	; 32
 5fa:	85 b9       	out	0x05, r24	; 5
			VPORTA_OUT = dig3;
 5fc:	a1 b8       	out	0x01, r10	; 1
			break;
 5fe:	10 c0       	rjmp	.+32     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>

			case 3:
			VPORTC_OUT = VPORTC_OUT | 0b00000100;
 600:	89 b1       	in	r24, 0x09	; 9
 602:	84 60       	ori	r24, 0x04	; 4
 604:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig4;
 606:	11 b9       	out	0x01, r17	; 1
			VPORTC_OUT = (dig4c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 608:	89 b1       	in	r24, 0x09	; 9
 60a:	8e 7f       	andi	r24, 0xFE	; 254
 60c:	89 b9       	out	0x09, r24	; 9
			break;
 60e:	08 c0       	rjmp	.+16     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>

			case 4:
			VPORTC_OUT = VPORTC_OUT | 0b00000010;
 610:	89 b1       	in	r24, 0x09	; 9
 612:	82 60       	ori	r24, 0x02	; 2
 614:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig5;
 616:	01 b9       	out	0x01, r16	; 1
			VPORTC_OUT = (dig5c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 618:	89 b1       	in	r24, 0x09	; 9
 61a:	8e 7f       	andi	r24, 0xFE	; 254
 61c:	b8 2a       	or	r11, r24
 61e:	b9 b8       	out	0x09, r11	; 9
		}
	}


	//5回に1回やること
	if ( ++sel == 5 ) {
 620:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <__data_end>
 624:	8f 5f       	subi	r24, 0xFF	; 255
 626:	80 93 0e 38 	sts	0x380E, r24	; 0x80380e <__data_end>
 62a:	85 30       	cpi	r24, 0x05	; 5
 62c:	a9 f5       	brne	.+106    	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
		//selの0~5トグル動作
		sel = 0;
 62e:	10 92 0e 38 	sts	0x380E, r1	; 0x80380e <__data_end>

		//スリープへ向けwakeupを減らす
		if(wakeup) wakeup--;
 632:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <wakeup>
 636:	90 91 20 38 	lds	r25, 0x3820	; 0x803820 <wakeup+0x1>
 63a:	00 97       	sbiw	r24, 0x00	; 0
 63c:	29 f0       	breq	.+10     	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 63e:	01 97       	sbiw	r24, 0x01	; 1
 640:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 644:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>

		//電圧表示時間を減らす
		if(display_v) display_v--;
 648:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <display_v>
 64c:	88 23       	and	r24, r24
 64e:	19 f0       	breq	.+6      	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 650:	81 50       	subi	r24, 0x01	; 1
 652:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <display_v>

		//タクトスイッチが長押しされている場合、長押しカウントを加算
		if(VPORTB_IN & PIN1_bm) {
 656:	31 9b       	sbis	0x06, 1	; 6
 658:	05 c0       	rjmp	.+10     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
			long_push = 0;
 65a:	10 92 1d 38 	sts	0x381D, r1	; 0x80381d <long_push>
 65e:	10 92 1e 38 	sts	0x381E, r1	; 0x80381e <long_push+0x1>
 662:	1a c0       	rjmp	.+52     	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
		}else{
			if(++long_push > 1200) {
 664:	80 91 1d 38 	lds	r24, 0x381D	; 0x80381d <long_push>
 668:	90 91 1e 38 	lds	r25, 0x381E	; 0x80381e <long_push+0x1>
 66c:	01 96       	adiw	r24, 0x01	; 1
 66e:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <long_push>
 672:	90 93 1e 38 	sts	0x381E, r25	; 0x80381e <long_push+0x1>
 676:	81 3b       	cpi	r24, 0xB1	; 177
 678:	94 40       	sbci	r25, 0x04	; 4
 67a:	70 f0       	brcs	.+28     	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
				long_push = 0;
 67c:	10 92 1d 38 	sts	0x381D, r1	; 0x80381d <long_push>
 680:	10 92 1e 38 	sts	0x381E, r1	; 0x80381e <long_push+0x1>
				RTC_CNT = 0; //時刻設定をした後、秒数が0から始まるようにする
 684:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 688:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
				change_mode(0);
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	0e 94 49 01 	call	0x292	; 0x292 <change_mode>
				change_mode_after = 1;
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <change_mode_after>
		}
	}



}
 698:	ff 91       	pop	r31
 69a:	ef 91       	pop	r30
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	bf 91       	pop	r27
 6a2:	af 91       	pop	r26
 6a4:	9f 91       	pop	r25
 6a6:	8f 91       	pop	r24
 6a8:	7f 91       	pop	r23
 6aa:	6f 91       	pop	r22
 6ac:	5f 91       	pop	r21
 6ae:	4f 91       	pop	r20
 6b0:	3f 91       	pop	r19
 6b2:	2f 91       	pop	r18
 6b4:	1f 91       	pop	r17
 6b6:	0f 91       	pop	r16
 6b8:	ff 90       	pop	r15
 6ba:	ef 90       	pop	r14
 6bc:	df 90       	pop	r13
 6be:	cf 90       	pop	r12
 6c0:	bf 90       	pop	r11
 6c2:	af 90       	pop	r10
 6c4:	0f 90       	pop	r0
 6c6:	0f be       	out	0x3f, r0	; 63
 6c8:	0f 90       	pop	r0
 6ca:	1f 90       	pop	r1
 6cc:	18 95       	reti

000006ce <__vector_4>:

//外部割り込み PB0が変化したら 両方のエッジを検出する(片方エッジにしたいがそうするとなぜかスタンバイから復帰しない)
ISR(PORTB_PORT_vect) {
 6ce:	1f 92       	push	r1
 6d0:	0f 92       	push	r0
 6d2:	0f b6       	in	r0, 0x3f	; 63
 6d4:	0f 92       	push	r0
 6d6:	11 24       	eor	r1, r1
 6d8:	2f 93       	push	r18
 6da:	3f 93       	push	r19
 6dc:	4f 93       	push	r20
 6de:	5f 93       	push	r21
 6e0:	6f 93       	push	r22
 6e2:	7f 93       	push	r23
 6e4:	8f 93       	push	r24
 6e6:	9f 93       	push	r25
 6e8:	af 93       	push	r26
 6ea:	bf 93       	push	r27
 6ec:	ef 93       	push	r30
 6ee:	ff 93       	push	r31
	
	PORTB_INTFLAGS = PORTB_INTFLAGS | 0b00000010; //割り込み要求フラグ解除
 6f0:	e9 e2       	ldi	r30, 0x29	; 41
 6f2:	f4 e0       	ldi	r31, 0x04	; 4
 6f4:	80 81       	ld	r24, Z
 6f6:	82 60       	ori	r24, 0x02	; 2
 6f8:	80 83       	st	Z, r24

	//赤外線センサー PB0がLowに切り替わったら何もせず返す 両方のエッジを検出するようにしているので立ち下がりエッジ割り込みはここで無効にする
	if(!(VPORTB_IN & PIN0_bm)) {
 6fa:	30 9b       	sbis	0x06, 0	; 6
 6fc:	10 c0       	rjmp	.+32     	; 0x71e <__vector_4+0x50>
		return;
	}

	//赤外線センサー PB0がHighだったら一定時間起き上がらせる
	if(VPORTB_IN & PIN0_bm) {
 6fe:	30 9b       	sbis	0x06, 0	; 6
 700:	0e c0       	rjmp	.+28     	; 0x71e <__vector_4+0x50>

		wakeup = 1000;
 702:	88 ee       	ldi	r24, 0xE8	; 232
 704:	93 e0       	ldi	r25, 0x03	; 3
 706:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 70a:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>

		//起きたら一度だけ電圧測定する
		if(yet_v) {
 70e:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <yet_v>
 712:	88 23       	and	r24, r24
 714:	21 f0       	breq	.+8      	; 0x71e <__vector_4+0x50>
			yet_v = 0;
 716:	10 92 01 38 	sts	0x3801, r1	; 0x803801 <yet_v>
			get_v();
 71a:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
		}
		return;
	}

	return;
}
 71e:	ff 91       	pop	r31
 720:	ef 91       	pop	r30
 722:	bf 91       	pop	r27
 724:	af 91       	pop	r26
 726:	9f 91       	pop	r25
 728:	8f 91       	pop	r24
 72a:	7f 91       	pop	r23
 72c:	6f 91       	pop	r22
 72e:	5f 91       	pop	r21
 730:	4f 91       	pop	r20
 732:	3f 91       	pop	r19
 734:	2f 91       	pop	r18
 736:	0f 90       	pop	r0
 738:	0f be       	out	0x3f, r0	; 63
 73a:	0f 90       	pop	r0
 73c:	1f 90       	pop	r1
 73e:	18 95       	reti

00000740 <__vector_6>:

//リアルタイムクロック 比較一致割り込み
ISR(RTC_CNT_vect) {
 740:	1f 92       	push	r1
 742:	0f 92       	push	r0
 744:	0f b6       	in	r0, 0x3f	; 63
 746:	0f 92       	push	r0
 748:	11 24       	eor	r1, r1
 74a:	2f 93       	push	r18
 74c:	3f 93       	push	r19
 74e:	4f 93       	push	r20
 750:	5f 93       	push	r21
 752:	6f 93       	push	r22
 754:	7f 93       	push	r23
 756:	8f 93       	push	r24
 758:	9f 93       	push	r25
 75a:	af 93       	push	r26
 75c:	bf 93       	push	r27
 75e:	ef 93       	push	r30
 760:	ff 93       	push	r31
	RTC_CNT = 0;
 762:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 766:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
	RTC_INTFLAGS = RTC_INTFLAGS | 0b00000010;
 76a:	e3 e4       	ldi	r30, 0x43	; 67
 76c:	f1 e0       	ldi	r31, 0x01	; 1
 76e:	80 81       	ld	r24, Z
 770:	82 60       	ori	r24, 0x02	; 2
 772:	80 83       	st	Z, r24

	//時計を進める
	if (mode == MODE_CLOCK && ++min >= 60) {
 774:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <mode>
 778:	81 30       	cpi	r24, 0x01	; 1
 77a:	91 f4       	brne	.+36     	; 0x7a0 <__vector_6+0x60>
 77c:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <min>
 780:	8f 5f       	subi	r24, 0xFF	; 255
 782:	80 93 22 38 	sts	0x3822, r24	; 0x803822 <min>
 786:	8c 33       	cpi	r24, 0x3C	; 60
 788:	58 f0       	brcs	.+22     	; 0x7a0 <__vector_6+0x60>
		min = 0;
 78a:	10 92 22 38 	sts	0x3822, r1	; 0x803822 <min>
		if(++hour >= 24) hour = 0;
 78e:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <hour>
 792:	8f 5f       	subi	r24, 0xFF	; 255
 794:	80 93 21 38 	sts	0x3821, r24	; 0x803821 <hour>
 798:	88 31       	cpi	r24, 0x18	; 24
 79a:	10 f0       	brcs	.+4      	; 0x7a0 <__vector_6+0x60>
 79c:	10 92 21 38 	sts	0x3821, r1	; 0x803821 <hour>
	}
	
	//1時間に1回やる処理
	if(!min) {
 7a0:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <min>
 7a4:	81 11       	cpse	r24, r1
 7a6:	44 c0       	rjmp	.+136    	; 0x830 <__DATA_REGION_LENGTH__+0x30>

		if(!wakeup){
 7a8:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <wakeup>
 7ac:	90 91 20 38 	lds	r25, 0x3820	; 0x803820 <wakeup+0x1>
 7b0:	89 2b       	or	r24, r25
 7b2:	09 f0       	breq	.+2      	; 0x7b6 <__vector_6+0x76>
 7b4:	3d c0       	rjmp	.+122    	; 0x830 <__DATA_REGION_LENGTH__+0x30>
			get_v();
 7b6:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
			//低電圧再起動処理 起きてる時にやると一瞬7セグがちらつくので起きてない時(厳密には起きてるカウントがされていない時)にやる
			if(supply_v <= MIN_SUPPLY_V) {
 7ba:	60 91 18 38 	lds	r22, 0x3818	; 0x803818 <supply_v>
 7be:	70 91 19 38 	lds	r23, 0x3819	; 0x803819 <supply_v+0x1>
 7c2:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <supply_v+0x2>
 7c6:	90 91 1b 38 	lds	r25, 0x381B	; 0x80381b <supply_v+0x3>
 7ca:	2a e9       	ldi	r18, 0x9A	; 154
 7cc:	39 e9       	ldi	r19, 0x99	; 153
 7ce:	49 ed       	ldi	r20, 0xD9	; 217
 7d0:	5f e3       	ldi	r21, 0x3F	; 63
 7d2:	0e 94 bf 04 	call	0x97e	; 0x97e <__cmpsf2>
 7d6:	18 16       	cp	r1, r24
 7d8:	94 f0       	brlt	.+36     	; 0x7fe <__vector_6+0xbe>
				//停止処理
				//ウォッチドッグタイマを0.008秒で起動
				wdt_enable(0b00000001);//0.008秒の場合、右4桁をデータシート上の8CLKのレジスタ設定値にする
 7da:	88 ed       	ldi	r24, 0xD8	; 216
 7dc:	a8 95       	wdr
 7de:	84 bf       	out	0x34, r24	; 52
 7e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
 7e4:	81 60       	ori	r24, 0x01	; 1
 7e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
 7ea:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__RODATA_PM_OFFSET__+0x7f8101>
 7ee:	81 fd       	sbrc	r24, 1
 7f0:	fc cf       	rjmp	.-8      	; 0x7ea <__vector_6+0xaa>
 7f2:	87 ea       	ldi	r24, 0xA7	; 167
 7f4:	91 e6       	ldi	r25, 0x61	; 97
 7f6:	01 97       	sbiw	r24, 0x01	; 1
 7f8:	f1 f7       	brne	.-4      	; 0x7f6 <__vector_6+0xb6>
 7fa:	00 c0       	rjmp	.+0      	; 0x7fc <__vector_6+0xbc>
 7fc:	00 00       	nop
				//待機(しているあいだにウォッチドッグリセットがかかる)
				_delay_ms(100);
			}
			//高電圧放電処理
			if(supply_v >= MAX_SUPPLY_V) {
 7fe:	60 91 18 38 	lds	r22, 0x3818	; 0x803818 <supply_v>
 802:	70 91 19 38 	lds	r23, 0x3819	; 0x803819 <supply_v+0x1>
 806:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <supply_v+0x2>
 80a:	90 91 1b 38 	lds	r25, 0x381B	; 0x80381b <supply_v+0x3>
 80e:	26 e6       	ldi	r18, 0x66	; 102
 810:	36 e6       	ldi	r19, 0x66	; 102
 812:	46 ea       	ldi	r20, 0xA6	; 166
 814:	50 e4       	ldi	r21, 0x40	; 64
 816:	0e 94 17 06 	call	0xc2e	; 0xc2e <__gesf2>
 81a:	88 23       	and	r24, r24
 81c:	4c f0       	brlt	.+18     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
				wakeup = 6400;
 81e:	80 e0       	ldi	r24, 0x00	; 0
 820:	99 e1       	ldi	r25, 0x19	; 25
 822:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 826:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>
				discharge = 1;
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <discharge>
		}

	}

	return;
}
 830:	ff 91       	pop	r31
 832:	ef 91       	pop	r30
 834:	bf 91       	pop	r27
 836:	af 91       	pop	r26
 838:	9f 91       	pop	r25
 83a:	8f 91       	pop	r24
 83c:	7f 91       	pop	r23
 83e:	6f 91       	pop	r22
 840:	5f 91       	pop	r21
 842:	4f 91       	pop	r20
 844:	3f 91       	pop	r19
 846:	2f 91       	pop	r18
 848:	0f 90       	pop	r0
 84a:	0f be       	out	0x3f, r0	; 63
 84c:	0f 90       	pop	r0
 84e:	1f 90       	pop	r1
 850:	18 95       	reti

00000852 <main>:
int main(void) {

	//■□■――――――――――――――――――――――――――――――――――――■□■
	//		□ レジスタの設定
	//■□■――――――――――――――――――――――――――――――――――――■□■
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 852:	88 ed       	ldi	r24, 0xD8	; 216
 854:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLA = 0b00000000; //16/20 MHz内部オシレータ
 856:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RODATA_PM_OFFSET__+0x7f8060>
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 85a:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLB = 0b00000111; //16分周
 85c:	97 e0       	ldi	r25, 0x07	; 7
 85e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>

	//入出力モード設定
	VPORTA_DIR = 0b11111111; //ポートA 
 862:	9f ef       	ldi	r25, 0xFF	; 255
 864:	90 b9       	out	0x00, r25	; 0
	VPORTB_DIR = 0b11111100; //ポートB 
 866:	2c ef       	ldi	r18, 0xFC	; 252
 868:	24 b9       	out	0x04, r18	; 4
	VPORTC_DIR = 0b11111111; //ポートC
 86a:	98 b9       	out	0x08, r25	; 8

	//出力の初期化
	VPORTA_OUT = 0b00000000; //ポートA
 86c:	11 b8       	out	0x01, r1	; 1
	VPORTB_OUT = 0b00000000; //ポートB
 86e:	15 b8       	out	0x05, r1	; 5
	VPORTC_OUT = 0b00000000; //ポートC
 870:	19 b8       	out	0x09, r1	; 9

	//焦電型赤外線センサー入力
	PORTB_PIN0CTRL = 0b00000001; //プルアップ無効 両方のエッジを検出する
 872:	91 e0       	ldi	r25, 0x01	; 1
 874:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <__RODATA_PM_OFFSET__+0x7f8430>

	//タクトスイッチ入力
	PORTB_PIN1CTRL = 0b00001000; //プルアップ有効
 878:	28 e0       	ldi	r18, 0x08	; 8
 87a:	20 93 31 04 	sts	0x0431, r18	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>


	
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 87e:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_XOSC32KCTRLA = 0b00000001; //外付け水晶振動子 イネーブル
 880:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__RODATA_PM_OFFSET__+0x7f807c>
	
	//RTC設定
	RTC_INTCTRL = 0b00000010; //比較一致割り込み許可
 884:	82 e0       	ldi	r24, 0x02	; 2
 886:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__RODATA_PM_OFFSET__+0x7f8142>
	RTC_CLKSEL  = 0b00000010; //クロック選択 XOSC32Kからの32.768 kHz
 88a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <__RODATA_PM_OFFSET__+0x7f8147>
	//STATUS.CTRLABUSYフラグが1の間待機
	while((RTC_STATUS & 0b00000001));
 88e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7f8141>
 892:	80 fd       	sbrc	r24, 0
 894:	fc cf       	rjmp	.-8      	; 0x88e <main+0x3c>
	RTC_CTRLA   = 0b11111001; //ｽﾀﾝﾊﾞｲ休止動作でもRTC許可 32768分周 RTC許可
 896:	89 ef       	ldi	r24, 0xF9	; 249
 898:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__RODATA_PM_OFFSET__+0x7f8140>

	//割り込みたい間隔の秒数-1
	RTC_CMP = 59;
 89c:	8b e3       	ldi	r24, 0x3B	; 59
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__RODATA_PM_OFFSET__+0x7f814c>
 8a4:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__RODATA_PM_OFFSET__+0x7f814d>
	// //RTC PIT 周期割り込み設定
	// RTC_PITCTRLA = 0b01110001; //16384分周 周期割り込み計時器許可
	// RTC_PITINTCTRL = 0b00000001; //周期割り込み許可

	//タイマーA
	TCA0_SINGLE_CTRLA = 0b00001101; //1024分周 動作許可
 8a8:	8d e0       	ldi	r24, 0x0D	; 13
 8aa:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
	TCA0_SINGLE_CTRLB = 0b00000000; //
 8ae:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
	TCA0_SINGLE_CMP0 = 1; // カウントがこの値に達したら割り込み(TCA0_CMP1_vect)が発生
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
 8ba:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__RODATA_PM_OFFSET__+0x7f8a29>
	TCA0_SINGLE_INTCTRL = 0b00010000; //CMP0割り込み許可
 8be:	80 e1       	ldi	r24, 0x10	; 16
 8c0:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__RODATA_PM_OFFSET__+0x7f8a0a>

	//ADC設定
	ADC0_CTRLA = 0b00000001; //ADC Enable
 8c4:	91 e0       	ldi	r25, 0x01	; 1
 8c6:	90 93 00 06 	sts	0x0600, r25	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
	ADC0_CTRLB = 0b00000000; //累積なし
 8ca:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <__RODATA_PM_OFFSET__+0x7f8601>
	ADC0_CTRLC = 0b01010101; //VREF = VDD, プリスケーラ1/64
 8ce:	95 e5       	ldi	r25, 0x55	; 85
 8d0:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__RODATA_PM_OFFSET__+0x7f8602>
	VREF_CTRLA = 0b00010000; //内部基準電圧 1.1V
 8d4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__RODATA_PM_OFFSET__+0x7f80a0>

	set_sleep_mode(SLEEP_MODE_STANDBY); //スリープモードを設定
 8d8:	e0 e5       	ldi	r30, 0x50	; 80
 8da:	f0 e0       	ldi	r31, 0x00	; 0
 8dc:	80 81       	ld	r24, Z
 8de:	89 7f       	andi	r24, 0xF9	; 249
 8e0:	82 60       	ori	r24, 0x02	; 2
 8e2:	80 83       	st	Z, r24
 8e4:	81 ee       	ldi	r24, 0xE1	; 225
 8e6:	94 e0       	ldi	r25, 0x04	; 4
 8e8:	01 97       	sbiw	r24, 0x01	; 1
 8ea:	f1 f7       	brne	.-4      	; 0x8e8 <main+0x96>
 8ec:	00 c0       	rjmp	.+0      	; 0x8ee <main+0x9c>
 8ee:	00 00       	nop

	//少し待機
	_delay_ms(5);

	sei(); //割り込み許可
 8f0:	78 94       	sei
 8f2:	23 c0       	rjmp	.+70     	; 0x93a <main+0xe8>
	
	while (1) {

		//放電中ループ 起き続け3秒毎に電圧を計り下がっていたらブレイク
		while (discharge) {
			get_v();
 8f4:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
			if(supply_v < (MAX_SUPPLY_V - 0.1)) {
 8f8:	60 91 18 38 	lds	r22, 0x3818	; 0x803818 <supply_v>
 8fc:	70 91 19 38 	lds	r23, 0x3819	; 0x803819 <supply_v+0x1>
 900:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <supply_v+0x2>
 904:	90 91 1b 38 	lds	r25, 0x381B	; 0x80381b <supply_v+0x3>
 908:	23 e3       	ldi	r18, 0x33	; 51
 90a:	33 e3       	ldi	r19, 0x33	; 51
 90c:	43 ea       	ldi	r20, 0xA3	; 163
 90e:	50 e4       	ldi	r21, 0x40	; 64
 910:	0e 94 bf 04 	call	0x97e	; 0x97e <__cmpsf2>
 914:	88 23       	and	r24, r24
 916:	3c f4       	brge	.+14     	; 0x926 <main+0xd4>
				discharge = 0;
 918:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <discharge>
				wakeup = 0;
 91c:	10 92 1f 38 	sts	0x381F, r1	; 0x80381f <wakeup>
 920:	10 92 20 38 	sts	0x3820, r1	; 0x803820 <wakeup+0x1>
				break;
 924:	0e c0       	rjmp	.+28     	; 0x942 <main+0xf0>
			}
			sens_delay_ms(3000);
 926:	88 eb       	ldi	r24, 0xB8	; 184
 928:	9b e0       	ldi	r25, 0x0B	; 11
 92a:	0e 94 c4 00 	call	0x188	; 0x188 <sens_delay_ms>
			wakeup = 6400;
 92e:	80 e0       	ldi	r24, 0x00	; 0
 930:	99 e1       	ldi	r25, 0x19	; 25
 932:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 936:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>
	sei(); //割り込み許可
	
	while (1) {

		//放電中ループ 起き続け3秒毎に電圧を計り下がっていたらブレイク
		while (discharge) {
 93a:	80 91 11 38 	lds	r24, 0x3811	; 0x803811 <discharge>
 93e:	81 11       	cpse	r24, r1
 940:	d9 cf       	rjmp	.-78     	; 0x8f4 <main+0xa2>
			}
			sens_delay_ms(3000);
			wakeup = 6400;
		}

		if(!wakeup) {
 942:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <wakeup>
 946:	90 91 20 38 	lds	r25, 0x3820	; 0x803820 <wakeup+0x1>
 94a:	89 2b       	or	r24, r25
 94c:	99 f4       	brne	.+38     	; 0x974 <main+0x122>
			//寝る準備
			seg_all_off();
 94e:	0e 94 3c 01 	call	0x278	; 0x278 <seg_all_off>
			change_mode(MODE_CLOCK);
 952:	81 e0       	ldi	r24, 0x01	; 1
 954:	0e 94 49 01 	call	0x292	; 0x292 <change_mode>
			display_v = 0;
 958:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <display_v>
			yet_v = 1;
 95c:	81 e0       	ldi	r24, 0x01	; 1
 95e:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <yet_v>
			//寝る
			sleep_mode();
 962:	e0 e5       	ldi	r30, 0x50	; 80
 964:	f0 e0       	ldi	r31, 0x00	; 0
 966:	80 81       	ld	r24, Z
 968:	81 60       	ori	r24, 0x01	; 1
 96a:	80 83       	st	Z, r24
 96c:	88 95       	sleep
 96e:	80 81       	ld	r24, Z
 970:	8e 7f       	andi	r24, 0xFE	; 254
 972:	80 83       	st	Z, r24
		}
		
		sens_delay_ms(5);
 974:	85 e0       	ldi	r24, 0x05	; 5
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	0e 94 c4 00 	call	0x188	; 0x188 <sens_delay_ms>

	}
 97c:	de cf       	rjmp	.-68     	; 0x93a <main+0xe8>

0000097e <__cmpsf2>:
 97e:	0e 94 a2 05 	call	0xb44	; 0xb44 <__fp_cmp>
 982:	08 f4       	brcc	.+2      	; 0x986 <__cmpsf2+0x8>
 984:	81 e0       	ldi	r24, 0x01	; 1
 986:	08 95       	ret

00000988 <__divsf3>:
 988:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__divsf3x>
 98c:	0c 94 dd 05 	jmp	0xbba	; 0xbba <__fp_round>
 990:	0e 94 d6 05 	call	0xbac	; 0xbac <__fp_pscB>
 994:	58 f0       	brcs	.+22     	; 0x9ac <__divsf3+0x24>
 996:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fp_pscA>
 99a:	40 f0       	brcs	.+16     	; 0x9ac <__divsf3+0x24>
 99c:	29 f4       	brne	.+10     	; 0x9a8 <__divsf3+0x20>
 99e:	5f 3f       	cpi	r21, 0xFF	; 255
 9a0:	29 f0       	breq	.+10     	; 0x9ac <__divsf3+0x24>
 9a2:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_inf>
 9a6:	51 11       	cpse	r21, r1
 9a8:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_szero>
 9ac:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__fp_nan>

000009b0 <__divsf3x>:
 9b0:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fp_split3>
 9b4:	68 f3       	brcs	.-38     	; 0x990 <__divsf3+0x8>

000009b6 <__divsf3_pse>:
 9b6:	99 23       	and	r25, r25
 9b8:	b1 f3       	breq	.-20     	; 0x9a6 <__divsf3+0x1e>
 9ba:	55 23       	and	r21, r21
 9bc:	91 f3       	breq	.-28     	; 0x9a2 <__divsf3+0x1a>
 9be:	95 1b       	sub	r25, r21
 9c0:	55 0b       	sbc	r21, r21
 9c2:	bb 27       	eor	r27, r27
 9c4:	aa 27       	eor	r26, r26
 9c6:	62 17       	cp	r22, r18
 9c8:	73 07       	cpc	r23, r19
 9ca:	84 07       	cpc	r24, r20
 9cc:	38 f0       	brcs	.+14     	; 0x9dc <__divsf3_pse+0x26>
 9ce:	9f 5f       	subi	r25, 0xFF	; 255
 9d0:	5f 4f       	sbci	r21, 0xFF	; 255
 9d2:	22 0f       	add	r18, r18
 9d4:	33 1f       	adc	r19, r19
 9d6:	44 1f       	adc	r20, r20
 9d8:	aa 1f       	adc	r26, r26
 9da:	a9 f3       	breq	.-22     	; 0x9c6 <__divsf3_pse+0x10>
 9dc:	35 d0       	rcall	.+106    	; 0xa48 <__divsf3_pse+0x92>
 9de:	0e 2e       	mov	r0, r30
 9e0:	3a f0       	brmi	.+14     	; 0x9f0 <__divsf3_pse+0x3a>
 9e2:	e0 e8       	ldi	r30, 0x80	; 128
 9e4:	32 d0       	rcall	.+100    	; 0xa4a <__divsf3_pse+0x94>
 9e6:	91 50       	subi	r25, 0x01	; 1
 9e8:	50 40       	sbci	r21, 0x00	; 0
 9ea:	e6 95       	lsr	r30
 9ec:	00 1c       	adc	r0, r0
 9ee:	ca f7       	brpl	.-14     	; 0x9e2 <__divsf3_pse+0x2c>
 9f0:	2b d0       	rcall	.+86     	; 0xa48 <__divsf3_pse+0x92>
 9f2:	fe 2f       	mov	r31, r30
 9f4:	29 d0       	rcall	.+82     	; 0xa48 <__divsf3_pse+0x92>
 9f6:	66 0f       	add	r22, r22
 9f8:	77 1f       	adc	r23, r23
 9fa:	88 1f       	adc	r24, r24
 9fc:	bb 1f       	adc	r27, r27
 9fe:	26 17       	cp	r18, r22
 a00:	37 07       	cpc	r19, r23
 a02:	48 07       	cpc	r20, r24
 a04:	ab 07       	cpc	r26, r27
 a06:	b0 e8       	ldi	r27, 0x80	; 128
 a08:	09 f0       	breq	.+2      	; 0xa0c <__divsf3_pse+0x56>
 a0a:	bb 0b       	sbc	r27, r27
 a0c:	80 2d       	mov	r24, r0
 a0e:	bf 01       	movw	r22, r30
 a10:	ff 27       	eor	r31, r31
 a12:	93 58       	subi	r25, 0x83	; 131
 a14:	5f 4f       	sbci	r21, 0xFF	; 255
 a16:	3a f0       	brmi	.+14     	; 0xa26 <__divsf3_pse+0x70>
 a18:	9e 3f       	cpi	r25, 0xFE	; 254
 a1a:	51 05       	cpc	r21, r1
 a1c:	78 f0       	brcs	.+30     	; 0xa3c <__divsf3_pse+0x86>
 a1e:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_inf>
 a22:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_szero>
 a26:	5f 3f       	cpi	r21, 0xFF	; 255
 a28:	e4 f3       	brlt	.-8      	; 0xa22 <__divsf3_pse+0x6c>
 a2a:	98 3e       	cpi	r25, 0xE8	; 232
 a2c:	d4 f3       	brlt	.-12     	; 0xa22 <__divsf3_pse+0x6c>
 a2e:	86 95       	lsr	r24
 a30:	77 95       	ror	r23
 a32:	67 95       	ror	r22
 a34:	b7 95       	ror	r27
 a36:	f7 95       	ror	r31
 a38:	9f 5f       	subi	r25, 0xFF	; 255
 a3a:	c9 f7       	brne	.-14     	; 0xa2e <__divsf3_pse+0x78>
 a3c:	88 0f       	add	r24, r24
 a3e:	91 1d       	adc	r25, r1
 a40:	96 95       	lsr	r25
 a42:	87 95       	ror	r24
 a44:	97 f9       	bld	r25, 7
 a46:	08 95       	ret
 a48:	e1 e0       	ldi	r30, 0x01	; 1
 a4a:	66 0f       	add	r22, r22
 a4c:	77 1f       	adc	r23, r23
 a4e:	88 1f       	adc	r24, r24
 a50:	bb 1f       	adc	r27, r27
 a52:	62 17       	cp	r22, r18
 a54:	73 07       	cpc	r23, r19
 a56:	84 07       	cpc	r24, r20
 a58:	ba 07       	cpc	r27, r26
 a5a:	20 f0       	brcs	.+8      	; 0xa64 <__divsf3_pse+0xae>
 a5c:	62 1b       	sub	r22, r18
 a5e:	73 0b       	sbc	r23, r19
 a60:	84 0b       	sbc	r24, r20
 a62:	ba 0b       	sbc	r27, r26
 a64:	ee 1f       	adc	r30, r30
 a66:	88 f7       	brcc	.-30     	; 0xa4a <__divsf3_pse+0x94>
 a68:	e0 95       	com	r30
 a6a:	08 95       	ret

00000a6c <__fixunssfsi>:
 a6c:	0e 94 f6 05 	call	0xbec	; 0xbec <__fp_splitA>
 a70:	88 f0       	brcs	.+34     	; 0xa94 <__fixunssfsi+0x28>
 a72:	9f 57       	subi	r25, 0x7F	; 127
 a74:	98 f0       	brcs	.+38     	; 0xa9c <__fixunssfsi+0x30>
 a76:	b9 2f       	mov	r27, r25
 a78:	99 27       	eor	r25, r25
 a7a:	b7 51       	subi	r27, 0x17	; 23
 a7c:	b0 f0       	brcs	.+44     	; 0xaaa <__fixunssfsi+0x3e>
 a7e:	e1 f0       	breq	.+56     	; 0xab8 <__fixunssfsi+0x4c>
 a80:	66 0f       	add	r22, r22
 a82:	77 1f       	adc	r23, r23
 a84:	88 1f       	adc	r24, r24
 a86:	99 1f       	adc	r25, r25
 a88:	1a f0       	brmi	.+6      	; 0xa90 <__fixunssfsi+0x24>
 a8a:	ba 95       	dec	r27
 a8c:	c9 f7       	brne	.-14     	; 0xa80 <__fixunssfsi+0x14>
 a8e:	14 c0       	rjmp	.+40     	; 0xab8 <__fixunssfsi+0x4c>
 a90:	b1 30       	cpi	r27, 0x01	; 1
 a92:	91 f0       	breq	.+36     	; 0xab8 <__fixunssfsi+0x4c>
 a94:	0e 94 10 06 	call	0xc20	; 0xc20 <__fp_zero>
 a98:	b1 e0       	ldi	r27, 0x01	; 1
 a9a:	08 95       	ret
 a9c:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__fp_zero>
 aa0:	67 2f       	mov	r22, r23
 aa2:	78 2f       	mov	r23, r24
 aa4:	88 27       	eor	r24, r24
 aa6:	b8 5f       	subi	r27, 0xF8	; 248
 aa8:	39 f0       	breq	.+14     	; 0xab8 <__fixunssfsi+0x4c>
 aaa:	b9 3f       	cpi	r27, 0xF9	; 249
 aac:	cc f3       	brlt	.-14     	; 0xaa0 <__fixunssfsi+0x34>
 aae:	86 95       	lsr	r24
 ab0:	77 95       	ror	r23
 ab2:	67 95       	ror	r22
 ab4:	b3 95       	inc	r27
 ab6:	d9 f7       	brne	.-10     	; 0xaae <__fixunssfsi+0x42>
 ab8:	3e f4       	brtc	.+14     	; 0xac8 <__fixunssfsi+0x5c>
 aba:	90 95       	com	r25
 abc:	80 95       	com	r24
 abe:	70 95       	com	r23
 ac0:	61 95       	neg	r22
 ac2:	7f 4f       	sbci	r23, 0xFF	; 255
 ac4:	8f 4f       	sbci	r24, 0xFF	; 255
 ac6:	9f 4f       	sbci	r25, 0xFF	; 255
 ac8:	08 95       	ret

00000aca <__floatunsisf>:
 aca:	e8 94       	clt
 acc:	09 c0       	rjmp	.+18     	; 0xae0 <__floatsisf+0x12>

00000ace <__floatsisf>:
 ace:	97 fb       	bst	r25, 7
 ad0:	3e f4       	brtc	.+14     	; 0xae0 <__floatsisf+0x12>
 ad2:	90 95       	com	r25
 ad4:	80 95       	com	r24
 ad6:	70 95       	com	r23
 ad8:	61 95       	neg	r22
 ada:	7f 4f       	sbci	r23, 0xFF	; 255
 adc:	8f 4f       	sbci	r24, 0xFF	; 255
 ade:	9f 4f       	sbci	r25, 0xFF	; 255
 ae0:	99 23       	and	r25, r25
 ae2:	a9 f0       	breq	.+42     	; 0xb0e <__floatsisf+0x40>
 ae4:	f9 2f       	mov	r31, r25
 ae6:	96 e9       	ldi	r25, 0x96	; 150
 ae8:	bb 27       	eor	r27, r27
 aea:	93 95       	inc	r25
 aec:	f6 95       	lsr	r31
 aee:	87 95       	ror	r24
 af0:	77 95       	ror	r23
 af2:	67 95       	ror	r22
 af4:	b7 95       	ror	r27
 af6:	f1 11       	cpse	r31, r1
 af8:	f8 cf       	rjmp	.-16     	; 0xaea <__floatsisf+0x1c>
 afa:	fa f4       	brpl	.+62     	; 0xb3a <__floatsisf+0x6c>
 afc:	bb 0f       	add	r27, r27
 afe:	11 f4       	brne	.+4      	; 0xb04 <__floatsisf+0x36>
 b00:	60 ff       	sbrs	r22, 0
 b02:	1b c0       	rjmp	.+54     	; 0xb3a <__floatsisf+0x6c>
 b04:	6f 5f       	subi	r22, 0xFF	; 255
 b06:	7f 4f       	sbci	r23, 0xFF	; 255
 b08:	8f 4f       	sbci	r24, 0xFF	; 255
 b0a:	9f 4f       	sbci	r25, 0xFF	; 255
 b0c:	16 c0       	rjmp	.+44     	; 0xb3a <__floatsisf+0x6c>
 b0e:	88 23       	and	r24, r24
 b10:	11 f0       	breq	.+4      	; 0xb16 <__floatsisf+0x48>
 b12:	96 e9       	ldi	r25, 0x96	; 150
 b14:	11 c0       	rjmp	.+34     	; 0xb38 <__floatsisf+0x6a>
 b16:	77 23       	and	r23, r23
 b18:	21 f0       	breq	.+8      	; 0xb22 <__floatsisf+0x54>
 b1a:	9e e8       	ldi	r25, 0x8E	; 142
 b1c:	87 2f       	mov	r24, r23
 b1e:	76 2f       	mov	r23, r22
 b20:	05 c0       	rjmp	.+10     	; 0xb2c <__floatsisf+0x5e>
 b22:	66 23       	and	r22, r22
 b24:	71 f0       	breq	.+28     	; 0xb42 <__floatsisf+0x74>
 b26:	96 e8       	ldi	r25, 0x86	; 134
 b28:	86 2f       	mov	r24, r22
 b2a:	70 e0       	ldi	r23, 0x00	; 0
 b2c:	60 e0       	ldi	r22, 0x00	; 0
 b2e:	2a f0       	brmi	.+10     	; 0xb3a <__floatsisf+0x6c>
 b30:	9a 95       	dec	r25
 b32:	66 0f       	add	r22, r22
 b34:	77 1f       	adc	r23, r23
 b36:	88 1f       	adc	r24, r24
 b38:	da f7       	brpl	.-10     	; 0xb30 <__floatsisf+0x62>
 b3a:	88 0f       	add	r24, r24
 b3c:	96 95       	lsr	r25
 b3e:	87 95       	ror	r24
 b40:	97 f9       	bld	r25, 7
 b42:	08 95       	ret

00000b44 <__fp_cmp>:
 b44:	99 0f       	add	r25, r25
 b46:	00 08       	sbc	r0, r0
 b48:	55 0f       	add	r21, r21
 b4a:	aa 0b       	sbc	r26, r26
 b4c:	e0 e8       	ldi	r30, 0x80	; 128
 b4e:	fe ef       	ldi	r31, 0xFE	; 254
 b50:	16 16       	cp	r1, r22
 b52:	17 06       	cpc	r1, r23
 b54:	e8 07       	cpc	r30, r24
 b56:	f9 07       	cpc	r31, r25
 b58:	c0 f0       	brcs	.+48     	; 0xb8a <__fp_cmp+0x46>
 b5a:	12 16       	cp	r1, r18
 b5c:	13 06       	cpc	r1, r19
 b5e:	e4 07       	cpc	r30, r20
 b60:	f5 07       	cpc	r31, r21
 b62:	98 f0       	brcs	.+38     	; 0xb8a <__fp_cmp+0x46>
 b64:	62 1b       	sub	r22, r18
 b66:	73 0b       	sbc	r23, r19
 b68:	84 0b       	sbc	r24, r20
 b6a:	95 0b       	sbc	r25, r21
 b6c:	39 f4       	brne	.+14     	; 0xb7c <__fp_cmp+0x38>
 b6e:	0a 26       	eor	r0, r26
 b70:	61 f0       	breq	.+24     	; 0xb8a <__fp_cmp+0x46>
 b72:	23 2b       	or	r18, r19
 b74:	24 2b       	or	r18, r20
 b76:	25 2b       	or	r18, r21
 b78:	21 f4       	brne	.+8      	; 0xb82 <__fp_cmp+0x3e>
 b7a:	08 95       	ret
 b7c:	0a 26       	eor	r0, r26
 b7e:	09 f4       	brne	.+2      	; 0xb82 <__fp_cmp+0x3e>
 b80:	a1 40       	sbci	r26, 0x01	; 1
 b82:	a6 95       	lsr	r26
 b84:	8f ef       	ldi	r24, 0xFF	; 255
 b86:	81 1d       	adc	r24, r1
 b88:	81 1d       	adc	r24, r1
 b8a:	08 95       	ret

00000b8c <__fp_inf>:
 b8c:	97 f9       	bld	r25, 7
 b8e:	9f 67       	ori	r25, 0x7F	; 127
 b90:	80 e8       	ldi	r24, 0x80	; 128
 b92:	70 e0       	ldi	r23, 0x00	; 0
 b94:	60 e0       	ldi	r22, 0x00	; 0
 b96:	08 95       	ret

00000b98 <__fp_nan>:
 b98:	9f ef       	ldi	r25, 0xFF	; 255
 b9a:	80 ec       	ldi	r24, 0xC0	; 192
 b9c:	08 95       	ret

00000b9e <__fp_pscA>:
 b9e:	00 24       	eor	r0, r0
 ba0:	0a 94       	dec	r0
 ba2:	16 16       	cp	r1, r22
 ba4:	17 06       	cpc	r1, r23
 ba6:	18 06       	cpc	r1, r24
 ba8:	09 06       	cpc	r0, r25
 baa:	08 95       	ret

00000bac <__fp_pscB>:
 bac:	00 24       	eor	r0, r0
 bae:	0a 94       	dec	r0
 bb0:	12 16       	cp	r1, r18
 bb2:	13 06       	cpc	r1, r19
 bb4:	14 06       	cpc	r1, r20
 bb6:	05 06       	cpc	r0, r21
 bb8:	08 95       	ret

00000bba <__fp_round>:
 bba:	09 2e       	mov	r0, r25
 bbc:	03 94       	inc	r0
 bbe:	00 0c       	add	r0, r0
 bc0:	11 f4       	brne	.+4      	; 0xbc6 <__fp_round+0xc>
 bc2:	88 23       	and	r24, r24
 bc4:	52 f0       	brmi	.+20     	; 0xbda <__fp_round+0x20>
 bc6:	bb 0f       	add	r27, r27
 bc8:	40 f4       	brcc	.+16     	; 0xbda <__fp_round+0x20>
 bca:	bf 2b       	or	r27, r31
 bcc:	11 f4       	brne	.+4      	; 0xbd2 <__fp_round+0x18>
 bce:	60 ff       	sbrs	r22, 0
 bd0:	04 c0       	rjmp	.+8      	; 0xbda <__fp_round+0x20>
 bd2:	6f 5f       	subi	r22, 0xFF	; 255
 bd4:	7f 4f       	sbci	r23, 0xFF	; 255
 bd6:	8f 4f       	sbci	r24, 0xFF	; 255
 bd8:	9f 4f       	sbci	r25, 0xFF	; 255
 bda:	08 95       	ret

00000bdc <__fp_split3>:
 bdc:	57 fd       	sbrc	r21, 7
 bde:	90 58       	subi	r25, 0x80	; 128
 be0:	44 0f       	add	r20, r20
 be2:	55 1f       	adc	r21, r21
 be4:	59 f0       	breq	.+22     	; 0xbfc <__fp_splitA+0x10>
 be6:	5f 3f       	cpi	r21, 0xFF	; 255
 be8:	71 f0       	breq	.+28     	; 0xc06 <__fp_splitA+0x1a>
 bea:	47 95       	ror	r20

00000bec <__fp_splitA>:
 bec:	88 0f       	add	r24, r24
 bee:	97 fb       	bst	r25, 7
 bf0:	99 1f       	adc	r25, r25
 bf2:	61 f0       	breq	.+24     	; 0xc0c <__fp_splitA+0x20>
 bf4:	9f 3f       	cpi	r25, 0xFF	; 255
 bf6:	79 f0       	breq	.+30     	; 0xc16 <__fp_splitA+0x2a>
 bf8:	87 95       	ror	r24
 bfa:	08 95       	ret
 bfc:	12 16       	cp	r1, r18
 bfe:	13 06       	cpc	r1, r19
 c00:	14 06       	cpc	r1, r20
 c02:	55 1f       	adc	r21, r21
 c04:	f2 cf       	rjmp	.-28     	; 0xbea <__fp_split3+0xe>
 c06:	46 95       	lsr	r20
 c08:	f1 df       	rcall	.-30     	; 0xbec <__fp_splitA>
 c0a:	08 c0       	rjmp	.+16     	; 0xc1c <__fp_splitA+0x30>
 c0c:	16 16       	cp	r1, r22
 c0e:	17 06       	cpc	r1, r23
 c10:	18 06       	cpc	r1, r24
 c12:	99 1f       	adc	r25, r25
 c14:	f1 cf       	rjmp	.-30     	; 0xbf8 <__fp_splitA+0xc>
 c16:	86 95       	lsr	r24
 c18:	71 05       	cpc	r23, r1
 c1a:	61 05       	cpc	r22, r1
 c1c:	08 94       	sec
 c1e:	08 95       	ret

00000c20 <__fp_zero>:
 c20:	e8 94       	clt

00000c22 <__fp_szero>:
 c22:	bb 27       	eor	r27, r27
 c24:	66 27       	eor	r22, r22
 c26:	77 27       	eor	r23, r23
 c28:	cb 01       	movw	r24, r22
 c2a:	97 f9       	bld	r25, 7
 c2c:	08 95       	ret

00000c2e <__gesf2>:
 c2e:	0e 94 a2 05 	call	0xb44	; 0xb44 <__fp_cmp>
 c32:	08 f4       	brcc	.+2      	; 0xc36 <__gesf2+0x8>
 c34:	8f ef       	ldi	r24, 0xFF	; 255
 c36:	08 95       	ret

00000c38 <__mulsf3>:
 c38:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__mulsf3x>
 c3c:	0c 94 dd 05 	jmp	0xbba	; 0xbba <__fp_round>
 c40:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fp_pscA>
 c44:	38 f0       	brcs	.+14     	; 0xc54 <__mulsf3+0x1c>
 c46:	0e 94 d6 05 	call	0xbac	; 0xbac <__fp_pscB>
 c4a:	20 f0       	brcs	.+8      	; 0xc54 <__mulsf3+0x1c>
 c4c:	95 23       	and	r25, r21
 c4e:	11 f0       	breq	.+4      	; 0xc54 <__mulsf3+0x1c>
 c50:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_inf>
 c54:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__fp_nan>
 c58:	11 24       	eor	r1, r1
 c5a:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_szero>

00000c5e <__mulsf3x>:
 c5e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fp_split3>
 c62:	70 f3       	brcs	.-36     	; 0xc40 <__mulsf3+0x8>

00000c64 <__mulsf3_pse>:
 c64:	95 9f       	mul	r25, r21
 c66:	c1 f3       	breq	.-16     	; 0xc58 <__mulsf3+0x20>
 c68:	95 0f       	add	r25, r21
 c6a:	50 e0       	ldi	r21, 0x00	; 0
 c6c:	55 1f       	adc	r21, r21
 c6e:	62 9f       	mul	r22, r18
 c70:	f0 01       	movw	r30, r0
 c72:	72 9f       	mul	r23, r18
 c74:	bb 27       	eor	r27, r27
 c76:	f0 0d       	add	r31, r0
 c78:	b1 1d       	adc	r27, r1
 c7a:	63 9f       	mul	r22, r19
 c7c:	aa 27       	eor	r26, r26
 c7e:	f0 0d       	add	r31, r0
 c80:	b1 1d       	adc	r27, r1
 c82:	aa 1f       	adc	r26, r26
 c84:	64 9f       	mul	r22, r20
 c86:	66 27       	eor	r22, r22
 c88:	b0 0d       	add	r27, r0
 c8a:	a1 1d       	adc	r26, r1
 c8c:	66 1f       	adc	r22, r22
 c8e:	82 9f       	mul	r24, r18
 c90:	22 27       	eor	r18, r18
 c92:	b0 0d       	add	r27, r0
 c94:	a1 1d       	adc	r26, r1
 c96:	62 1f       	adc	r22, r18
 c98:	73 9f       	mul	r23, r19
 c9a:	b0 0d       	add	r27, r0
 c9c:	a1 1d       	adc	r26, r1
 c9e:	62 1f       	adc	r22, r18
 ca0:	83 9f       	mul	r24, r19
 ca2:	a0 0d       	add	r26, r0
 ca4:	61 1d       	adc	r22, r1
 ca6:	22 1f       	adc	r18, r18
 ca8:	74 9f       	mul	r23, r20
 caa:	33 27       	eor	r19, r19
 cac:	a0 0d       	add	r26, r0
 cae:	61 1d       	adc	r22, r1
 cb0:	23 1f       	adc	r18, r19
 cb2:	84 9f       	mul	r24, r20
 cb4:	60 0d       	add	r22, r0
 cb6:	21 1d       	adc	r18, r1
 cb8:	82 2f       	mov	r24, r18
 cba:	76 2f       	mov	r23, r22
 cbc:	6a 2f       	mov	r22, r26
 cbe:	11 24       	eor	r1, r1
 cc0:	9f 57       	subi	r25, 0x7F	; 127
 cc2:	50 40       	sbci	r21, 0x00	; 0
 cc4:	9a f0       	brmi	.+38     	; 0xcec <__mulsf3_pse+0x88>
 cc6:	f1 f0       	breq	.+60     	; 0xd04 <__mulsf3_pse+0xa0>
 cc8:	88 23       	and	r24, r24
 cca:	4a f0       	brmi	.+18     	; 0xcde <__mulsf3_pse+0x7a>
 ccc:	ee 0f       	add	r30, r30
 cce:	ff 1f       	adc	r31, r31
 cd0:	bb 1f       	adc	r27, r27
 cd2:	66 1f       	adc	r22, r22
 cd4:	77 1f       	adc	r23, r23
 cd6:	88 1f       	adc	r24, r24
 cd8:	91 50       	subi	r25, 0x01	; 1
 cda:	50 40       	sbci	r21, 0x00	; 0
 cdc:	a9 f7       	brne	.-22     	; 0xcc8 <__mulsf3_pse+0x64>
 cde:	9e 3f       	cpi	r25, 0xFE	; 254
 ce0:	51 05       	cpc	r21, r1
 ce2:	80 f0       	brcs	.+32     	; 0xd04 <__mulsf3_pse+0xa0>
 ce4:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_inf>
 ce8:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_szero>
 cec:	5f 3f       	cpi	r21, 0xFF	; 255
 cee:	e4 f3       	brlt	.-8      	; 0xce8 <__mulsf3_pse+0x84>
 cf0:	98 3e       	cpi	r25, 0xE8	; 232
 cf2:	d4 f3       	brlt	.-12     	; 0xce8 <__mulsf3_pse+0x84>
 cf4:	86 95       	lsr	r24
 cf6:	77 95       	ror	r23
 cf8:	67 95       	ror	r22
 cfa:	b7 95       	ror	r27
 cfc:	f7 95       	ror	r31
 cfe:	e7 95       	ror	r30
 d00:	9f 5f       	subi	r25, 0xFF	; 255
 d02:	c1 f7       	brne	.-16     	; 0xcf4 <__mulsf3_pse+0x90>
 d04:	fe 2b       	or	r31, r30
 d06:	88 0f       	add	r24, r24
 d08:	91 1d       	adc	r25, r1
 d0a:	96 95       	lsr	r25
 d0c:	87 95       	ror	r24
 d0e:	97 f9       	bld	r25, 7
 d10:	08 95       	ret

00000d12 <_exit>:
 d12:	f8 94       	cli

00000d14 <__stop_program>:
 d14:	ff cf       	rjmp	.-2      	; 0xd14 <__stop_program>
