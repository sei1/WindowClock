
WindowClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00803800  0000078a  0000081e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000078a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00803810  00803810  0000082e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000082e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000860  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001eae  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ad4  00000000  00000000  000027a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000689  00000000  00000000  0000427a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  00004904  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d12  00000000  00000000  00004a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004dd  00000000  00000000  0000576e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00005c4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_4>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__vector_6>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_10>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
  88:	18 e3       	ldi	r17, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	ea e8       	ldi	r30, 0x8A	; 138
  90:	f7 e0       	ldi	r31, 0x07	; 7
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 31       	cpi	r26, 0x10	; 16
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	28 e3       	ldi	r18, 0x38	; 56
  a0:	a0 e1       	ldi	r26, 0x10	; 16
  a2:	b8 e3       	ldi	r27, 0x38	; 56
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	aa 31       	cpi	r26, 0x1A	; 26
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 1a 02 	call	0x434	; 0x434 <main>
  b2:	0c 94 c3 03 	jmp	0x786	; 0x786 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <get_supply_v>:
//キャパシタに蓄えられた電源電圧を取得する関数
float get_supply_v(void) {
	uint16_t x = 0;
	
	// 基準電圧1.1V / 電源電圧 を10bit(1024段階)で測定
	ADC0_MUXPOS = 0b00011101; //基準電圧
  ba:	8d e1       	ldi	r24, 0x1D	; 29
  bc:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7f8606>

	ADC0_COMMAND = 1;//AD変換開始
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
	while(ADC0_COMMAND);
  c6:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
  ca:	81 11       	cpse	r24, r1
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <get_supply_v+0xc>
	ADC0_COMMAND = 0;//AD変換終了
  ce:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>

	x = ADC0_RES;
  d2:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
  d6:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
	
	//電源電圧を算出して返す
	return 1023 * 1.1 / x;
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 35 03 	call	0x66a	; 0x66a <__floatunsisf>
  e2:	9b 01       	movw	r18, r22
  e4:	ac 01       	movw	r20, r24
  e6:	6a e9       	ldi	r22, 0x9A	; 154
  e8:	79 ea       	ldi	r23, 0xA9	; 169
  ea:	8c e8       	ldi	r24, 0x8C	; 140
  ec:	94 e4       	ldi	r25, 0x44	; 68
  ee:	0e 94 c3 02 	call	0x586	; 0x586 <__divsf3>
}
  f2:	08 95       	ret

000000f4 <seg_all_off>:

//7セグをすべて消灯する関数
void seg_all_off(void) {

	//他のセルの消灯ドットを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	VPORTA_OUT = VPORTA_OUT & 0b00000001;
  f4:	81 b1       	in	r24, 0x01	; 1
  f6:	81 70       	andi	r24, 0x01	; 1
  f8:	81 b9       	out	0x01, r24	; 1
	VPORTC_OUT = VPORTC_OUT & 0b11111110;
  fa:	89 b1       	in	r24, 0x09	; 9
  fc:	8e 7f       	andi	r24, 0xFE	; 254
  fe:	89 b9       	out	0x09, r24	; 9
	//ダイナミック点灯用トランジスタも全てOFF
	VPORTB_OUT = VPORTB_OUT & 0b11001111;
 100:	85 b1       	in	r24, 0x05	; 5
 102:	8f 7c       	andi	r24, 0xCF	; 207
 104:	85 b9       	out	0x05, r24	; 5
	VPORTC_OUT = VPORTC_OUT & 0b11110001;
 106:	89 b1       	in	r24, 0x09	; 9
 108:	81 7f       	andi	r24, 0xF1	; 241
 10a:	89 b9       	out	0x09, r24	; 9
 10c:	08 95       	ret

0000010e <change_mode>:
}

//モードを切り替える関数
//引数に0を指定した場合は次の定数のモードへ 定数を指定した場合はそのモードへ
void change_mode (uint8_t cmode) {
	if(cmode) {
 10e:	88 23       	and	r24, r24
 110:	19 f0       	breq	.+6      	; 0x118 <change_mode+0xa>
		mode = cmode;
 112:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <mode>
 116:	08 95       	ret
	}else if(mode == MODE_MIN_SET) {
 118:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <mode>
 11c:	83 30       	cpi	r24, 0x03	; 3
 11e:	21 f4       	brne	.+8      	; 0x128 <change_mode+0x1a>
		mode = MODE_CLOCK;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <mode>
 126:	08 95       	ret
	}else{
		mode++;
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <mode>
 12e:	08 95       	ret

00000130 <__vector_10>:
	}
}

//TCA割り込み
ISR (TCA0_CMP0_vect) {
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31

	//wakeupが0ならセグをすべて消灯してそれ以外を実行しない
	//メインループのseg_all_off関数とsleep_mode関数の間にこの割り込みが入り中途半端に7セグが点灯した状態でスリープするのを防ぐ記述
	if(!wakeup) {
 15a:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <wakeup>
 15e:	90 91 17 38 	lds	r25, 0x3817	; 0x803817 <wakeup+0x1>
 162:	89 2b       	or	r24, r25
 164:	19 f4       	brne	.+6      	; 0x16c <__vector_10+0x3c>
		seg_all_off();
 166:	0e 94 7a 00 	call	0xf4	; 0xf4 <seg_all_off>
		return;
 16a:	cc c0       	rjmp	.+408    	; 0x304 <__vector_10+0x1d4>
	}

	TCA0_SINGLE_CNT = 0;//カウントリセット
 16c:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__RODATA_PM_OFFSET__+0x7f8a20>
 170:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__RODATA_PM_OFFSET__+0x7f8a21>
	TCA0_SINGLE_INTFLAGS = 0b00010000; //割り込み要求フラグを解除
 174:	80 e1       	ldi	r24, 0x10	; 16
 176:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>

	static uint8_t sel = 0;
	uint8_t dig1, dig2, dig3, dig4, dig5;

	dig1   = seg[min % 10];
 17a:	c0 91 19 38 	lds	r28, 0x3819	; 0x803819 <min>
 17e:	ed ec       	ldi	r30, 0xCD	; 205
 180:	ce 9f       	mul	r28, r30
 182:	a1 2d       	mov	r26, r1
 184:	11 24       	eor	r1, r1
 186:	a6 95       	lsr	r26
 188:	a6 95       	lsr	r26
 18a:	a6 95       	lsr	r26
 18c:	9a 2f       	mov	r25, r26
 18e:	99 0f       	add	r25, r25
 190:	89 2f       	mov	r24, r25
 192:	88 0f       	add	r24, r24
 194:	88 0f       	add	r24, r24
 196:	89 0f       	add	r24, r25
 198:	c8 1b       	sub	r28, r24
 19a:	d0 e0       	ldi	r29, 0x00	; 0
 19c:	cb 5f       	subi	r28, 0xFB	; 251
 19e:	d7 4c       	sbci	r29, 0xC7	; 199
 1a0:	c8 81       	ld	r28, Y
	dig2   = seg[(min / 10) % 10];
 1a2:	ae 9f       	mul	r26, r30
 1a4:	81 2d       	mov	r24, r1
 1a6:	11 24       	eor	r1, r1
 1a8:	86 95       	lsr	r24
 1aa:	86 95       	lsr	r24
 1ac:	86 95       	lsr	r24
 1ae:	88 0f       	add	r24, r24
 1b0:	98 2f       	mov	r25, r24
 1b2:	99 0f       	add	r25, r25
 1b4:	99 0f       	add	r25, r25
 1b6:	89 0f       	add	r24, r25
 1b8:	a8 1b       	sub	r26, r24
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	ab 5f       	subi	r26, 0xFB	; 251
 1be:	b7 4c       	sbci	r27, 0xC7	; 199
 1c0:	dc 91       	ld	r29, X
	dig3   = 0b00000110;
	dig4   = seg[hour % 10];
 1c2:	a0 91 18 38 	lds	r26, 0x3818	; 0x803818 <hour>
 1c6:	ae 9f       	mul	r26, r30
 1c8:	81 2d       	mov	r24, r1
 1ca:	11 24       	eor	r1, r1
 1cc:	86 95       	lsr	r24
 1ce:	86 95       	lsr	r24
 1d0:	86 95       	lsr	r24
 1d2:	28 2f       	mov	r18, r24
 1d4:	22 0f       	add	r18, r18
 1d6:	92 2f       	mov	r25, r18
 1d8:	99 0f       	add	r25, r25
 1da:	99 0f       	add	r25, r25
 1dc:	92 0f       	add	r25, r18
 1de:	a9 1b       	sub	r26, r25
 1e0:	b0 e0       	ldi	r27, 0x00	; 0
 1e2:	ab 5f       	subi	r26, 0xFB	; 251
 1e4:	b7 4c       	sbci	r27, 0xC7	; 199
 1e6:	1c 91       	ld	r17, X

	//dig5のみ0なら不点灯にする(ゼロサプレス)
	uint8_t zerocheck = (hour / 10) % 10;
 1e8:	8e 9f       	mul	r24, r30
 1ea:	e1 2d       	mov	r30, r1
 1ec:	11 24       	eor	r1, r1
 1ee:	e6 95       	lsr	r30
 1f0:	e6 95       	lsr	r30
 1f2:	e6 95       	lsr	r30
 1f4:	ee 0f       	add	r30, r30
 1f6:	9e 2f       	mov	r25, r30
 1f8:	99 0f       	add	r25, r25
 1fa:	99 0f       	add	r25, r25
 1fc:	e9 0f       	add	r30, r25
 1fe:	8e 1b       	sub	r24, r30
	if(zerocheck == 0) {
 200:	31 f0       	breq	.+12     	; 0x20e <__vector_10+0xde>
		dig5 = 0b00000000;
	}else{
		dig5   = seg[zerocheck];
 202:	e8 2f       	mov	r30, r24
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	eb 5f       	subi	r30, 0xFB	; 251
 208:	f7 4c       	sbci	r31, 0xC7	; 199
 20a:	00 81       	ld	r16, Z
 20c:	01 c0       	rjmp	.+2      	; 0x210 <__vector_10+0xe0>
	dig4   = seg[hour % 10];

	//dig5のみ0なら不点灯にする(ゼロサプレス)
	uint8_t zerocheck = (hour / 10) % 10;
	if(zerocheck == 0) {
		dig5 = 0b00000000;
 20e:	00 e0       	ldi	r16, 0x00	; 0
	}

	//時刻設定時の点滅演出
	//点滅カウンター
	static uint8_t wink = 0;
	if(mode == MODE_HOUR_SET) {
 210:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <mode>
 214:	82 30       	cpi	r24, 0x02	; 2
 216:	41 f4       	brne	.+16     	; 0x228 <__vector_10+0xf8>
		if(++wink < 128) dig4 = dig5 = 0b00000000;
 218:	80 91 11 38 	lds	r24, 0x3811	; 0x803811 <wink.3536>
 21c:	8f 5f       	subi	r24, 0xFF	; 255
 21e:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <wink.3536>
 222:	88 23       	and	r24, r24
 224:	74 f4       	brge	.+28     	; 0x242 <__vector_10+0x112>
 226:	12 c0       	rjmp	.+36     	; 0x24c <__vector_10+0x11c>
	}else if(mode == MODE_MIN_SET) {
 228:	83 30       	cpi	r24, 0x03	; 3
 22a:	41 f4       	brne	.+16     	; 0x23c <__vector_10+0x10c>
		if(++wink < 128) dig1 = dig2 = 0b00000000;
 22c:	80 91 11 38 	lds	r24, 0x3811	; 0x803811 <wink.3536>
 230:	8f 5f       	subi	r24, 0xFF	; 255
 232:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <wink.3536>
 236:	88 23       	and	r24, r24
 238:	3c f4       	brge	.+14     	; 0x248 <__vector_10+0x118>
 23a:	08 c0       	rjmp	.+16     	; 0x24c <__vector_10+0x11c>
	}else{
		wink = 0;
 23c:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <wink.3536>
 240:	05 c0       	rjmp	.+10     	; 0x24c <__vector_10+0x11c>

	//時刻設定時の点滅演出
	//点滅カウンター
	static uint8_t wink = 0;
	if(mode == MODE_HOUR_SET) {
		if(++wink < 128) dig4 = dig5 = 0b00000000;
 242:	00 e0       	ldi	r16, 0x00	; 0
 244:	10 e0       	ldi	r17, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <__vector_10+0x11c>
	}else if(mode == MODE_MIN_SET) {
		if(++wink < 128) dig1 = dig2 = 0b00000000;
 248:	d0 e0       	ldi	r29, 0x00	; 0
 24a:	c0 e0       	ldi	r28, 0x00	; 0
		wink = 0;
	}


	//他のセルの消灯ドットを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();
 24c:	0e 94 7a 00 	call	0xf4	; 0xf4 <seg_all_off>

	switch ( sel ) {
 250:	80 91 10 38 	lds	r24, 0x3810	; 0x803810 <__data_end>
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	a9 f0       	breq	.+42     	; 0x282 <__vector_10+0x152>
 258:	28 f4       	brcc	.+10     	; 0x264 <__vector_10+0x134>
 25a:	88 23       	and	r24, r24
 25c:	41 f0       	breq	.+16     	; 0x26e <__vector_10+0x13e>
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	59 f0       	breq	.+22     	; 0x278 <__vector_10+0x148>
 262:	1e c0       	rjmp	.+60     	; 0x2a0 <__vector_10+0x170>
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	99 f0       	breq	.+38     	; 0x28e <__vector_10+0x15e>
 268:	84 30       	cpi	r24, 0x04	; 4
 26a:	b1 f0       	breq	.+44     	; 0x298 <__vector_10+0x168>
 26c:	19 c0       	rjmp	.+50     	; 0x2a0 <__vector_10+0x170>

		case 0:
		VPORTB_OUT = VPORTB_OUT | 0b00010000;
 26e:	85 b1       	in	r24, 0x05	; 5
 270:	80 61       	ori	r24, 0x10	; 16
 272:	85 b9       	out	0x05, r24	; 5
		//VPORTA_OUT = (dig1  & 0b01111111) | (PORTD & 0b10000000);//PD7に影響を与えないようマスク処理をしてPD0～6に値を代入
		VPORTA_OUT = dig1;
 274:	c1 b9       	out	0x01, r28	; 1
		break;
 276:	14 c0       	rjmp	.+40     	; 0x2a0 <__vector_10+0x170>

		case 1:
		VPORTC_OUT = VPORTC_OUT | 0b00001000;
 278:	89 b1       	in	r24, 0x09	; 9
 27a:	88 60       	ori	r24, 0x08	; 8
 27c:	89 b9       	out	0x09, r24	; 9
		VPORTA_OUT = dig2;
 27e:	d1 b9       	out	0x01, r29	; 1
		break;
 280:	0f c0       	rjmp	.+30     	; 0x2a0 <__vector_10+0x170>

		case 2:
		VPORTB_OUT = VPORTB_OUT | 0b00100000;
 282:	85 b1       	in	r24, 0x05	; 5
 284:	80 62       	ori	r24, 0x20	; 32
 286:	85 b9       	out	0x05, r24	; 5
		VPORTA_OUT = dig3;
 288:	86 e0       	ldi	r24, 0x06	; 6
 28a:	81 b9       	out	0x01, r24	; 1
		break;
 28c:	09 c0       	rjmp	.+18     	; 0x2a0 <__vector_10+0x170>

		case 3:
		VPORTC_OUT = VPORTC_OUT | 0b00000100;
 28e:	89 b1       	in	r24, 0x09	; 9
 290:	84 60       	ori	r24, 0x04	; 4
 292:	89 b9       	out	0x09, r24	; 9
		VPORTA_OUT = dig4;
 294:	11 b9       	out	0x01, r17	; 1
		break;
 296:	04 c0       	rjmp	.+8      	; 0x2a0 <__vector_10+0x170>

		case 4:
		VPORTC_OUT = VPORTC_OUT | 0b00000010;
 298:	89 b1       	in	r24, 0x09	; 9
 29a:	82 60       	ori	r24, 0x02	; 2
 29c:	89 b9       	out	0x09, r24	; 9
		VPORTA_OUT = dig5;
 29e:	01 b9       	out	0x01, r16	; 1
		break;

	}

	//5回に1回やること
	if ( ++sel == 5 ) {
 2a0:	80 91 10 38 	lds	r24, 0x3810	; 0x803810 <__data_end>
 2a4:	8f 5f       	subi	r24, 0xFF	; 255
 2a6:	80 93 10 38 	sts	0x3810, r24	; 0x803810 <__data_end>
 2aa:	85 30       	cpi	r24, 0x05	; 5
 2ac:	59 f5       	brne	.+86     	; 0x304 <__vector_10+0x1d4>
		//selの0~5トグル動作
		sel = 0;
 2ae:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <__data_end>

		//スリープへ向けwakeupを減らす
		if(wakeup) wakeup--;
 2b2:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <wakeup>
 2b6:	90 91 17 38 	lds	r25, 0x3817	; 0x803817 <wakeup+0x1>
 2ba:	00 97       	sbiw	r24, 0x00	; 0
 2bc:	29 f0       	breq	.+10     	; 0x2c8 <__vector_10+0x198>
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <wakeup>
 2c4:	90 93 17 38 	sts	0x3817, r25	; 0x803817 <wakeup+0x1>

		//タクトスイッチが長押しされている場合、長押しカウントを加算
		if(VPORTB_IN & PIN1_bm) {
 2c8:	31 9b       	sbis	0x06, 1	; 6
 2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <__vector_10+0x1a6>
			long_push = 0;
 2cc:	10 92 14 38 	sts	0x3814, r1	; 0x803814 <long_push>
 2d0:	10 92 15 38 	sts	0x3815, r1	; 0x803815 <long_push+0x1>
 2d4:	17 c0       	rjmp	.+46     	; 0x304 <__vector_10+0x1d4>
		}else{
			if(++long_push > 300) {
 2d6:	80 91 14 38 	lds	r24, 0x3814	; 0x803814 <long_push>
 2da:	90 91 15 38 	lds	r25, 0x3815	; 0x803815 <long_push+0x1>
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	80 93 14 38 	sts	0x3814, r24	; 0x803814 <long_push>
 2e4:	90 93 15 38 	sts	0x3815, r25	; 0x803815 <long_push+0x1>
 2e8:	8d 32       	cpi	r24, 0x2D	; 45
 2ea:	91 40       	sbci	r25, 0x01	; 1
 2ec:	58 f0       	brcs	.+22     	; 0x304 <__vector_10+0x1d4>
				long_push = 0;
 2ee:	10 92 14 38 	sts	0x3814, r1	; 0x803814 <long_push>
 2f2:	10 92 15 38 	sts	0x3815, r1	; 0x803815 <long_push+0x1>
				RTC_CNT = 0; //時刻設定をした後、秒数が0から始まるようにする
 2f6:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 2fa:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
				change_mode(0);
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	0e 94 87 00 	call	0x10e	; 0x10e <change_mode>
		}
	}



}
 304:	ff 91       	pop	r31
 306:	ef 91       	pop	r30
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	bf 91       	pop	r27
 30e:	af 91       	pop	r26
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	7f 91       	pop	r23
 316:	6f 91       	pop	r22
 318:	5f 91       	pop	r21
 31a:	4f 91       	pop	r20
 31c:	3f 91       	pop	r19
 31e:	2f 91       	pop	r18
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <__vector_4>:

//外部割り込み PB0が変化したら 両方のエッジを検出する(片方エッジにしたいがそうするとなぜかスタンバイから復帰しない)
ISR(PORTB_PORT_vect) {
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	0f 92       	push	r0
 336:	11 24       	eor	r1, r1
 338:	8f 93       	push	r24
 33a:	9f 93       	push	r25
 33c:	ef 93       	push	r30
 33e:	ff 93       	push	r31
	
	PORTB_INTFLAGS = PORTB_INTFLAGS | 0b00000010; //割り込み要求フラグ解除
 340:	e9 e2       	ldi	r30, 0x29	; 41
 342:	f4 e0       	ldi	r31, 0x04	; 4
 344:	80 81       	ld	r24, Z
 346:	82 60       	ori	r24, 0x02	; 2
 348:	80 83       	st	Z, r24

	//タクトスイッチが押されたら(PB1がLowだったら)
	if(!(VPORTB_IN & PIN1_bm)) {
 34a:	31 99       	sbic	0x06, 1	; 6
 34c:	15 c0       	rjmp	.+42     	; 0x378 <__vector_4+0x4a>
		
		wakeup = 1600;
 34e:	80 e4       	ldi	r24, 0x40	; 64
 350:	96 e0       	ldi	r25, 0x06	; 6
 352:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <wakeup>
 356:	90 93 17 38 	sts	0x3817, r25	; 0x803817 <wakeup+0x1>
		
		switch (mode) {
 35a:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <mode>
 35e:	82 30       	cpi	r24, 0x02	; 2
 360:	19 f0       	breq	.+6      	; 0x368 <__vector_4+0x3a>
 362:	83 30       	cpi	r24, 0x03	; 3
 364:	29 f0       	breq	.+10     	; 0x370 <__vector_4+0x42>
 366:	12 c0       	rjmp	.+36     	; 0x38c <__vector_4+0x5e>
			case MODE_CLOCK:
				
			break;

			case MODE_HOUR_SET:
				request_increment_hour = 1;
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <request_increment_hour>
			break;
 36e:	0e c0       	rjmp	.+28     	; 0x38c <__vector_4+0x5e>

			case MODE_MIN_SET:
				request_increment_min = 1;
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	80 93 12 38 	sts	0x3812, r24	; 0x803812 <request_increment_min>
			break;
 376:	0a c0       	rjmp	.+20     	; 0x38c <__vector_4+0x5e>
		
		return;
	}

	//赤外線センサー PB0がLowに切り替わったら何もせず返す 両方のエッジを検出するようにしているので立ち下がりエッジ割り込みはここで無効にする
	if(!(VPORTB_IN & PIN0_bm)) {
 378:	30 9b       	sbis	0x06, 0	; 6
 37a:	08 c0       	rjmp	.+16     	; 0x38c <__vector_4+0x5e>
		return;
	}

	//赤外線センサー PB0がHighだったら一定時間起き上がらせる
	if(VPORTB_IN & PIN0_bm) {
 37c:	30 9b       	sbis	0x06, 0	; 6
 37e:	06 c0       	rjmp	.+12     	; 0x38c <__vector_4+0x5e>
		wakeup = 800;
 380:	80 e2       	ldi	r24, 0x20	; 32
 382:	93 e0       	ldi	r25, 0x03	; 3
 384:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <wakeup>
 388:	90 93 17 38 	sts	0x3817, r25	; 0x803817 <wakeup+0x1>
		return;
	}

	return;
}
 38c:	ff 91       	pop	r31
 38e:	ef 91       	pop	r30
 390:	9f 91       	pop	r25
 392:	8f 91       	pop	r24
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <__vector_6>:

//リアルタイムクロック 比較一致割り込み
ISR(RTC_CNT_vect) {
 39e:	1f 92       	push	r1
 3a0:	0f 92       	push	r0
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	0f 92       	push	r0
 3a6:	11 24       	eor	r1, r1
 3a8:	2f 93       	push	r18
 3aa:	3f 93       	push	r19
 3ac:	4f 93       	push	r20
 3ae:	5f 93       	push	r21
 3b0:	6f 93       	push	r22
 3b2:	7f 93       	push	r23
 3b4:	8f 93       	push	r24
 3b6:	9f 93       	push	r25
 3b8:	af 93       	push	r26
 3ba:	bf 93       	push	r27
 3bc:	ef 93       	push	r30
 3be:	ff 93       	push	r31
	RTC_CNT = 0;
 3c0:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 3c4:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
	RTC_INTFLAGS = RTC_INTFLAGS | 0b00000010;
 3c8:	e3 e4       	ldi	r30, 0x43	; 67
 3ca:	f1 e0       	ldi	r31, 0x01	; 1
 3cc:	80 81       	ld	r24, Z
 3ce:	82 60       	ori	r24, 0x02	; 2
 3d0:	80 83       	st	Z, r24

	//時計を進める
	if (mode == MODE_CLOCK && ++min >= 60) {
 3d2:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <mode>
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	91 f4       	brne	.+36     	; 0x3fe <__vector_6+0x60>
 3da:	80 91 19 38 	lds	r24, 0x3819	; 0x803819 <min>
 3de:	8f 5f       	subi	r24, 0xFF	; 255
 3e0:	80 93 19 38 	sts	0x3819, r24	; 0x803819 <min>
 3e4:	8c 33       	cpi	r24, 0x3C	; 60
 3e6:	58 f0       	brcs	.+22     	; 0x3fe <__vector_6+0x60>
		min = 0;
 3e8:	10 92 19 38 	sts	0x3819, r1	; 0x803819 <min>
		if(++hour >= 24) hour = 0;
 3ec:	80 91 18 38 	lds	r24, 0x3818	; 0x803818 <hour>
 3f0:	8f 5f       	subi	r24, 0xFF	; 255
 3f2:	80 93 18 38 	sts	0x3818, r24	; 0x803818 <hour>
 3f6:	88 31       	cpi	r24, 0x18	; 24
 3f8:	10 f0       	brcs	.+4      	; 0x3fe <__vector_6+0x60>
 3fa:	10 92 18 38 	sts	0x3818, r1	; 0x803818 <hour>
	}

	//電源電圧の取得
	supply_v = get_supply_v();
 3fe:	0e 94 5d 00 	call	0xba	; 0xba <get_supply_v>
 402:	60 93 00 38 	sts	0x3800, r22	; 0x803800 <__DATA_REGION_ORIGIN__>
 406:	70 93 01 38 	sts	0x3801, r23	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
 40a:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
 40e:	90 93 03 38 	sts	0x3803, r25	; 0x803803 <__DATA_REGION_ORIGIN__+0x3>
	
	return;
}
 412:	ff 91       	pop	r31
 414:	ef 91       	pop	r30
 416:	bf 91       	pop	r27
 418:	af 91       	pop	r26
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	7f 91       	pop	r23
 420:	6f 91       	pop	r22
 422:	5f 91       	pop	r21
 424:	4f 91       	pop	r20
 426:	3f 91       	pop	r19
 428:	2f 91       	pop	r18
 42a:	0f 90       	pop	r0
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	0f 90       	pop	r0
 430:	1f 90       	pop	r1
 432:	18 95       	reti

00000434 <main>:
int main(void) {

	//■□■――――――――――――――――――――――――――――――――――――■□■
	//		□ レジスタの設定
	//■□■――――――――――――――――――――――――――――――――――――■□■
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 434:	88 ed       	ldi	r24, 0xD8	; 216
 436:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLA = 0b00000000; //16/20 MHz内部オシレータ
 438:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RODATA_PM_OFFSET__+0x7f8060>
	//CLKCTRL_MCLKCTRLA = 0b00000001; //32 KHz内部超低消費電力オシレータ
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 43c:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLB = 0b00001011; //64分周
 43e:	9b e0       	ldi	r25, 0x0B	; 11
 440:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>

	//入出力モード設定
	VPORTA_DIR = 0b11111111; //ポートA 
 444:	9f ef       	ldi	r25, 0xFF	; 255
 446:	90 b9       	out	0x00, r25	; 0
	VPORTB_DIR = 0b11111100; //ポートB 
 448:	2c ef       	ldi	r18, 0xFC	; 252
 44a:	24 b9       	out	0x04, r18	; 4
	VPORTC_DIR = 0b11111111; //ポートC
 44c:	98 b9       	out	0x08, r25	; 8

	//出力の初期化
	VPORTA_OUT = 0b00000000; //ポートA
 44e:	11 b8       	out	0x01, r1	; 1
	VPORTB_OUT = 0b00000000; //ポートB
 450:	15 b8       	out	0x05, r1	; 5
	VPORTC_OUT = 0b00000000; //ポートC
 452:	19 b8       	out	0x09, r1	; 9

	//焦電型赤外線センサー入力
	PORTB_PIN0CTRL = 0b00000001; //プルアップ無効 両方のエッジを検出する
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <__RODATA_PM_OFFSET__+0x7f8430>

	//タクトスイッチ入力
	PORTB_PIN1CTRL = 0b00001001; //プルアップ有効 両方のエッジを検出する
 45a:	29 e0       	ldi	r18, 0x09	; 9
 45c:	20 93 31 04 	sts	0x0431, r18	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>


	
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 460:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_XOSC32KCTRLA = 0b00000001; //外付け水晶振動子 イネーブル
 462:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__RODATA_PM_OFFSET__+0x7f807c>
	
	//RTC設定
	RTC_INTCTRL = 0b00000010; //比較一致割り込み許可
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__RODATA_PM_OFFSET__+0x7f8142>
	RTC_CLKSEL  = 0b00000010; //クロック選択 XOSC32Kからの32.768 kHz
 46c:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <__RODATA_PM_OFFSET__+0x7f8147>
	//STATUS.CTRLABUSYフラグが1の間待機
	while((RTC_STATUS & 0b00000001));
 470:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7f8141>
 474:	80 fd       	sbrc	r24, 0
 476:	fc cf       	rjmp	.-8      	; 0x470 <main+0x3c>
	RTC_CTRLA   = 0b11111001; //ｽﾀﾝﾊﾞｲ休止動作でもRTC許可 32768分周 RTC許可
 478:	89 ef       	ldi	r24, 0xF9	; 249
 47a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__RODATA_PM_OFFSET__+0x7f8140>

	//割り込みたい間隔の秒数-1
	RTC_CMP = 0;
 47e:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <__RODATA_PM_OFFSET__+0x7f814c>
 482:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <__RODATA_PM_OFFSET__+0x7f814d>
	// //RTC PIT 周期割り込み設定
	// RTC_PITCTRLA = 0b01110001; //16384分周 周期割り込み計時器許可
	// RTC_PITINTCTRL = 0b00000001; //周期割り込み許可

	//タイマーA
	TCA0_SINGLE_CTRLA = 0b00001101; //1024分周 動作許可
 486:	8d e0       	ldi	r24, 0x0D	; 13
 488:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
	TCA0_SINGLE_CTRLB = 0b00000000; //
 48c:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
	TCA0_SINGLE_CMP0 = 1; // カウントがこの値に達したら割り込み(TCA0_CMP1_vect)が発生
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
 498:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__RODATA_PM_OFFSET__+0x7f8a29>
	TCA0_SINGLE_INTCTRL = 0b00010000; //CMP0割り込み許可
 49c:	80 e1       	ldi	r24, 0x10	; 16
 49e:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__RODATA_PM_OFFSET__+0x7f8a0a>

	//ADC設定
	ADC0_CTRLA = 0b00000001; //ADC Enable
 4a2:	91 e0       	ldi	r25, 0x01	; 1
 4a4:	90 93 00 06 	sts	0x0600, r25	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
	ADC0_CTRLB = 0b00000000; //累積なし
 4a8:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <__RODATA_PM_OFFSET__+0x7f8601>
	ADC0_CTRLC = 0b01010101; //VREF = VDD, プリスケーラ1/64
 4ac:	95 e5       	ldi	r25, 0x55	; 85
 4ae:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__RODATA_PM_OFFSET__+0x7f8602>
	VREF_CTRLA = 0b00010000; //内部基準電圧 1.1V
 4b2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__RODATA_PM_OFFSET__+0x7f80a0>

	set_sleep_mode(SLEEP_MODE_STANDBY); //スリープモードを設定
 4b6:	e0 e5       	ldi	r30, 0x50	; 80
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	89 7f       	andi	r24, 0xF9	; 249
 4be:	82 60       	ori	r24, 0x02	; 2
 4c0:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c2:	88 e3       	ldi	r24, 0x38	; 56
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <main+0x92>
 4ca:	00 00       	nop

	//少し待機
	_delay_ms(5);

	sei(); //割り込み許可
 4cc:	78 94       	sei
	
	while (1) {

		if(!wakeup) {
 4ce:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <wakeup>
 4d2:	90 91 17 38 	lds	r25, 0x3817	; 0x803817 <wakeup+0x1>
 4d6:	89 2b       	or	r24, r25
 4d8:	71 f4       	brne	.+28     	; 0x4f6 <main+0xc2>
			seg_all_off();
 4da:	0e 94 7a 00 	call	0xf4	; 0xf4 <seg_all_off>
			change_mode(MODE_CLOCK);
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	0e 94 87 00 	call	0x10e	; 0x10e <change_mode>
			sleep_mode();
 4e4:	e0 e5       	ldi	r30, 0x50	; 80
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 81       	ld	r24, Z
 4ea:	81 60       	ori	r24, 0x01	; 1
 4ec:	80 83       	st	Z, r24
 4ee:	88 95       	sleep
 4f0:	80 81       	ld	r24, Z
 4f2:	8e 7f       	andi	r24, 0xFE	; 254
 4f4:	80 83       	st	Z, r24
		}

		//リクエスト処理
		if(request_increment_hour) {
 4f6:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <request_increment_hour>
 4fa:	88 23       	and	r24, r24
 4fc:	c9 f0       	breq	.+50     	; 0x530 <main+0xfc>
			request_increment_hour = 0;
 4fe:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <request_increment_hour>
			while(!(VPORTB_IN & PIN1_bm));
 502:	31 9b       	sbis	0x06, 1	; 6
 504:	fe cf       	rjmp	.-4      	; 0x502 <main+0xce>
			if(mode == MODE_HOUR_SET) {
 506:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <mode>
 50a:	82 30       	cpi	r24, 0x02	; 2
 50c:	89 f4       	brne	.+34     	; 0x530 <main+0xfc>
				if(++hour >= 24) hour = 0;
 50e:	80 91 18 38 	lds	r24, 0x3818	; 0x803818 <hour>
 512:	8f 5f       	subi	r24, 0xFF	; 255
 514:	80 93 18 38 	sts	0x3818, r24	; 0x803818 <hour>
 518:	88 31       	cpi	r24, 0x18	; 24
 51a:	10 f0       	brcs	.+4      	; 0x520 <main+0xec>
 51c:	10 92 18 38 	sts	0x3818, r1	; 0x803818 <hour>
 520:	89 e6       	ldi	r24, 0x69	; 105
 522:	98 e1       	ldi	r25, 0x18	; 24
 524:	01 97       	sbiw	r24, 0x01	; 1
 526:	f1 f7       	brne	.-4      	; 0x524 <main+0xf0>
 528:	00 c0       	rjmp	.+0      	; 0x52a <main+0xf6>
 52a:	00 00       	nop
				_delay_ms(100);
				request_increment_hour = 0;
 52c:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <request_increment_hour>
			}
		}

		if(request_increment_min) {
 530:	80 91 12 38 	lds	r24, 0x3812	; 0x803812 <request_increment_min>
 534:	88 23       	and	r24, r24
 536:	11 f1       	breq	.+68     	; 0x57c <main+0x148>
			request_increment_min = 0;
 538:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <request_increment_min>
			while(!(VPORTB_IN & PIN1_bm));
 53c:	31 9b       	sbis	0x06, 1	; 6
 53e:	fe cf       	rjmp	.-4      	; 0x53c <main+0x108>
			if(mode == MODE_MIN_SET) {
 540:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <mode>
 544:	83 30       	cpi	r24, 0x03	; 3
 546:	d1 f4       	brne	.+52     	; 0x57c <main+0x148>
				if(++min >= 60) {
 548:	80 91 19 38 	lds	r24, 0x3819	; 0x803819 <min>
 54c:	8f 5f       	subi	r24, 0xFF	; 255
 54e:	80 93 19 38 	sts	0x3819, r24	; 0x803819 <min>
 552:	8c 33       	cpi	r24, 0x3C	; 60
 554:	58 f0       	brcs	.+22     	; 0x56c <main+0x138>
					min = 0;
 556:	10 92 19 38 	sts	0x3819, r1	; 0x803819 <min>
					if(++hour >= 24) hour = 0;
 55a:	80 91 18 38 	lds	r24, 0x3818	; 0x803818 <hour>
 55e:	8f 5f       	subi	r24, 0xFF	; 255
 560:	80 93 18 38 	sts	0x3818, r24	; 0x803818 <hour>
 564:	88 31       	cpi	r24, 0x18	; 24
 566:	10 f0       	brcs	.+4      	; 0x56c <main+0x138>
 568:	10 92 18 38 	sts	0x3818, r1	; 0x803818 <hour>
 56c:	89 e6       	ldi	r24, 0x69	; 105
 56e:	98 e1       	ldi	r25, 0x18	; 24
 570:	01 97       	sbiw	r24, 0x01	; 1
 572:	f1 f7       	brne	.-4      	; 0x570 <main+0x13c>
 574:	00 c0       	rjmp	.+0      	; 0x576 <main+0x142>
 576:	00 00       	nop
				}
				_delay_ms(100);
				request_increment_min = 0;
 578:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <request_increment_min>
 57c:	93 e5       	ldi	r25, 0x53	; 83
 57e:	9a 95       	dec	r25
 580:	f1 f7       	brne	.-4      	; 0x57e <main+0x14a>
 582:	00 00       	nop
 584:	a4 cf       	rjmp	.-184    	; 0x4ce <main+0x9a>

00000586 <__divsf3>:
 586:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__divsf3x>
 58a:	0c 94 89 03 	jmp	0x712	; 0x712 <__fp_round>
 58e:	0e 94 82 03 	call	0x704	; 0x704 <__fp_pscB>
 592:	58 f0       	brcs	.+22     	; 0x5aa <__divsf3+0x24>
 594:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__fp_pscA>
 598:	40 f0       	brcs	.+16     	; 0x5aa <__divsf3+0x24>
 59a:	29 f4       	brne	.+10     	; 0x5a6 <__divsf3+0x20>
 59c:	5f 3f       	cpi	r21, 0xFF	; 255
 59e:	29 f0       	breq	.+10     	; 0x5aa <__divsf3+0x24>
 5a0:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__fp_inf>
 5a4:	51 11       	cpse	r21, r1
 5a6:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__fp_szero>
 5aa:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <__fp_nan>

000005ae <__divsf3x>:
 5ae:	0e 94 9a 03 	call	0x734	; 0x734 <__fp_split3>
 5b2:	68 f3       	brcs	.-38     	; 0x58e <__divsf3+0x8>

000005b4 <__divsf3_pse>:
 5b4:	99 23       	and	r25, r25
 5b6:	b1 f3       	breq	.-20     	; 0x5a4 <__divsf3+0x1e>
 5b8:	55 23       	and	r21, r21
 5ba:	91 f3       	breq	.-28     	; 0x5a0 <__divsf3+0x1a>
 5bc:	95 1b       	sub	r25, r21
 5be:	55 0b       	sbc	r21, r21
 5c0:	bb 27       	eor	r27, r27
 5c2:	aa 27       	eor	r26, r26
 5c4:	62 17       	cp	r22, r18
 5c6:	73 07       	cpc	r23, r19
 5c8:	84 07       	cpc	r24, r20
 5ca:	38 f0       	brcs	.+14     	; 0x5da <__divsf3_pse+0x26>
 5cc:	9f 5f       	subi	r25, 0xFF	; 255
 5ce:	5f 4f       	sbci	r21, 0xFF	; 255
 5d0:	22 0f       	add	r18, r18
 5d2:	33 1f       	adc	r19, r19
 5d4:	44 1f       	adc	r20, r20
 5d6:	aa 1f       	adc	r26, r26
 5d8:	a9 f3       	breq	.-22     	; 0x5c4 <__divsf3_pse+0x10>
 5da:	35 d0       	rcall	.+106    	; 0x646 <__divsf3_pse+0x92>
 5dc:	0e 2e       	mov	r0, r30
 5de:	3a f0       	brmi	.+14     	; 0x5ee <__divsf3_pse+0x3a>
 5e0:	e0 e8       	ldi	r30, 0x80	; 128
 5e2:	32 d0       	rcall	.+100    	; 0x648 <__divsf3_pse+0x94>
 5e4:	91 50       	subi	r25, 0x01	; 1
 5e6:	50 40       	sbci	r21, 0x00	; 0
 5e8:	e6 95       	lsr	r30
 5ea:	00 1c       	adc	r0, r0
 5ec:	ca f7       	brpl	.-14     	; 0x5e0 <__divsf3_pse+0x2c>
 5ee:	2b d0       	rcall	.+86     	; 0x646 <__divsf3_pse+0x92>
 5f0:	fe 2f       	mov	r31, r30
 5f2:	29 d0       	rcall	.+82     	; 0x646 <__divsf3_pse+0x92>
 5f4:	66 0f       	add	r22, r22
 5f6:	77 1f       	adc	r23, r23
 5f8:	88 1f       	adc	r24, r24
 5fa:	bb 1f       	adc	r27, r27
 5fc:	26 17       	cp	r18, r22
 5fe:	37 07       	cpc	r19, r23
 600:	48 07       	cpc	r20, r24
 602:	ab 07       	cpc	r26, r27
 604:	b0 e8       	ldi	r27, 0x80	; 128
 606:	09 f0       	breq	.+2      	; 0x60a <__divsf3_pse+0x56>
 608:	bb 0b       	sbc	r27, r27
 60a:	80 2d       	mov	r24, r0
 60c:	bf 01       	movw	r22, r30
 60e:	ff 27       	eor	r31, r31
 610:	93 58       	subi	r25, 0x83	; 131
 612:	5f 4f       	sbci	r21, 0xFF	; 255
 614:	3a f0       	brmi	.+14     	; 0x624 <__divsf3_pse+0x70>
 616:	9e 3f       	cpi	r25, 0xFE	; 254
 618:	51 05       	cpc	r21, r1
 61a:	78 f0       	brcs	.+30     	; 0x63a <__divsf3_pse+0x86>
 61c:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__fp_inf>
 620:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__fp_szero>
 624:	5f 3f       	cpi	r21, 0xFF	; 255
 626:	e4 f3       	brlt	.-8      	; 0x620 <__divsf3_pse+0x6c>
 628:	98 3e       	cpi	r25, 0xE8	; 232
 62a:	d4 f3       	brlt	.-12     	; 0x620 <__divsf3_pse+0x6c>
 62c:	86 95       	lsr	r24
 62e:	77 95       	ror	r23
 630:	67 95       	ror	r22
 632:	b7 95       	ror	r27
 634:	f7 95       	ror	r31
 636:	9f 5f       	subi	r25, 0xFF	; 255
 638:	c9 f7       	brne	.-14     	; 0x62c <__divsf3_pse+0x78>
 63a:	88 0f       	add	r24, r24
 63c:	91 1d       	adc	r25, r1
 63e:	96 95       	lsr	r25
 640:	87 95       	ror	r24
 642:	97 f9       	bld	r25, 7
 644:	08 95       	ret
 646:	e1 e0       	ldi	r30, 0x01	; 1
 648:	66 0f       	add	r22, r22
 64a:	77 1f       	adc	r23, r23
 64c:	88 1f       	adc	r24, r24
 64e:	bb 1f       	adc	r27, r27
 650:	62 17       	cp	r22, r18
 652:	73 07       	cpc	r23, r19
 654:	84 07       	cpc	r24, r20
 656:	ba 07       	cpc	r27, r26
 658:	20 f0       	brcs	.+8      	; 0x662 <__divsf3_pse+0xae>
 65a:	62 1b       	sub	r22, r18
 65c:	73 0b       	sbc	r23, r19
 65e:	84 0b       	sbc	r24, r20
 660:	ba 0b       	sbc	r27, r26
 662:	ee 1f       	adc	r30, r30
 664:	88 f7       	brcc	.-30     	; 0x648 <__divsf3_pse+0x94>
 666:	e0 95       	com	r30
 668:	08 95       	ret

0000066a <__floatunsisf>:
 66a:	e8 94       	clt
 66c:	09 c0       	rjmp	.+18     	; 0x680 <__floatsisf+0x12>

0000066e <__floatsisf>:
 66e:	97 fb       	bst	r25, 7
 670:	3e f4       	brtc	.+14     	; 0x680 <__floatsisf+0x12>
 672:	90 95       	com	r25
 674:	80 95       	com	r24
 676:	70 95       	com	r23
 678:	61 95       	neg	r22
 67a:	7f 4f       	sbci	r23, 0xFF	; 255
 67c:	8f 4f       	sbci	r24, 0xFF	; 255
 67e:	9f 4f       	sbci	r25, 0xFF	; 255
 680:	99 23       	and	r25, r25
 682:	a9 f0       	breq	.+42     	; 0x6ae <__floatsisf+0x40>
 684:	f9 2f       	mov	r31, r25
 686:	96 e9       	ldi	r25, 0x96	; 150
 688:	bb 27       	eor	r27, r27
 68a:	93 95       	inc	r25
 68c:	f6 95       	lsr	r31
 68e:	87 95       	ror	r24
 690:	77 95       	ror	r23
 692:	67 95       	ror	r22
 694:	b7 95       	ror	r27
 696:	f1 11       	cpse	r31, r1
 698:	f8 cf       	rjmp	.-16     	; 0x68a <__floatsisf+0x1c>
 69a:	fa f4       	brpl	.+62     	; 0x6da <__floatsisf+0x6c>
 69c:	bb 0f       	add	r27, r27
 69e:	11 f4       	brne	.+4      	; 0x6a4 <__floatsisf+0x36>
 6a0:	60 ff       	sbrs	r22, 0
 6a2:	1b c0       	rjmp	.+54     	; 0x6da <__floatsisf+0x6c>
 6a4:	6f 5f       	subi	r22, 0xFF	; 255
 6a6:	7f 4f       	sbci	r23, 0xFF	; 255
 6a8:	8f 4f       	sbci	r24, 0xFF	; 255
 6aa:	9f 4f       	sbci	r25, 0xFF	; 255
 6ac:	16 c0       	rjmp	.+44     	; 0x6da <__floatsisf+0x6c>
 6ae:	88 23       	and	r24, r24
 6b0:	11 f0       	breq	.+4      	; 0x6b6 <__floatsisf+0x48>
 6b2:	96 e9       	ldi	r25, 0x96	; 150
 6b4:	11 c0       	rjmp	.+34     	; 0x6d8 <__floatsisf+0x6a>
 6b6:	77 23       	and	r23, r23
 6b8:	21 f0       	breq	.+8      	; 0x6c2 <__floatsisf+0x54>
 6ba:	9e e8       	ldi	r25, 0x8E	; 142
 6bc:	87 2f       	mov	r24, r23
 6be:	76 2f       	mov	r23, r22
 6c0:	05 c0       	rjmp	.+10     	; 0x6cc <__floatsisf+0x5e>
 6c2:	66 23       	and	r22, r22
 6c4:	71 f0       	breq	.+28     	; 0x6e2 <__floatsisf+0x74>
 6c6:	96 e8       	ldi	r25, 0x86	; 134
 6c8:	86 2f       	mov	r24, r22
 6ca:	70 e0       	ldi	r23, 0x00	; 0
 6cc:	60 e0       	ldi	r22, 0x00	; 0
 6ce:	2a f0       	brmi	.+10     	; 0x6da <__floatsisf+0x6c>
 6d0:	9a 95       	dec	r25
 6d2:	66 0f       	add	r22, r22
 6d4:	77 1f       	adc	r23, r23
 6d6:	88 1f       	adc	r24, r24
 6d8:	da f7       	brpl	.-10     	; 0x6d0 <__floatsisf+0x62>
 6da:	88 0f       	add	r24, r24
 6dc:	96 95       	lsr	r25
 6de:	87 95       	ror	r24
 6e0:	97 f9       	bld	r25, 7
 6e2:	08 95       	ret

000006e4 <__fp_inf>:
 6e4:	97 f9       	bld	r25, 7
 6e6:	9f 67       	ori	r25, 0x7F	; 127
 6e8:	80 e8       	ldi	r24, 0x80	; 128
 6ea:	70 e0       	ldi	r23, 0x00	; 0
 6ec:	60 e0       	ldi	r22, 0x00	; 0
 6ee:	08 95       	ret

000006f0 <__fp_nan>:
 6f0:	9f ef       	ldi	r25, 0xFF	; 255
 6f2:	80 ec       	ldi	r24, 0xC0	; 192
 6f4:	08 95       	ret

000006f6 <__fp_pscA>:
 6f6:	00 24       	eor	r0, r0
 6f8:	0a 94       	dec	r0
 6fa:	16 16       	cp	r1, r22
 6fc:	17 06       	cpc	r1, r23
 6fe:	18 06       	cpc	r1, r24
 700:	09 06       	cpc	r0, r25
 702:	08 95       	ret

00000704 <__fp_pscB>:
 704:	00 24       	eor	r0, r0
 706:	0a 94       	dec	r0
 708:	12 16       	cp	r1, r18
 70a:	13 06       	cpc	r1, r19
 70c:	14 06       	cpc	r1, r20
 70e:	05 06       	cpc	r0, r21
 710:	08 95       	ret

00000712 <__fp_round>:
 712:	09 2e       	mov	r0, r25
 714:	03 94       	inc	r0
 716:	00 0c       	add	r0, r0
 718:	11 f4       	brne	.+4      	; 0x71e <__fp_round+0xc>
 71a:	88 23       	and	r24, r24
 71c:	52 f0       	brmi	.+20     	; 0x732 <__fp_round+0x20>
 71e:	bb 0f       	add	r27, r27
 720:	40 f4       	brcc	.+16     	; 0x732 <__fp_round+0x20>
 722:	bf 2b       	or	r27, r31
 724:	11 f4       	brne	.+4      	; 0x72a <__fp_round+0x18>
 726:	60 ff       	sbrs	r22, 0
 728:	04 c0       	rjmp	.+8      	; 0x732 <__fp_round+0x20>
 72a:	6f 5f       	subi	r22, 0xFF	; 255
 72c:	7f 4f       	sbci	r23, 0xFF	; 255
 72e:	8f 4f       	sbci	r24, 0xFF	; 255
 730:	9f 4f       	sbci	r25, 0xFF	; 255
 732:	08 95       	ret

00000734 <__fp_split3>:
 734:	57 fd       	sbrc	r21, 7
 736:	90 58       	subi	r25, 0x80	; 128
 738:	44 0f       	add	r20, r20
 73a:	55 1f       	adc	r21, r21
 73c:	59 f0       	breq	.+22     	; 0x754 <__fp_splitA+0x10>
 73e:	5f 3f       	cpi	r21, 0xFF	; 255
 740:	71 f0       	breq	.+28     	; 0x75e <__fp_splitA+0x1a>
 742:	47 95       	ror	r20

00000744 <__fp_splitA>:
 744:	88 0f       	add	r24, r24
 746:	97 fb       	bst	r25, 7
 748:	99 1f       	adc	r25, r25
 74a:	61 f0       	breq	.+24     	; 0x764 <__fp_splitA+0x20>
 74c:	9f 3f       	cpi	r25, 0xFF	; 255
 74e:	79 f0       	breq	.+30     	; 0x76e <__fp_splitA+0x2a>
 750:	87 95       	ror	r24
 752:	08 95       	ret
 754:	12 16       	cp	r1, r18
 756:	13 06       	cpc	r1, r19
 758:	14 06       	cpc	r1, r20
 75a:	55 1f       	adc	r21, r21
 75c:	f2 cf       	rjmp	.-28     	; 0x742 <__fp_split3+0xe>
 75e:	46 95       	lsr	r20
 760:	f1 df       	rcall	.-30     	; 0x744 <__fp_splitA>
 762:	08 c0       	rjmp	.+16     	; 0x774 <__fp_splitA+0x30>
 764:	16 16       	cp	r1, r22
 766:	17 06       	cpc	r1, r23
 768:	18 06       	cpc	r1, r24
 76a:	99 1f       	adc	r25, r25
 76c:	f1 cf       	rjmp	.-30     	; 0x750 <__fp_splitA+0xc>
 76e:	86 95       	lsr	r24
 770:	71 05       	cpc	r23, r1
 772:	61 05       	cpc	r22, r1
 774:	08 94       	sec
 776:	08 95       	ret

00000778 <__fp_zero>:
 778:	e8 94       	clt

0000077a <__fp_szero>:
 77a:	bb 27       	eor	r27, r27
 77c:	66 27       	eor	r22, r22
 77e:	77 27       	eor	r23, r23
 780:	cb 01       	movw	r24, r22
 782:	97 f9       	bld	r25, 7
 784:	08 95       	ret

00000786 <_exit>:
 786:	f8 94       	cli

00000788 <__stop_program>:
 788:	ff cf       	rjmp	.-2      	; 0x788 <__stop_program>
