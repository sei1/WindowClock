
WindowClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00803800  00000452  000004e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000452  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080380c  0080380c  000004f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000524  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d22  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a69  00000000  00000000  000022ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b9  00000000  00000000  00003d37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  000041f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cad  00000000  00000000  000042fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000030f  00000000  00000000  00004fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000052b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 83 01 	jmp	0x306	; 0x306 <__vector_4>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__vector_6>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_11>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
  88:	18 e3       	ldi	r17, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	e2 e5       	ldi	r30, 0x52	; 82
  90:	f4 e0       	ldi	r31, 0x04	; 4
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ac 30       	cpi	r26, 0x0C	; 12
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	28 e3       	ldi	r18, 0x38	; 56
  a0:	ac e0       	ldi	r26, 0x0C	; 12
  a2:	b8 e3       	ldi	r27, 0x38	; 56
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ae 30       	cpi	r26, 0x0E	; 14
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 c1 01 	call	0x382	; 0x382 <main>
  b2:	0c 94 27 02 	jmp	0x44e	; 0x44e <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <seg_all_off>:

//7セグをすべて消灯する関数
void seg_all_off(void) {

	//他のセルの消灯ドットを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	VPORTA_OUT = VPORTA_OUT & 0b00000001;
  ba:	81 b1       	in	r24, 0x01	; 1
  bc:	81 70       	andi	r24, 0x01	; 1
  be:	81 b9       	out	0x01, r24	; 1
	VPORTC_OUT = VPORTC_OUT & 0b11111110;
  c0:	89 b1       	in	r24, 0x09	; 9
  c2:	8e 7f       	andi	r24, 0xFE	; 254
  c4:	89 b9       	out	0x09, r24	; 9
	//ダイナミック点灯用トランジスタも全てOFF
	VPORTB_OUT = VPORTB_OUT & 0b11001111;
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	8f 7c       	andi	r24, 0xCF	; 207
  ca:	85 b9       	out	0x05, r24	; 5
	VPORTC_OUT = VPORTC_OUT & 0b11110001;
  cc:	89 b1       	in	r24, 0x09	; 9
  ce:	81 7f       	andi	r24, 0xF1	; 241
  d0:	89 b9       	out	0x09, r24	; 9
  d2:	08 95       	ret

000000d4 <__vector_11>:
}


//TCA割り込み
ISR (TCA0_CMP1_vect) {
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	4f 93       	push	r20
  e8:	5f 93       	push	r21
  ea:	6f 93       	push	r22
  ec:	7f 93       	push	r23
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	af 93       	push	r26
  f4:	bf 93       	push	r27
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31

	//wakeupが0ならセグをすべて消灯してそれ以外を実行しない
	//メインループのseg_all_off関数とsleep_mode関数の間にこの割り込みが入り中途半端に7セグが点灯した状態でスリープするのを防ぐ記述
	if(!wakeup) {
  fe:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <wakeup>
 102:	81 11       	cpse	r24, r1
 104:	03 c0       	rjmp	.+6      	; 0x10c <__EEPROM_REGION_LENGTH__+0xc>
		seg_all_off();
 106:	0e 94 5d 00 	call	0xba	; 0xba <seg_all_off>
		return;
 10a:	e8 c0       	rjmp	.+464    	; 0x2dc <__EEPROM_REGION_LENGTH__+0x1dc>
	}

	TCA0_SINGLE_CNT = 0;//カウントリセット
 10c:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__RODATA_PM_OFFSET__+0x7f8a20>
 110:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__RODATA_PM_OFFSET__+0x7f8a21>
	TCA0_SINGLE_INTFLAGS = 0b00100000; //割り込み要求フラグを解除
 114:	80 e2       	ldi	r24, 0x20	; 32
 116:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>

	static uint8_t sel = 0;
	uint8_t dig1, dig2, dig3, dig4, dig5;

	dig1   = seg[count % 10];
 11a:	40 91 00 38 	lds	r20, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 11e:	50 91 01 38 	lds	r21, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
 122:	9a 01       	movw	r18, r20
 124:	ad ec       	ldi	r26, 0xCD	; 205
 126:	bc ec       	ldi	r27, 0xCC	; 204
 128:	0e 94 18 02 	call	0x430	; 0x430 <__umulhisi3>
 12c:	96 95       	lsr	r25
 12e:	87 95       	ror	r24
 130:	96 95       	lsr	r25
 132:	87 95       	ror	r24
 134:	96 95       	lsr	r25
 136:	87 95       	ror	r24
 138:	9c 01       	movw	r18, r24
 13a:	22 0f       	add	r18, r18
 13c:	33 1f       	adc	r19, r19
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	82 0f       	add	r24, r18
 14c:	93 1f       	adc	r25, r19
 14e:	9a 01       	movw	r18, r20
 150:	28 1b       	sub	r18, r24
 152:	39 0b       	sbc	r19, r25
 154:	f9 01       	movw	r30, r18
 156:	ee 5f       	subi	r30, 0xFE	; 254
 158:	f7 4c       	sbci	r31, 0xC7	; 199
 15a:	c0 81       	ld	r28, Z
	dig2   = seg[(count / 10) % 10];
 15c:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 160:	30 91 01 38 	lds	r19, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
 164:	0e 94 18 02 	call	0x430	; 0x430 <__umulhisi3>
 168:	ac 01       	movw	r20, r24
 16a:	56 95       	lsr	r21
 16c:	47 95       	ror	r20
 16e:	56 95       	lsr	r21
 170:	47 95       	ror	r20
 172:	56 95       	lsr	r21
 174:	47 95       	ror	r20
 176:	9a 01       	movw	r18, r20
 178:	0e 94 18 02 	call	0x430	; 0x430 <__umulhisi3>
 17c:	96 95       	lsr	r25
 17e:	87 95       	ror	r24
 180:	96 95       	lsr	r25
 182:	87 95       	ror	r24
 184:	96 95       	lsr	r25
 186:	87 95       	ror	r24
 188:	9c 01       	movw	r18, r24
 18a:	22 0f       	add	r18, r18
 18c:	33 1f       	adc	r19, r19
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	82 0f       	add	r24, r18
 19c:	93 1f       	adc	r25, r19
 19e:	9a 01       	movw	r18, r20
 1a0:	28 1b       	sub	r18, r24
 1a2:	39 0b       	sbc	r19, r25
 1a4:	f9 01       	movw	r30, r18
 1a6:	ee 5f       	subi	r30, 0xFE	; 254
 1a8:	f7 4c       	sbci	r31, 0xC7	; 199
 1aa:	d0 81       	ld	r29, Z
	dig3   = 0b000000110;
	dig4   = seg[(count / 100) % 10];
 1ac:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 1b0:	30 91 01 38 	lds	r19, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
 1b4:	36 95       	lsr	r19
 1b6:	27 95       	ror	r18
 1b8:	36 95       	lsr	r19
 1ba:	27 95       	ror	r18
 1bc:	ab e7       	ldi	r26, 0x7B	; 123
 1be:	b4 e1       	ldi	r27, 0x14	; 20
 1c0:	0e 94 18 02 	call	0x430	; 0x430 <__umulhisi3>
 1c4:	ac 01       	movw	r20, r24
 1c6:	56 95       	lsr	r21
 1c8:	47 95       	ror	r20
 1ca:	9a 01       	movw	r18, r20
 1cc:	ad ec       	ldi	r26, 0xCD	; 205
 1ce:	bc ec       	ldi	r27, 0xCC	; 204
 1d0:	0e 94 18 02 	call	0x430	; 0x430 <__umulhisi3>
 1d4:	96 95       	lsr	r25
 1d6:	87 95       	ror	r24
 1d8:	96 95       	lsr	r25
 1da:	87 95       	ror	r24
 1dc:	96 95       	lsr	r25
 1de:	87 95       	ror	r24
 1e0:	9c 01       	movw	r18, r24
 1e2:	22 0f       	add	r18, r18
 1e4:	33 1f       	adc	r19, r19
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	82 0f       	add	r24, r18
 1f4:	93 1f       	adc	r25, r19
 1f6:	9a 01       	movw	r18, r20
 1f8:	28 1b       	sub	r18, r24
 1fa:	39 0b       	sbc	r19, r25
 1fc:	f9 01       	movw	r30, r18
 1fe:	ee 5f       	subi	r30, 0xFE	; 254
 200:	f7 4c       	sbci	r31, 0xC7	; 199
 202:	10 81       	ld	r17, Z
	dig5   = seg[(count / 1000) % 10];
 204:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 208:	30 91 01 38 	lds	r19, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
 20c:	36 95       	lsr	r19
 20e:	27 95       	ror	r18
 210:	36 95       	lsr	r19
 212:	27 95       	ror	r18
 214:	36 95       	lsr	r19
 216:	27 95       	ror	r18
 218:	a5 ec       	ldi	r26, 0xC5	; 197
 21a:	b0 e2       	ldi	r27, 0x20	; 32
 21c:	0e 94 18 02 	call	0x430	; 0x430 <__umulhisi3>
 220:	ac 01       	movw	r20, r24
 222:	52 95       	swap	r21
 224:	42 95       	swap	r20
 226:	4f 70       	andi	r20, 0x0F	; 15
 228:	45 27       	eor	r20, r21
 22a:	5f 70       	andi	r21, 0x0F	; 15
 22c:	45 27       	eor	r20, r21
 22e:	9a 01       	movw	r18, r20
 230:	ad ec       	ldi	r26, 0xCD	; 205
 232:	bc ec       	ldi	r27, 0xCC	; 204
 234:	0e 94 18 02 	call	0x430	; 0x430 <__umulhisi3>
 238:	96 95       	lsr	r25
 23a:	87 95       	ror	r24
 23c:	96 95       	lsr	r25
 23e:	87 95       	ror	r24
 240:	96 95       	lsr	r25
 242:	87 95       	ror	r24
 244:	9c 01       	movw	r18, r24
 246:	22 0f       	add	r18, r18
 248:	33 1f       	adc	r19, r19
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	82 0f       	add	r24, r18
 258:	93 1f       	adc	r25, r19
 25a:	9a 01       	movw	r18, r20
 25c:	28 1b       	sub	r18, r24
 25e:	39 0b       	sbc	r19, r25
 260:	f9 01       	movw	r30, r18
 262:	ee 5f       	subi	r30, 0xFE	; 254
 264:	f7 4c       	sbci	r31, 0xC7	; 199
 266:	00 81       	ld	r16, Z

	//他のセルの消灯ドットを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();
 268:	0e 94 5d 00 	call	0xba	; 0xba <seg_all_off>

	switch ( sel ) {
 26c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <__data_end>
 270:	82 30       	cpi	r24, 0x02	; 2
 272:	a9 f0       	breq	.+42     	; 0x29e <__EEPROM_REGION_LENGTH__+0x19e>
 274:	28 f4       	brcc	.+10     	; 0x280 <__EEPROM_REGION_LENGTH__+0x180>
 276:	88 23       	and	r24, r24
 278:	41 f0       	breq	.+16     	; 0x28a <__EEPROM_REGION_LENGTH__+0x18a>
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	59 f0       	breq	.+22     	; 0x294 <__EEPROM_REGION_LENGTH__+0x194>
 27e:	1e c0       	rjmp	.+60     	; 0x2bc <__EEPROM_REGION_LENGTH__+0x1bc>
 280:	83 30       	cpi	r24, 0x03	; 3
 282:	99 f0       	breq	.+38     	; 0x2aa <__EEPROM_REGION_LENGTH__+0x1aa>
 284:	84 30       	cpi	r24, 0x04	; 4
 286:	b1 f0       	breq	.+44     	; 0x2b4 <__EEPROM_REGION_LENGTH__+0x1b4>
 288:	19 c0       	rjmp	.+50     	; 0x2bc <__EEPROM_REGION_LENGTH__+0x1bc>

		case 0:
		VPORTB_OUT = VPORTB_OUT | 0b00010000;
 28a:	85 b1       	in	r24, 0x05	; 5
 28c:	80 61       	ori	r24, 0x10	; 16
 28e:	85 b9       	out	0x05, r24	; 5
		//VPORTA_OUT = (dig1  & 0b01111111) | (PORTD & 0b10000000);//PD7に影響を与えないようマスク処理をしてPD0～6に値を代入
		VPORTA_OUT = dig1;
 290:	c1 b9       	out	0x01, r28	; 1
		break;
 292:	14 c0       	rjmp	.+40     	; 0x2bc <__EEPROM_REGION_LENGTH__+0x1bc>

		case 1:
		VPORTC_OUT = VPORTC_OUT | 0b00001000;
 294:	89 b1       	in	r24, 0x09	; 9
 296:	88 60       	ori	r24, 0x08	; 8
 298:	89 b9       	out	0x09, r24	; 9
		VPORTA_OUT = dig2;
 29a:	d1 b9       	out	0x01, r29	; 1
		break;
 29c:	0f c0       	rjmp	.+30     	; 0x2bc <__EEPROM_REGION_LENGTH__+0x1bc>

		case 2:
		VPORTB_OUT = VPORTB_OUT | 0b00100000;
 29e:	85 b1       	in	r24, 0x05	; 5
 2a0:	80 62       	ori	r24, 0x20	; 32
 2a2:	85 b9       	out	0x05, r24	; 5
		VPORTA_OUT = dig3;
 2a4:	86 e0       	ldi	r24, 0x06	; 6
 2a6:	81 b9       	out	0x01, r24	; 1
		break;
 2a8:	09 c0       	rjmp	.+18     	; 0x2bc <__EEPROM_REGION_LENGTH__+0x1bc>

		case 3:
		VPORTC_OUT = VPORTC_OUT | 0b00000100;
 2aa:	89 b1       	in	r24, 0x09	; 9
 2ac:	84 60       	ori	r24, 0x04	; 4
 2ae:	89 b9       	out	0x09, r24	; 9
		VPORTA_OUT = dig4;
 2b0:	11 b9       	out	0x01, r17	; 1
		break;
 2b2:	04 c0       	rjmp	.+8      	; 0x2bc <__EEPROM_REGION_LENGTH__+0x1bc>

		case 4:
		VPORTC_OUT = VPORTC_OUT | 0b00000010;
 2b4:	89 b1       	in	r24, 0x09	; 9
 2b6:	82 60       	ori	r24, 0x02	; 2
 2b8:	89 b9       	out	0x09, r24	; 9
		VPORTA_OUT = dig5;
 2ba:	01 b9       	out	0x01, r16	; 1
		break;

	}

	//selの0~5トグル
	if ( ++sel == 5 ) {
 2bc:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <__data_end>
 2c0:	8f 5f       	subi	r24, 0xFF	; 255
 2c2:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <__data_end>
 2c6:	85 30       	cpi	r24, 0x05	; 5
 2c8:	49 f4       	brne	.+18     	; 0x2dc <__EEPROM_REGION_LENGTH__+0x1dc>
		sel = 0;
 2ca:	10 92 0c 38 	sts	0x380C, r1	; 0x80380c <__data_end>
		if(wakeup) wakeup--;
 2ce:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <wakeup>
 2d2:	88 23       	and	r24, r24
 2d4:	19 f0       	breq	.+6      	; 0x2dc <__EEPROM_REGION_LENGTH__+0x1dc>
 2d6:	81 50       	subi	r24, 0x01	; 1
 2d8:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <wakeup>
	}

}
 2dc:	ff 91       	pop	r31
 2de:	ef 91       	pop	r30
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	bf 91       	pop	r27
 2e6:	af 91       	pop	r26
 2e8:	9f 91       	pop	r25
 2ea:	8f 91       	pop	r24
 2ec:	7f 91       	pop	r23
 2ee:	6f 91       	pop	r22
 2f0:	5f 91       	pop	r21
 2f2:	4f 91       	pop	r20
 2f4:	3f 91       	pop	r19
 2f6:	2f 91       	pop	r18
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	0f 90       	pop	r0
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	0f 90       	pop	r0
 302:	1f 90       	pop	r1
 304:	18 95       	reti

00000306 <__vector_4>:

//外部割り込み PB0が変化したら 両方のエッジを検出する(片方エッジにしたいがそうするとなぜかスタンバイから復帰しない)
ISR(PORTB_PORT_vect) {
 306:	1f 92       	push	r1
 308:	0f 92       	push	r0
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	0f 92       	push	r0
 30e:	11 24       	eor	r1, r1
 310:	8f 93       	push	r24
 312:	ef 93       	push	r30
 314:	ff 93       	push	r31
	PORTB_INTFLAGS = PORTB_INTFLAGS | 0b00000010; //割り込み要求フラグ解除
 316:	e9 e2       	ldi	r30, 0x29	; 41
 318:	f4 e0       	ldi	r31, 0x04	; 4
 31a:	80 81       	ld	r24, Z
 31c:	82 60       	ori	r24, 0x02	; 2
 31e:	80 83       	st	Z, r24

	//PB0がLowだったら何もせず返す 両方のエッジを検出するようにしているので立ち下がりエッジ割り込みはここで無効にする
	if(!(VPORTB_IN & PIN0_bm)) {
 320:	30 9b       	sbis	0x06, 0	; 6
 322:	03 c0       	rjmp	.+6      	; 0x32a <__vector_4+0x24>
		return;
	}

	wakeup = 255;
 324:	8f ef       	ldi	r24, 0xFF	; 255
 326:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <wakeup>

	//VPORTA_OUT = VPORTA_OUT | 0b00001000;
	//sens_delay_ms(5000);
	//VPORTA_OUT = VPORTA_OUT & 0b11110111;
	return;
}
 32a:	ff 91       	pop	r31
 32c:	ef 91       	pop	r30
 32e:	8f 91       	pop	r24
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <__vector_6>:

//リアルタイムクロック 比較一致割り込み
ISR(RTC_CNT_vect) {
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	8f 93       	push	r24
 346:	9f 93       	push	r25
 348:	ef 93       	push	r30
 34a:	ff 93       	push	r31
	RTC_CNT = 0;
 34c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 350:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
	RTC_INTFLAGS = RTC_INTFLAGS | 0b00000010;
 354:	e3 e4       	ldi	r30, 0x43	; 67
 356:	f1 e0       	ldi	r31, 0x01	; 1
 358:	80 81       	ld	r24, Z
 35a:	82 60       	ori	r24, 0x02	; 2
 35c:	80 83       	st	Z, r24

	count++;
 35e:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 362:	90 91 01 38 	lds	r25, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 36c:	90 93 01 38 	sts	0x3801, r25	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
	// VPORTA_OUT = VPORTA_OUT | 0b00001000;
	// sens_delay_ms(1);
	// VPORTA_OUT = VPORTA_OUT & 0b11110111;
	// VPORTC_OUT = VPORTC_OUT & 0b11111101;
	return;
}
 370:	ff 91       	pop	r31
 372:	ef 91       	pop	r30
 374:	9f 91       	pop	r25
 376:	8f 91       	pop	r24
 378:	0f 90       	pop	r0
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	0f 90       	pop	r0
 37e:	1f 90       	pop	r1
 380:	18 95       	reti

00000382 <main>:
int main(void) {

	//■□■――――――――――――――――――――――――――――――――――――■□■
	//		□ レジスタの設定
	//■□■――――――――――――――――――――――――――――――――――――■□■
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 382:	88 ed       	ldi	r24, 0xD8	; 216
 384:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLA = 0b00000000; //16/20 MHz内部オシレータ
 386:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RODATA_PM_OFFSET__+0x7f8060>
	//CLKCTRL_MCLKCTRLA = 0b00000001; //32 KHz内部超低消費電力オシレータ
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 38a:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLB = 0b00001011; //64分周
 38c:	9b e0       	ldi	r25, 0x0B	; 11
 38e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>

	//入出力モード設定
	VPORTA_DIR = 0b11111111; //ポートA 
 392:	9f ef       	ldi	r25, 0xFF	; 255
 394:	90 b9       	out	0x00, r25	; 0
	VPORTB_DIR = 0b11111100; //ポートB 
 396:	2c ef       	ldi	r18, 0xFC	; 252
 398:	24 b9       	out	0x04, r18	; 4
	VPORTC_DIR = 0b11111111; //ポートC
 39a:	98 b9       	out	0x08, r25	; 8

	//出力の初期化
	VPORTA_OUT = 0b00000000; //ポートA
 39c:	11 b8       	out	0x01, r1	; 1
	VPORTB_OUT = 0b00000000; //ポートB
 39e:	15 b8       	out	0x05, r1	; 5
	VPORTC_OUT = 0b00000000; //ポートC
 3a0:	19 b8       	out	0x09, r1	; 9

	//焦電型赤外線センサー入力
	PORTB_PIN0CTRL = 0b00000001; //プルアップ無効 両方のエッジを検出する
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <__RODATA_PM_OFFSET__+0x7f8430>

	//タクトスイッチ入力
	PORTB_PIN1CTRL = 0b00001000; //プルアップ有効
 3a8:	28 e0       	ldi	r18, 0x08	; 8
 3aa:	20 93 31 04 	sts	0x0431, r18	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>


	
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 3ae:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_XOSC32KCTRLA = 0b00000001; //外付け水晶振動子 イネーブル
 3b0:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__RODATA_PM_OFFSET__+0x7f807c>
	
	//RTC設定
	RTC_INTCTRL = 0b00000010; //比較一致割り込み許可
 3b4:	82 e0       	ldi	r24, 0x02	; 2
 3b6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__RODATA_PM_OFFSET__+0x7f8142>
	RTC_CLKSEL  = 0b00000010; //クロック選択 XOSC32Kからの32.768 kHz
 3ba:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <__RODATA_PM_OFFSET__+0x7f8147>
	//STATUS.CTRLABUSYフラグが1の間待機
	while((RTC_STATUS & 0b00000001));
 3be:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7f8141>
 3c2:	80 fd       	sbrc	r24, 0
 3c4:	fc cf       	rjmp	.-8      	; 0x3be <main+0x3c>
	RTC_CTRLA   = 0b11111001; //ｽﾀﾝﾊﾞｲ休止動作でもRTC許可 16384分周 RTC許可
 3c6:	89 ef       	ldi	r24, 0xF9	; 249
 3c8:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__RODATA_PM_OFFSET__+0x7f8140>

	//割り込みたい間隔の秒数-1
	RTC_CMP = 0;
 3cc:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <__RODATA_PM_OFFSET__+0x7f814c>
 3d0:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <__RODATA_PM_OFFSET__+0x7f814d>
	// //RTC PIT 周期割り込み設定
	// RTC_PITCTRLA = 0b01110001; //16384分周 周期割り込み計時器許可
	// RTC_PITINTCTRL = 0b00000001; //周期割り込み許可

	//タイマーA
	TCA0_SINGLE_CTRLA = 0b00001101; //1024分周 動作許可
 3d4:	8d e0       	ldi	r24, 0x0D	; 13
 3d6:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
	TCA0_SINGLE_CTRLB = 0b00000000; //
 3da:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
	TCA0_SINGLE_CMP1 = 1; // カウントがこの値に達したら割り込み(TCA0_CMP1_vect)が発生
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__RODATA_PM_OFFSET__+0x7f8a2a>
 3e6:	90 93 2b 0a 	sts	0x0A2B, r25	; 0x800a2b <__RODATA_PM_OFFSET__+0x7f8a2b>
	TCA0_SINGLE_INTCTRL = 0b00100000; //TRIGA割り込み許可
 3ea:	80 e2       	ldi	r24, 0x20	; 32
 3ec:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__RODATA_PM_OFFSET__+0x7f8a0a>

	set_sleep_mode(SLEEP_MODE_STANDBY); //スリープモードを設定
 3f0:	e0 e5       	ldi	r30, 0x50	; 80
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	80 81       	ld	r24, Z
 3f6:	89 7f       	andi	r24, 0xF9	; 249
 3f8:	82 60       	ori	r24, 0x02	; 2
 3fa:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fc:	88 e3       	ldi	r24, 0x38	; 56
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
 404:	00 00       	nop

	//少し待機
	_delay_ms(5);

	sei(); //割り込み許可
 406:	78 94       	sei
	
	while (1) {

		if(!wakeup) {
 408:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <wakeup>
 40c:	81 11       	cpse	r24, r1
 40e:	0b c0       	rjmp	.+22     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
			seg_all_off();
 410:	0e 94 5d 00 	call	0xba	; 0xba <seg_all_off>
			sleep_mode();
 414:	e0 e5       	ldi	r30, 0x50	; 80
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	81 60       	ori	r24, 0x01	; 1
 41c:	80 83       	st	Z, r24
 41e:	88 95       	sleep
 420:	80 81       	ld	r24, Z
 422:	8e 7f       	andi	r24, 0xFE	; 254
 424:	80 83       	st	Z, r24
 426:	93 e5       	ldi	r25, 0x53	; 83
 428:	9a 95       	dec	r25
 42a:	f1 f7       	brne	.-4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 42c:	00 00       	nop
 42e:	ec cf       	rjmp	.-40     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>

00000430 <__umulhisi3>:
 430:	a2 9f       	mul	r26, r18
 432:	b0 01       	movw	r22, r0
 434:	b3 9f       	mul	r27, r19
 436:	c0 01       	movw	r24, r0
 438:	a3 9f       	mul	r26, r19
 43a:	70 0d       	add	r23, r0
 43c:	81 1d       	adc	r24, r1
 43e:	11 24       	eor	r1, r1
 440:	91 1d       	adc	r25, r1
 442:	b2 9f       	mul	r27, r18
 444:	70 0d       	add	r23, r0
 446:	81 1d       	adc	r24, r1
 448:	11 24       	eor	r1, r1
 44a:	91 1d       	adc	r25, r1
 44c:	08 95       	ret

0000044e <_exit>:
 44e:	f8 94       	cli

00000450 <__stop_program>:
 450:	ff cf       	rjmp	.-2      	; 0x450 <__stop_program>
