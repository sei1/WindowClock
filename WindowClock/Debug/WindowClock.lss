
WindowClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00803800  00001054  000010e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001054  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00803814  00803814  000010fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002189  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001acd  00000000  00000000  00003355  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad9  00000000  00000000  00004e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  000058fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e26  00000000  00000000  00005ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000822  00000000  00000000  000068f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00007118  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__vector_4>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__vector_6>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__vector_10>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	18 e3       	ldi	r17, 0x38	; 56
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	e4 e5       	ldi	r30, 0x54	; 84
      90:	f0 e1       	ldi	r31, 0x10	; 16
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a4 31       	cpi	r26, 0x14	; 20
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	28 e3       	ldi	r18, 0x38	; 56
      a0:	a4 e1       	ldi	r26, 0x14	; 20
      a2:	b8 e3       	ldi	r27, 0x38	; 56
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a4 33       	cpi	r26, 0x34	; 52
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <main>
      b2:	0c 94 28 08 	jmp	0x1050	; 0x1050 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <get_v>:
// プログラム本文
//---------------------------------


//キャパシタに蓄えられた電源電圧と太陽電池の発電電圧を取得する関数
void get_v (void) {
      ba:	cf 92       	push	r12
      bc:	df 92       	push	r13
      be:	ef 92       	push	r14
      c0:	ff 92       	push	r15
      c2:	cf 93       	push	r28
      c4:	df 93       	push	r29
	
	uint16_t x = 0;
	uint16_t y = 0;

	//PB1をタクトスイッチ入力から一時的に太陽電池電圧の測定ピンに切り替える
	PORTB_PIN1CTRL = 0b00000000; //プルアップ無効 エッジを検出しない
      c6:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>
	VPORTB_DIR    |= 0b00000010; //出力モードに変更
      ca:	84 b1       	in	r24, 0x04	; 4
      cc:	82 60       	ori	r24, 0x02	; 2
      ce:	84 b9       	out	0x04, r24	; 4
	VPORTB_OUT    &= 0b11111101; //出力Low
      d0:	85 b1       	in	r24, 0x05	; 5
      d2:	8d 7f       	andi	r24, 0xFD	; 253
      d4:	85 b9       	out	0x05, r24	; 5

	//この状態でPB1の電圧を抜いている間に基準電圧1.1V / 電源電圧を測定しておく

	// 基準電圧1.1V / 電源電圧 を10bit(1024段階)で測定
	ADC0_MUXPOS = 0b00011101; //基準電圧
      d6:	8d e1       	ldi	r24, 0x1D	; 29
      d8:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7f8606>

	ADC0_COMMAND = 1;//AD変換開始
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
	while(ADC0_COMMAND);
      e2:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
      e6:	81 11       	cpse	r24, r1
      e8:	fc cf       	rjmp	.-8      	; 0xe2 <get_v+0x28>
	ADC0_COMMAND = 0;//AD変換終了
      ea:	c8 e0       	ldi	r28, 0x08	; 8
      ec:	d6 e0       	ldi	r29, 0x06	; 6
      ee:	18 82       	st	Y, r1

	y = ADC0_RES;
      f0:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
      f4:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
	
	//電源電圧を算出
	supply_v = 1023 * 1.1 / y;
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__floatunsisf>
     100:	6b 01       	movw	r12, r22
     102:	7c 01       	movw	r14, r24
     104:	9b 01       	movw	r18, r22
     106:	ac 01       	movw	r20, r24
     108:	6a e9       	ldi	r22, 0x9A	; 154
     10a:	79 ea       	ldi	r23, 0xA9	; 169
     10c:	8c e8       	ldi	r24, 0x8C	; 140
     10e:	94 e4       	ldi	r25, 0x44	; 68
     110:	0e 94 40 06 	call	0xc80	; 0xc80 <__divsf3>
     114:	60 93 27 38 	sts	0x3827, r22	; 0x803827 <supply_v>
     118:	70 93 28 38 	sts	0x3828, r23	; 0x803828 <supply_v+0x1>
     11c:	80 93 29 38 	sts	0x3829, r24	; 0x803829 <supply_v+0x2>
     120:	90 93 2a 38 	sts	0x382A, r25	; 0x80382a <supply_v+0x3>


	//PB1を入力モードに戻す
	VPORTB_DIR    &= 0b11111101; 
     124:	84 b1       	in	r24, 0x04	; 4
     126:	8d 7f       	andi	r24, 0xFD	; 253
     128:	84 b9       	out	0x04, r24	; 4

	//ADC入力ピンの選択
	// PB1ピンの電圧 / 電源電圧 を10bit(1024段階)で測定
	ADC0_MUXPOS = 0b00001010; //AIN10 = PB1
     12a:	8a e0       	ldi	r24, 0x0A	; 10
     12c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7f8606>

	ADC0_COMMAND = 1;//AD変換開始
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	88 83       	st	Y, r24
	while(ADC0_COMMAND);
     134:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
     138:	81 11       	cpse	r24, r1
     13a:	fc cf       	rjmp	.-8      	; 0x134 <__EEPROM_REGION_LENGTH__+0x34>
	ADC0_COMMAND = 0;//AD変換終了
     13c:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>

	x = ADC0_RES;
     140:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
     144:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>

	//PB1のプルアップを有効に戻す
	PORTB_PIN1CTRL = 0b00001001; //プルアップ有効 両方のエッジを検出する
     148:	89 e0       	ldi	r24, 0x09	; 9
     14a:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>

	//太陽電池電圧を算出
	solar_v = x * 1.1 / y;
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__floatunsisf>
     156:	2d ec       	ldi	r18, 0xCD	; 205
     158:	3c ec       	ldi	r19, 0xCC	; 204
     15a:	4c e8       	ldi	r20, 0x8C	; 140
     15c:	5f e3       	ldi	r21, 0x3F	; 63
     15e:	0e 94 98 07 	call	0xf30	; 0xf30 <__mulsf3>
     162:	a7 01       	movw	r20, r14
     164:	96 01       	movw	r18, r12
     166:	0e 94 40 06 	call	0xc80	; 0xc80 <__divsf3>
     16a:	6b 01       	movw	r12, r22
     16c:	7c 01       	movw	r14, r24
     16e:	60 93 23 38 	sts	0x3823, r22	; 0x803823 <solar_v>
     172:	70 93 24 38 	sts	0x3824, r23	; 0x803824 <solar_v+0x1>
     176:	80 93 25 38 	sts	0x3825, r24	; 0x803825 <solar_v+0x2>
     17a:	90 93 26 38 	sts	0x3826, r25	; 0x803826 <solar_v+0x3>



	//7セグの明るさ設定
	//太陽電池の電圧によって周囲の明るさを判定し7セグの明るさを変化させる
	if(solar_v > 1.8 || discharge) {
     17e:	26 e6       	ldi	r18, 0x66	; 102
     180:	36 e6       	ldi	r19, 0x66	; 102
     182:	46 ee       	ldi	r20, 0xE6	; 230
     184:	5f e3       	ldi	r21, 0x3F	; 63
     186:	0e 94 93 07 	call	0xf26	; 0xf26 <__gesf2>
     18a:	18 16       	cp	r1, r24
     18c:	24 f0       	brlt	.+8      	; 0x196 <__EEPROM_REGION_LENGTH__+0x96>
     18e:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <discharge>
     192:	88 23       	and	r24, r24
     194:	21 f0       	breq	.+8      	; 0x19e <__EEPROM_REGION_LENGTH__+0x9e>
		brightness = 6;
     196:	86 e0       	ldi	r24, 0x06	; 6
     198:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <brightness>
     19c:	3b c0       	rjmp	.+118    	; 0x214 <__EEPROM_REGION_LENGTH__+0x114>
	}else if(solar_v > 1.2) {
     19e:	2a e9       	ldi	r18, 0x9A	; 154
     1a0:	39 e9       	ldi	r19, 0x99	; 153
     1a2:	49 e9       	ldi	r20, 0x99	; 153
     1a4:	5f e3       	ldi	r21, 0x3F	; 63
     1a6:	c7 01       	movw	r24, r14
     1a8:	b6 01       	movw	r22, r12
     1aa:	0e 94 93 07 	call	0xf26	; 0xf26 <__gesf2>
     1ae:	18 16       	cp	r1, r24
     1b0:	24 f4       	brge	.+8      	; 0x1ba <__EEPROM_REGION_LENGTH__+0xba>
		brightness = 5;
     1b2:	85 e0       	ldi	r24, 0x05	; 5
     1b4:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <brightness>
     1b8:	2d c0       	rjmp	.+90     	; 0x214 <__EEPROM_REGION_LENGTH__+0x114>
	}else if(solar_v > 0.8) {
     1ba:	2d ec       	ldi	r18, 0xCD	; 205
     1bc:	3c ec       	ldi	r19, 0xCC	; 204
     1be:	4c e4       	ldi	r20, 0x4C	; 76
     1c0:	5f e3       	ldi	r21, 0x3F	; 63
     1c2:	c7 01       	movw	r24, r14
     1c4:	b6 01       	movw	r22, r12
     1c6:	0e 94 93 07 	call	0xf26	; 0xf26 <__gesf2>
     1ca:	18 16       	cp	r1, r24
     1cc:	24 f4       	brge	.+8      	; 0x1d6 <__EEPROM_REGION_LENGTH__+0xd6>
		brightness = 4;
     1ce:	84 e0       	ldi	r24, 0x04	; 4
     1d0:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <brightness>
     1d4:	1f c0       	rjmp	.+62     	; 0x214 <__EEPROM_REGION_LENGTH__+0x114>
	}else if(solar_v > 0.5) {
     1d6:	20 e0       	ldi	r18, 0x00	; 0
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	40 e0       	ldi	r20, 0x00	; 0
     1dc:	5f e3       	ldi	r21, 0x3F	; 63
     1de:	c7 01       	movw	r24, r14
     1e0:	b6 01       	movw	r22, r12
     1e2:	0e 94 93 07 	call	0xf26	; 0xf26 <__gesf2>
     1e6:	18 16       	cp	r1, r24
     1e8:	24 f4       	brge	.+8      	; 0x1f2 <__EEPROM_REGION_LENGTH__+0xf2>
		brightness = 3;
     1ea:	83 e0       	ldi	r24, 0x03	; 3
     1ec:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <brightness>
     1f0:	11 c0       	rjmp	.+34     	; 0x214 <__EEPROM_REGION_LENGTH__+0x114>
	}else if(solar_v > 0.3) {
     1f2:	2a e9       	ldi	r18, 0x9A	; 154
     1f4:	39 e9       	ldi	r19, 0x99	; 153
     1f6:	49 e9       	ldi	r20, 0x99	; 153
     1f8:	5e e3       	ldi	r21, 0x3E	; 62
     1fa:	c7 01       	movw	r24, r14
     1fc:	b6 01       	movw	r22, r12
     1fe:	0e 94 93 07 	call	0xf26	; 0xf26 <__gesf2>
     202:	18 16       	cp	r1, r24
     204:	24 f4       	brge	.+8      	; 0x20e <__EEPROM_REGION_LENGTH__+0x10e>
		brightness = 2;
     206:	82 e0       	ldi	r24, 0x02	; 2
     208:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <brightness>
     20c:	03 c0       	rjmp	.+6      	; 0x214 <__EEPROM_REGION_LENGTH__+0x114>
	}else{
		brightness = 1;
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <brightness>
	}

	//電圧を7セグに表示する準備 ここで行っておくことで計算が1回で済みTCA割り込みの動作が軽快になる
	uint8_t spv = supply_v * 10;
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	40 e2       	ldi	r20, 0x20	; 32
     21a:	51 e4       	ldi	r21, 0x41	; 65
     21c:	60 91 27 38 	lds	r22, 0x3827	; 0x803827 <supply_v>
     220:	70 91 28 38 	lds	r23, 0x3828	; 0x803828 <supply_v+0x1>
     224:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <supply_v+0x2>
     228:	90 91 2a 38 	lds	r25, 0x382A	; 0x80382a <supply_v+0x3>
     22c:	0e 94 98 07 	call	0xf30	; 0xf30 <__mulsf3>
     230:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fixunssfsi>
     234:	c6 2f       	mov	r28, r22
	uint8_t slv =  solar_v * 10;
     236:	20 e0       	ldi	r18, 0x00	; 0
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	40 e2       	ldi	r20, 0x20	; 32
     23c:	51 e4       	ldi	r21, 0x41	; 65
     23e:	c7 01       	movw	r24, r14
     240:	b6 01       	movw	r22, r12
     242:	0e 94 98 07 	call	0xf30	; 0xf30 <__mulsf3>
     246:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fixunssfsi>
	v_dig1  = seg[spv % 10];
     24a:	8d ec       	ldi	r24, 0xCD	; 205
     24c:	c8 9f       	mul	r28, r24
     24e:	e1 2d       	mov	r30, r1
     250:	11 24       	eor	r1, r1
     252:	e6 95       	lsr	r30
     254:	e6 95       	lsr	r30
     256:	e6 95       	lsr	r30
     258:	2e 2f       	mov	r18, r30
     25a:	22 0f       	add	r18, r18
     25c:	92 2f       	mov	r25, r18
     25e:	99 0f       	add	r25, r25
     260:	99 0f       	add	r25, r25
     262:	92 0f       	add	r25, r18
     264:	c9 1b       	sub	r28, r25
     266:	ac 2f       	mov	r26, r28
     268:	b0 e0       	ldi	r27, 0x00	; 0
     26a:	a7 5f       	subi	r26, 0xF7	; 247
     26c:	b7 4c       	sbci	r27, 0xC7	; 199
     26e:	9c 91       	ld	r25, X
     270:	90 93 1f 38 	sts	0x381F, r25	; 0x80381f <v_dig1>
	v_dig2  = seg[(spv / 10) % 10];
     274:	e8 9f       	mul	r30, r24
     276:	91 2d       	mov	r25, r1
     278:	11 24       	eor	r1, r1
     27a:	96 95       	lsr	r25
     27c:	96 95       	lsr	r25
     27e:	96 95       	lsr	r25
     280:	99 0f       	add	r25, r25
     282:	29 2f       	mov	r18, r25
     284:	22 0f       	add	r18, r18
     286:	22 0f       	add	r18, r18
     288:	92 0f       	add	r25, r18
     28a:	e9 1b       	sub	r30, r25
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	e7 5f       	subi	r30, 0xF7	; 247
     290:	f7 4c       	sbci	r31, 0xC7	; 199
     292:	90 81       	ld	r25, Z
     294:	90 93 1e 38 	sts	0x381E, r25	; 0x80381e <v_dig2>
	v_dig4  = seg[slv % 10];
     298:	68 9f       	mul	r22, r24
     29a:	e1 2d       	mov	r30, r1
     29c:	11 24       	eor	r1, r1
     29e:	e6 95       	lsr	r30
     2a0:	e6 95       	lsr	r30
     2a2:	e6 95       	lsr	r30
     2a4:	2e 2f       	mov	r18, r30
     2a6:	22 0f       	add	r18, r18
     2a8:	92 2f       	mov	r25, r18
     2aa:	99 0f       	add	r25, r25
     2ac:	99 0f       	add	r25, r25
     2ae:	92 0f       	add	r25, r18
     2b0:	69 1b       	sub	r22, r25
     2b2:	a6 2f       	mov	r26, r22
     2b4:	b0 e0       	ldi	r27, 0x00	; 0
     2b6:	a7 5f       	subi	r26, 0xF7	; 247
     2b8:	b7 4c       	sbci	r27, 0xC7	; 199
     2ba:	9c 91       	ld	r25, X
     2bc:	90 93 1d 38 	sts	0x381D, r25	; 0x80381d <v_dig4>
	v_dig5  = seg[(slv / 10) % 10];
     2c0:	e8 9f       	mul	r30, r24
     2c2:	81 2d       	mov	r24, r1
     2c4:	11 24       	eor	r1, r1
     2c6:	86 95       	lsr	r24
     2c8:	86 95       	lsr	r24
     2ca:	86 95       	lsr	r24
     2cc:	88 0f       	add	r24, r24
     2ce:	98 2f       	mov	r25, r24
     2d0:	99 0f       	add	r25, r25
     2d2:	99 0f       	add	r25, r25
     2d4:	89 0f       	add	r24, r25
     2d6:	e8 1b       	sub	r30, r24
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	e7 5f       	subi	r30, 0xF7	; 247
     2dc:	f7 4c       	sbci	r31, 0xC7	; 199
     2de:	80 81       	ld	r24, Z
     2e0:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <v_dig5>
}
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	ff 90       	pop	r15
     2ea:	ef 90       	pop	r14
     2ec:	df 90       	pop	r13
     2ee:	cf 90       	pop	r12
     2f0:	08 95       	ret

000002f2 <sens_delay_ms>:

//ボタン操作を受け付けながら待機する関数
void sens_delay_ms (uint16_t num) {
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	8c 01       	movw	r16, r24

	for (unsigned int i = 0; i < num; i++){
     2fc:	c0 e0       	ldi	r28, 0x00	; 0
     2fe:	d0 e0       	ldi	r29, 0x00	; 0
     300:	79 c0       	rjmp	.+242    	; 0x3f4 <sens_delay_ms+0x102>
		if(!(VPORTB_IN & PIN1_bm)) {
     302:	31 99       	sbic	0x06, 1	; 6
     304:	70 c0       	rjmp	.+224    	; 0x3e6 <sens_delay_ms+0xf4>

			//ここにタクトスイッチが押された時の動作を記述
			wakeup = 5000;
     306:	88 e8       	ldi	r24, 0x88	; 136
     308:	93 e1       	ldi	r25, 0x13	; 19
     30a:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <wakeup>
     30e:	90 93 2f 38 	sts	0x382F, r25	; 0x80382f <wakeup+0x1>
		
			switch (mode) {
     312:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <mode>
     316:	82 30       	cpi	r24, 0x02	; 2
     318:	01 f1       	breq	.+64     	; 0x35a <sens_delay_ms+0x68>
     31a:	83 30       	cpi	r24, 0x03	; 3
     31c:	d9 f1       	breq	.+118    	; 0x394 <sens_delay_ms+0xa2>
     31e:	81 30       	cpi	r24, 0x01	; 1
     320:	09 f0       	breq	.+2      	; 0x324 <sens_delay_ms+0x32>
     322:	61 c0       	rjmp	.+194    	; 0x3e6 <sens_delay_ms+0xf4>
				case MODE_CLOCK:
					while(!(VPORTB_IN & PIN1_bm));
     324:	31 9b       	sbis	0x06, 1	; 6
     326:	fe cf       	rjmp	.-4      	; 0x324 <sens_delay_ms+0x32>
					if(change_mode_after) {
     328:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <change_mode_after>
     32c:	88 23       	and	r24, r24
     32e:	19 f0       	breq	.+6      	; 0x336 <sens_delay_ms+0x44>
						change_mode_after = 0;
     330:	10 92 2b 38 	sts	0x382B, r1	; 0x80382b <change_mode_after>
     334:	58 c0       	rjmp	.+176    	; 0x3e6 <sens_delay_ms+0xf4>
					}else{
						//電圧の取得
						get_v();
     336:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
						display_v = 255;
     33a:	8f ef       	ldi	r24, 0xFF	; 255
     33c:	80 93 22 38 	sts	0x3822, r24	; 0x803822 <display_v>
						wakeup = 1000; //電圧表示だけなら長く表示する必要ないのでwakeup値上書き
     340:	88 ee       	ldi	r24, 0xE8	; 232
     342:	93 e0       	ldi	r25, 0x03	; 3
     344:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <wakeup>
     348:	90 93 2f 38 	sts	0x382F, r25	; 0x80382f <wakeup+0x1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     34c:	87 ea       	ldi	r24, 0xA7	; 167
     34e:	91 e6       	ldi	r25, 0x61	; 97
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	f1 f7       	brne	.-4      	; 0x350 <sens_delay_ms+0x5e>
     354:	00 c0       	rjmp	.+0      	; 0x356 <sens_delay_ms+0x64>
     356:	00 00       	nop
     358:	46 c0       	rjmp	.+140    	; 0x3e6 <sens_delay_ms+0xf4>
						_delay_ms(100);
					}
				break;

				case MODE_HOUR_SET:
					while(!(VPORTB_IN & PIN1_bm));
     35a:	31 9b       	sbis	0x06, 1	; 6
     35c:	fe cf       	rjmp	.-4      	; 0x35a <sens_delay_ms+0x68>
					if(change_mode_after) {
     35e:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <change_mode_after>
     362:	88 23       	and	r24, r24
     364:	19 f0       	breq	.+6      	; 0x36c <sens_delay_ms+0x7a>
						change_mode_after = 0;
     366:	10 92 2b 38 	sts	0x382B, r1	; 0x80382b <change_mode_after>
     36a:	3d c0       	rjmp	.+122    	; 0x3e6 <sens_delay_ms+0xf4>
					}else{
						if(++memory_hour >= 24) memory_hour = 0;
     36c:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <memory_hour>
     370:	8f 5f       	subi	r24, 0xFF	; 255
     372:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <memory_hour>
     376:	88 31       	cpi	r24, 0x18	; 24
     378:	10 f0       	brcs	.+4      	; 0x37e <sens_delay_ms+0x8c>
     37a:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <memory_hour>
						calc_hour = memory_hour;
     37e:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <memory_hour>
     382:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <calc_hour>
     386:	87 ea       	ldi	r24, 0xA7	; 167
     388:	91 e6       	ldi	r25, 0x61	; 97
     38a:	01 97       	sbiw	r24, 0x01	; 1
     38c:	f1 f7       	brne	.-4      	; 0x38a <sens_delay_ms+0x98>
     38e:	00 c0       	rjmp	.+0      	; 0x390 <sens_delay_ms+0x9e>
     390:	00 00       	nop
     392:	29 c0       	rjmp	.+82     	; 0x3e6 <sens_delay_ms+0xf4>
						_delay_ms(100);
					}
				break;

				case MODE_MIN_SET:
					while(!(VPORTB_IN & PIN1_bm));
     394:	31 9b       	sbis	0x06, 1	; 6
     396:	fe cf       	rjmp	.-4      	; 0x394 <sens_delay_ms+0xa2>
					if(change_mode_after) {
     398:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <change_mode_after>
     39c:	88 23       	and	r24, r24
     39e:	19 f0       	breq	.+6      	; 0x3a6 <sens_delay_ms+0xb4>
						change_mode_after = 0;
     3a0:	10 92 2b 38 	sts	0x382B, r1	; 0x80382b <change_mode_after>
     3a4:	20 c0       	rjmp	.+64     	; 0x3e6 <sens_delay_ms+0xf4>
					}else{
						if(++memory_min >= 60) {
     3a6:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <memory_min>
     3aa:	8f 5f       	subi	r24, 0xFF	; 255
     3ac:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <memory_min>
     3b0:	8c 33       	cpi	r24, 0x3C	; 60
     3b2:	58 f0       	brcs	.+22     	; 0x3ca <sens_delay_ms+0xd8>
							memory_min = 0;
     3b4:	10 92 33 38 	sts	0x3833, r1	; 0x803833 <memory_min>
							if(++memory_hour >= 24) memory_hour = 0;
     3b8:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <memory_hour>
     3bc:	8f 5f       	subi	r24, 0xFF	; 255
     3be:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <memory_hour>
     3c2:	88 31       	cpi	r24, 0x18	; 24
     3c4:	10 f0       	brcs	.+4      	; 0x3ca <sens_delay_ms+0xd8>
     3c6:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <memory_hour>
						}
						calc_hour = memory_hour;
     3ca:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <memory_hour>
     3ce:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <calc_hour>
						calc_min = memory_min;
     3d2:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <memory_min>
     3d6:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <calc_min>
     3da:	87 ea       	ldi	r24, 0xA7	; 167
     3dc:	91 e6       	ldi	r25, 0x61	; 97
     3de:	01 97       	sbiw	r24, 0x01	; 1
     3e0:	f1 f7       	brne	.-4      	; 0x3de <sens_delay_ms+0xec>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <sens_delay_ms+0xf2>
     3e4:	00 00       	nop
     3e6:	89 ef       	ldi	r24, 0xF9	; 249
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <sens_delay_ms+0xf8>
     3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <sens_delay_ms+0xfe>
     3f0:	00 00       	nop
}

//ボタン操作を受け付けながら待機する関数
void sens_delay_ms (uint16_t num) {

	for (unsigned int i = 0; i < num; i++){
     3f2:	21 96       	adiw	r28, 0x01	; 1
     3f4:	c0 17       	cp	r28, r16
     3f6:	d1 07       	cpc	r29, r17
     3f8:	08 f4       	brcc	.+2      	; 0x3fc <sens_delay_ms+0x10a>
     3fa:	83 cf       	rjmp	.-250    	; 0x302 <sens_delay_ms+0x10>
				break;
			}
		}
		_delay_ms(1);
	}
}
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	08 95       	ret

00000406 <seg_all_off>:

//7セグをすべて消灯する関数
void seg_all_off (void) {

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	VPORTA_OUT &= 0b00000001;
     406:	81 b1       	in	r24, 0x01	; 1
     408:	81 70       	andi	r24, 0x01	; 1
     40a:	81 b9       	out	0x01, r24	; 1
	VPORTC_OUT &= 0b11111110;
     40c:	89 b1       	in	r24, 0x09	; 9
     40e:	8e 7f       	andi	r24, 0xFE	; 254
     410:	89 b9       	out	0x09, r24	; 9
	//ダイナミック点灯用トランジスタも全てOFF
	VPORTB_OUT &= 0b11001111;
     412:	85 b1       	in	r24, 0x05	; 5
     414:	8f 7c       	andi	r24, 0xCF	; 207
     416:	85 b9       	out	0x05, r24	; 5
	VPORTC_OUT &= 0b11110001;
     418:	89 b1       	in	r24, 0x09	; 9
     41a:	81 7f       	andi	r24, 0xF1	; 241
     41c:	89 b9       	out	0x09, r24	; 9
     41e:	08 95       	ret

00000420 <change_mode>:
}

//モードを切り替える関数
//引数に0を指定した場合は次の定数のモードへ 定数を指定した場合はそのモードへ
void change_mode (uint8_t cmode) {
	if(cmode) {
     420:	88 23       	and	r24, r24
     422:	19 f0       	breq	.+6      	; 0x42a <change_mode+0xa>
		mode = cmode;
     424:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <mode>
     428:	08 95       	ret
	}else if(mode == MODE_MIN_SET) {
     42a:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <mode>
     42e:	83 30       	cpi	r24, 0x03	; 3
     430:	21 f4       	brne	.+8      	; 0x43a <change_mode+0x1a>
		mode = MODE_CLOCK;
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <mode>
     438:	08 95       	ret
	}else{
		mode++;
     43a:	8f 5f       	subi	r24, 0xFF	; 255
     43c:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <mode>
     440:	08 95       	ret

00000442 <init_memory_clock>:
	}
}

//保存時刻を初期化
void init_memory_clock (void) {
	if(unset) { //未設定なら00:00で初期化
     442:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <unset>
     446:	88 23       	and	r24, r24
     448:	49 f0       	breq	.+18     	; 0x45c <init_memory_clock+0x1a>
		memory_hour = calc_hour = 0;
     44a:	10 92 30 38 	sts	0x3830, r1	; 0x803830 <calc_hour>
     44e:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <memory_hour>
		memory_min = calc_min = 0;
     452:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <calc_min>
     456:	10 92 33 38 	sts	0x3833, r1	; 0x803833 <memory_min>
     45a:	08 c0       	rjmp	.+16     	; 0x46c <init_memory_clock+0x2a>
	}else{
		memory_hour = calc_hour;
     45c:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <calc_hour>
     460:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <memory_hour>
		memory_min = calc_min;
     464:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <calc_min>
     468:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <memory_min>
	}
	RTC_CNT = 0;
     46c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
     470:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
	calc_updated = 1;
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <calc_updated>
     47a:	08 95       	ret

0000047c <__vector_10>:
}

//TCA割り込み
ISR (TCA0_CMP0_vect) {
     47c:	1f 92       	push	r1
     47e:	0f 92       	push	r0
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	0f 92       	push	r0
     484:	11 24       	eor	r1, r1
     486:	ef 92       	push	r14
     488:	ff 92       	push	r15
     48a:	0f 93       	push	r16
     48c:	1f 93       	push	r17
     48e:	2f 93       	push	r18
     490:	3f 93       	push	r19
     492:	4f 93       	push	r20
     494:	5f 93       	push	r21
     496:	6f 93       	push	r22
     498:	7f 93       	push	r23
     49a:	8f 93       	push	r24
     49c:	9f 93       	push	r25
     49e:	af 93       	push	r26
     4a0:	bf 93       	push	r27
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	ef 93       	push	r30
     4a8:	ff 93       	push	r31

	TCA0_SINGLE_CNT = 0;//カウントリセット
     4aa:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__RODATA_PM_OFFSET__+0x7f8a20>
     4ae:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__RODATA_PM_OFFSET__+0x7f8a21>
	TCA0_SINGLE_INTFLAGS |= 0b00010000; //割り込み要求フラグを解除
     4b2:	eb e0       	ldi	r30, 0x0B	; 11
     4b4:	fa e0       	ldi	r31, 0x0A	; 10
     4b6:	80 81       	ld	r24, Z
     4b8:	80 61       	ori	r24, 0x10	; 16
     4ba:	80 83       	st	Z, r24

	//wakeupが0ならセグをすべて消灯してそれ以外を実行しない
	//メインループのseg_all_off関数とsleep_mode関数の間にこの割り込みが入り中途半端に7セグが点灯した状態でスリープするのを防ぐ記述
	if(!wakeup) {
     4bc:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <wakeup>
     4c0:	90 91 2f 38 	lds	r25, 0x382F	; 0x80382f <wakeup+0x1>
     4c4:	89 2b       	or	r24, r25
     4c6:	19 f4       	brne	.+6      	; 0x4ce <__vector_10+0x52>
		seg_all_off();
     4c8:	0e 94 03 02 	call	0x406	; 0x406 <seg_all_off>
		return;
     4cc:	11 c2       	rjmp	.+1058   	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
	//現状このドットは使用していないのでコメントアウト 使うときは有効化してください
	//uint8_t dig1c, dig4c,;
	//dig1c = di45c = 0;

	//太陽電池の発電電圧とキャパシタの電圧を表示
	if(display_v && mode == MODE_CLOCK) {
     4ce:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <display_v>
     4d2:	88 23       	and	r24, r24
     4d4:	81 f0       	breq	.+32     	; 0x4f6 <__vector_10+0x7a>
     4d6:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <mode>
     4da:	81 30       	cpi	r24, 0x01	; 1
     4dc:	61 f4       	brne	.+24     	; 0x4f6 <__vector_10+0x7a>
		dig1  = v_dig1;
     4de:	c0 91 1f 38 	lds	r28, 0x381F	; 0x80381f <v_dig1>
		dig2  = v_dig2;
     4e2:	d0 91 1e 38 	lds	r29, 0x381E	; 0x80381e <v_dig2>
		dig3  = 0b00000000;
		dig4  = v_dig4;
     4e6:	10 91 1d 38 	lds	r17, 0x381D	; 0x80381d <v_dig4>
		dig5  = v_dig5;
     4ea:	00 91 1c 38 	lds	r16, 0x381C	; 0x80381c <v_dig5>
		dig2c = dig5c = 0b00000001;//ドット(小数点)
     4ee:	ff 24       	eor	r15, r15
     4f0:	f3 94       	inc	r15

	//太陽電池の発電電圧とキャパシタの電圧を表示
	if(display_v && mode == MODE_CLOCK) {
		dig1  = v_dig1;
		dig2  = v_dig2;
		dig3  = 0b00000000;
     4f2:	e1 2c       	mov	r14, r1
		dig4  = v_dig4;
		dig5  = v_dig5;
		dig2c = dig5c = 0b00000001;//ドット(小数点)
     4f4:	8f c0       	rjmp	.+286    	; 0x614 <__vector_10+0x198>

	}else if(unset && mode == MODE_CLOCK) {//時計未設定なら全てハイフンで上書き
     4f6:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <unset>
     4fa:	88 23       	and	r24, r24
     4fc:	29 f0       	breq	.+10     	; 0x508 <__vector_10+0x8c>
     4fe:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <mode>
     502:	81 30       	cpi	r24, 0x01	; 1
     504:	09 f4       	brne	.+2      	; 0x508 <__vector_10+0x8c>
     506:	7d c0       	rjmp	.+250    	; 0x602 <__vector_10+0x186>
		dig3 = 0b00000110;

	}else{//時刻を表示

		//時刻が更新されていれば表示を刷新するための計算を行う。更新されていなければ前回表示したものをそのまま表示
		if(old_calc_min != calc_min || old_calc_hour != calc_hour) {
     508:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <old_calc_min>
     50c:	c0 91 31 38 	lds	r28, 0x3831	; 0x803831 <calc_min>
     510:	8c 13       	cpse	r24, r28
     512:	07 c0       	rjmp	.+14     	; 0x522 <__vector_10+0xa6>
     514:	90 91 01 38 	lds	r25, 0x3801	; 0x803801 <old_calc_hour>
     518:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <calc_hour>
     51c:	98 17       	cp	r25, r24
     51e:	09 f4       	brne	.+2      	; 0x522 <__vector_10+0xa6>
     520:	64 c0       	rjmp	.+200    	; 0x5ea <__vector_10+0x16e>
			old_calc_min = calc_min;
     522:	c0 93 02 38 	sts	0x3802, r28	; 0x803802 <old_calc_min>
			old_calc_hour = calc_hour;
     526:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <calc_hour>
     52a:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <old_calc_hour>

			//12時間表記設定と24時間表記設定で表示を切り替える
			uint8_t display_hour = 0;
			if(system12) {
     52e:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <system12>
     532:	99 23       	and	r25, r25
     534:	39 f0       	breq	.+14     	; 0x544 <__vector_10+0xc8>
				if(!calc_hour) display_hour = 12; //0時を12時と表記
     536:	88 23       	and	r24, r24
     538:	21 f0       	breq	.+8      	; 0x542 <__vector_10+0xc6>
				else if (calc_hour > 12) display_hour = calc_hour - 12; //13時以降を1時、2時…と表す
     53a:	8d 30       	cpi	r24, 0x0D	; 13
     53c:	18 f0       	brcs	.+6      	; 0x544 <__vector_10+0xc8>
     53e:	8c 50       	subi	r24, 0x0C	; 12
     540:	01 c0       	rjmp	.+2      	; 0x544 <__vector_10+0xc8>
			old_calc_hour = calc_hour;

			//12時間表記設定と24時間表記設定で表示を切り替える
			uint8_t display_hour = 0;
			if(system12) {
				if(!calc_hour) display_hour = 12; //0時を12時と表記
     542:	8c e0       	ldi	r24, 0x0C	; 12
				else display_hour = calc_hour;
			}else{
				display_hour = calc_hour;
			}

			old_dig1 = dig1  = seg[calc_min % 10];
     544:	ed ec       	ldi	r30, 0xCD	; 205
     546:	ce 9f       	mul	r28, r30
     548:	a1 2d       	mov	r26, r1
     54a:	11 24       	eor	r1, r1
     54c:	a6 95       	lsr	r26
     54e:	a6 95       	lsr	r26
     550:	a6 95       	lsr	r26
     552:	2a 2f       	mov	r18, r26
     554:	22 0f       	add	r18, r18
     556:	92 2f       	mov	r25, r18
     558:	99 0f       	add	r25, r25
     55a:	99 0f       	add	r25, r25
     55c:	92 0f       	add	r25, r18
     55e:	c9 1b       	sub	r28, r25
     560:	d0 e0       	ldi	r29, 0x00	; 0
     562:	c7 5f       	subi	r28, 0xF7	; 247
     564:	d7 4c       	sbci	r29, 0xC7	; 199
     566:	c8 81       	ld	r28, Y
     568:	c0 93 1b 38 	sts	0x381B, r28	; 0x80381b <old_dig1>
			old_dig2 = dig2  = seg[(calc_min / 10) % 10];
     56c:	ae 9f       	mul	r26, r30
     56e:	91 2d       	mov	r25, r1
     570:	11 24       	eor	r1, r1
     572:	96 95       	lsr	r25
     574:	96 95       	lsr	r25
     576:	96 95       	lsr	r25
     578:	99 0f       	add	r25, r25
     57a:	29 2f       	mov	r18, r25
     57c:	22 0f       	add	r18, r18
     57e:	22 0f       	add	r18, r18
     580:	92 0f       	add	r25, r18
     582:	a9 1b       	sub	r26, r25
     584:	b0 e0       	ldi	r27, 0x00	; 0
     586:	a7 5f       	subi	r26, 0xF7	; 247
     588:	b7 4c       	sbci	r27, 0xC7	; 199
     58a:	dc 91       	ld	r29, X
     58c:	d0 93 1a 38 	sts	0x381A, r29	; 0x80381a <old_dig2>
			old_dig4 = dig4  = seg[display_hour % 10];
     590:	8e 9f       	mul	r24, r30
     592:	91 2d       	mov	r25, r1
     594:	11 24       	eor	r1, r1
     596:	96 95       	lsr	r25
     598:	96 95       	lsr	r25
     59a:	96 95       	lsr	r25
     59c:	39 2f       	mov	r19, r25
     59e:	33 0f       	add	r19, r19
     5a0:	23 2f       	mov	r18, r19
     5a2:	22 0f       	add	r18, r18
     5a4:	22 0f       	add	r18, r18
     5a6:	23 0f       	add	r18, r19
     5a8:	82 1b       	sub	r24, r18
     5aa:	a8 2f       	mov	r26, r24
     5ac:	b0 e0       	ldi	r27, 0x00	; 0
     5ae:	a7 5f       	subi	r26, 0xF7	; 247
     5b0:	b7 4c       	sbci	r27, 0xC7	; 199
     5b2:	1c 91       	ld	r17, X
     5b4:	10 93 19 38 	sts	0x3819, r17	; 0x803819 <old_dig4>

			//dig5のみ0なら不点灯にする(ゼロサプレス)
			uint8_t zerocheck = (display_hour / 10) % 10;
     5b8:	9e 9f       	mul	r25, r30
     5ba:	e1 2d       	mov	r30, r1
     5bc:	11 24       	eor	r1, r1
     5be:	e6 95       	lsr	r30
     5c0:	e6 95       	lsr	r30
     5c2:	e6 95       	lsr	r30
     5c4:	ee 0f       	add	r30, r30
     5c6:	8e 2f       	mov	r24, r30
     5c8:	88 0f       	add	r24, r24
     5ca:	88 0f       	add	r24, r24
     5cc:	e8 0f       	add	r30, r24
     5ce:	9e 1b       	sub	r25, r30
			if(zerocheck == 0) {
     5d0:	21 f4       	brne	.+8      	; 0x5da <__vector_10+0x15e>
				old_dig5 = dig5 = 0b00000000;
     5d2:	10 92 18 38 	sts	0x3818, r1	; 0x803818 <old_dig5>
     5d6:	00 e0       	ldi	r16, 0x00	; 0
     5d8:	10 c0       	rjmp	.+32     	; 0x5fa <__vector_10+0x17e>
			}else{
				old_dig5 = dig5   = seg[zerocheck];
     5da:	e9 2f       	mov	r30, r25
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	e7 5f       	subi	r30, 0xF7	; 247
     5e0:	f7 4c       	sbci	r31, 0xC7	; 199
     5e2:	00 81       	ld	r16, Z
     5e4:	00 93 18 38 	sts	0x3818, r16	; 0x803818 <old_dig5>
     5e8:	08 c0       	rjmp	.+16     	; 0x5fa <__vector_10+0x17e>
			}

		}else{
			dig1 = old_dig1;
     5ea:	c0 91 1b 38 	lds	r28, 0x381B	; 0x80381b <old_dig1>
			dig2 = old_dig2;
     5ee:	d0 91 1a 38 	lds	r29, 0x381A	; 0x80381a <old_dig2>
			dig4 = old_dig4;
     5f2:	10 91 19 38 	lds	r17, 0x3819	; 0x803819 <old_dig4>
			dig5 = old_dig5;
     5f6:	00 91 18 38 	lds	r16, 0x3818	; 0x803818 <old_dig5>
		}

		dig3  = colon;
     5fa:	e0 90 17 38 	lds	r14, 0x3817	; 0x803817 <colon.3369>

	static uint8_t out_dig = 0;//発光させる桁
	static uint8_t colon = 0;//点滅コロン
	uint8_t dig1, dig2, dig3, dig4, dig5 = 0;
	uint8_t dig2c, dig5c;
	dig2c = dig5c = 0;
     5fe:	f1 2c       	mov	r15, r1
     600:	09 c0       	rjmp	.+18     	; 0x614 <__vector_10+0x198>
     602:	f1 2c       	mov	r15, r1
		dig4  = v_dig4;
		dig5  = v_dig5;
		dig2c = dig5c = 0b00000001;//ドット(小数点)

	}else if(unset && mode == MODE_CLOCK) {//時計未設定なら全てハイフンで上書き
		dig1 = dig2 = dig4 = dig5 = 0b10000000;
     604:	00 e8       	ldi	r16, 0x80	; 128
     606:	10 e8       	ldi	r17, 0x80	; 128
		dig3 = 0b00000110;
     608:	0f 2e       	mov	r0, r31
     60a:	f6 e0       	ldi	r31, 0x06	; 6
     60c:	ef 2e       	mov	r14, r31
     60e:	f0 2d       	mov	r31, r0
		dig4  = v_dig4;
		dig5  = v_dig5;
		dig2c = dig5c = 0b00000001;//ドット(小数点)

	}else if(unset && mode == MODE_CLOCK) {//時計未設定なら全てハイフンで上書き
		dig1 = dig2 = dig4 = dig5 = 0b10000000;
     610:	d0 e8       	ldi	r29, 0x80	; 128
     612:	c0 e8       	ldi	r28, 0x80	; 128
	}

	//時刻設定時の点滅演出
	//点滅カウンター
	static uint16_t wink = 0;
	if(mode == MODE_HOUR_SET) {
     614:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <mode>
     618:	82 30       	cpi	r24, 0x02	; 2
     61a:	a9 f4       	brne	.+42     	; 0x646 <__vector_10+0x1ca>
		if(++wink < 512) dig4 = dig5 = 0b00000000;
     61c:	80 91 15 38 	lds	r24, 0x3815	; 0x803815 <wink.3379>
     620:	90 91 16 38 	lds	r25, 0x3816	; 0x803816 <wink.3379+0x1>
     624:	01 96       	adiw	r24, 0x01	; 1
     626:	80 93 15 38 	sts	0x3815, r24	; 0x803815 <wink.3379>
     62a:	90 93 16 38 	sts	0x3816, r25	; 0x803816 <wink.3379+0x1>
     62e:	81 15       	cp	r24, r1
     630:	22 e0       	ldi	r18, 0x02	; 2
     632:	92 07       	cpc	r25, r18
     634:	20 f1       	brcs	.+72     	; 0x67e <__vector_10+0x202>
		else if (wink > 1023) wink = 0;
     636:	81 15       	cp	r24, r1
     638:	94 40       	sbci	r25, 0x04	; 4
     63a:	30 f1       	brcs	.+76     	; 0x688 <__vector_10+0x20c>
     63c:	10 92 15 38 	sts	0x3815, r1	; 0x803815 <wink.3379>
     640:	10 92 16 38 	sts	0x3816, r1	; 0x803816 <wink.3379+0x1>
     644:	21 c0       	rjmp	.+66     	; 0x688 <__vector_10+0x20c>
	}else if(mode == MODE_MIN_SET) {
     646:	83 30       	cpi	r24, 0x03	; 3
     648:	a9 f4       	brne	.+42     	; 0x674 <__vector_10+0x1f8>
		if(++wink < 512) dig1 = dig2 = 0b00000000;
     64a:	80 91 15 38 	lds	r24, 0x3815	; 0x803815 <wink.3379>
     64e:	90 91 16 38 	lds	r25, 0x3816	; 0x803816 <wink.3379+0x1>
     652:	01 96       	adiw	r24, 0x01	; 1
     654:	80 93 15 38 	sts	0x3815, r24	; 0x803815 <wink.3379>
     658:	90 93 16 38 	sts	0x3816, r25	; 0x803816 <wink.3379+0x1>
     65c:	81 15       	cp	r24, r1
     65e:	22 e0       	ldi	r18, 0x02	; 2
     660:	92 07       	cpc	r25, r18
     662:	80 f0       	brcs	.+32     	; 0x684 <__vector_10+0x208>
		else if (wink > 1023) wink = 0;
     664:	81 15       	cp	r24, r1
     666:	94 40       	sbci	r25, 0x04	; 4
     668:	78 f0       	brcs	.+30     	; 0x688 <__vector_10+0x20c>
     66a:	10 92 15 38 	sts	0x3815, r1	; 0x803815 <wink.3379>
     66e:	10 92 16 38 	sts	0x3816, r1	; 0x803816 <wink.3379+0x1>
     672:	0a c0       	rjmp	.+20     	; 0x688 <__vector_10+0x20c>
	}else{
		wink = 0;
     674:	10 92 15 38 	sts	0x3815, r1	; 0x803815 <wink.3379>
     678:	10 92 16 38 	sts	0x3816, r1	; 0x803816 <wink.3379+0x1>
     67c:	05 c0       	rjmp	.+10     	; 0x688 <__vector_10+0x20c>

	//時刻設定時の点滅演出
	//点滅カウンター
	static uint16_t wink = 0;
	if(mode == MODE_HOUR_SET) {
		if(++wink < 512) dig4 = dig5 = 0b00000000;
     67e:	00 e0       	ldi	r16, 0x00	; 0
     680:	10 e0       	ldi	r17, 0x00	; 0
     682:	02 c0       	rjmp	.+4      	; 0x688 <__vector_10+0x20c>
		else if (wink > 1023) wink = 0;
	}else if(mode == MODE_MIN_SET) {
		if(++wink < 512) dig1 = dig2 = 0b00000000;
     684:	d0 e0       	ldi	r29, 0x00	; 0
     686:	c0 e0       	ldi	r28, 0x00	; 0
		wink = 0;
	}


	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();
     688:	0e 94 03 02 	call	0x406	; 0x406 <seg_all_off>

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
	static uint8_t bn_pwm_count = 1; //7セグを間欠で点灯させるために0～12までを繰り返し数えるカウンター

	if(++bn_pwm_count > 24) bn_pwm_count = 1;
     68c:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     690:	8f 5f       	subi	r24, 0xFF	; 255
     692:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
     696:	89 31       	cpi	r24, 0x19	; 25
     698:	18 f0       	brcs	.+6      	; 0x6a0 <__vector_10+0x224>
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>

	//間欠点灯で明るさを調整
	switch (brightness) {
     6a0:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <brightness>
     6a4:	83 30       	cpi	r24, 0x03	; 3
     6a6:	41 f1       	breq	.+80     	; 0x6f8 <__vector_10+0x27c>
     6a8:	28 f4       	brcc	.+10     	; 0x6b4 <__vector_10+0x238>
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	51 f0       	breq	.+20     	; 0x6c2 <__vector_10+0x246>
     6ae:	82 30       	cpi	r24, 0x02	; 2
     6b0:	91 f0       	breq	.+36     	; 0x6d6 <__vector_10+0x25a>
     6b2:	05 c0       	rjmp	.+10     	; 0x6be <__vector_10+0x242>
     6b4:	85 30       	cpi	r24, 0x05	; 5
     6b6:	99 f1       	breq	.+102    	; 0x71e <__vector_10+0x2a2>
     6b8:	20 f1       	brcs	.+72     	; 0x702 <__vector_10+0x286>
     6ba:	86 30       	cpi	r24, 0x06	; 6
     6bc:	b1 f1       	breq	.+108    	; 0x72a <__vector_10+0x2ae>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	43 c0       	rjmp	.+134    	; 0x748 <__vector_10+0x2cc>
	//間欠点灯で明るさを調整
	switch (brightness) {

		case 1: //12.5% bn_pwm_countが8,16,24のタイミングで点灯
			if(
				bn_pwm_count == 8  ||
     6c2:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>

	//間欠点灯で明るさを調整
	switch (brightness) {

		case 1: //12.5% bn_pwm_countが8,16,24のタイミングで点灯
			if(
     6c6:	88 30       	cpi	r24, 0x08	; 8
     6c8:	91 f1       	breq	.+100    	; 0x72e <__vector_10+0x2b2>
				bn_pwm_count == 8  ||
     6ca:	80 31       	cpi	r24, 0x10	; 16
     6cc:	91 f1       	breq	.+100    	; 0x732 <__vector_10+0x2b6>
				bn_pwm_count == 16 ||
     6ce:	88 31       	cpi	r24, 0x18	; 24
     6d0:	91 f1       	breq	.+100    	; 0x736 <__vector_10+0x2ba>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	39 c0       	rjmp	.+114    	; 0x748 <__vector_10+0x2cc>
				seg_on = 1;
			}
		break;

		case 2: //16.67% bn_pwm_countが6,12,18,24のタイミングで点灯
			if(bn_pwm_count % 6) {
     6d6:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     6da:	8b ea       	ldi	r24, 0xAB	; 171
     6dc:	28 9f       	mul	r18, r24
     6de:	81 2d       	mov	r24, r1
     6e0:	11 24       	eor	r1, r1
     6e2:	86 95       	lsr	r24
     6e4:	86 95       	lsr	r24
     6e6:	98 2f       	mov	r25, r24
     6e8:	99 0f       	add	r25, r25
     6ea:	89 0f       	add	r24, r25
     6ec:	98 2f       	mov	r25, r24
     6ee:	99 0f       	add	r25, r25
     6f0:	29 13       	cpse	r18, r25
     6f2:	23 c0       	rjmp	.+70     	; 0x73a <__vector_10+0x2be>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	28 c0       	rjmp	.+80     	; 0x748 <__vector_10+0x2cc>
				seg_on = 1;
			}
		break;

		case 3: //25% bn_pwm_countが4,8,12,16,20,24のタイミングで点灯
			if(bn_pwm_count % 4) {
     6f8:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     6fc:	83 70       	andi	r24, 0x03	; 3
     6fe:	f9 f4       	brne	.+62     	; 0x73e <__vector_10+0x2c2>
     700:	23 c0       	rjmp	.+70     	; 0x748 <__vector_10+0x2cc>
				seg_on = 1;
			}
		break;

		case 4: //33.33% bn_pwm_countが3,6,9,12,15,18,21,24のタイミングで点灯
			if(bn_pwm_count % 3) {
     702:	90 91 00 38 	lds	r25, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     706:	8b ea       	ldi	r24, 0xAB	; 171
     708:	98 9f       	mul	r25, r24
     70a:	81 2d       	mov	r24, r1
     70c:	11 24       	eor	r1, r1
     70e:	86 95       	lsr	r24
     710:	28 2f       	mov	r18, r24
     712:	22 0f       	add	r18, r18
     714:	82 0f       	add	r24, r18
     716:	98 13       	cpse	r25, r24
     718:	14 c0       	rjmp	.+40     	; 0x742 <__vector_10+0x2c6>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	15 c0       	rjmp	.+42     	; 0x748 <__vector_10+0x2cc>
				seg_on = 1;
			}
		break;

		case 5: //50% bn_pwm_countが2,4,6,8,10,12,14,16,18,20,22,24のタイミングで点灯
			if(bn_pwm_count % 2) {
     71e:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     722:	80 fd       	sbrc	r24, 0
     724:	10 c0       	rjmp	.+32     	; 0x746 <__vector_10+0x2ca>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	0f c0       	rjmp	.+30     	; 0x748 <__vector_10+0x2cc>
				seg_on = 1;
			}
		break;

		case 6: //100% bn_pwm_countがいくつでも全てのタイミングで点灯
			seg_on = 1;
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	0d c0       	rjmp	.+26     	; 0x748 <__vector_10+0x2cc>
			if(
				bn_pwm_count == 8  ||
				bn_pwm_count == 16 ||
				bn_pwm_count == 24
			) {
				seg_on = 1;
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	0b c0       	rjmp	.+22     	; 0x748 <__vector_10+0x2cc>
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	09 c0       	rjmp	.+18     	; 0x748 <__vector_10+0x2cc>
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	07 c0       	rjmp	.+14     	; 0x748 <__vector_10+0x2cc>
			}
		break;

		case 2: //16.67% bn_pwm_countが6,12,18,24のタイミングで点灯
			if(bn_pwm_count % 6) {
				seg_on = 1;
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	05 c0       	rjmp	.+10     	; 0x748 <__vector_10+0x2cc>
			}
		break;

		case 3: //25% bn_pwm_countが4,8,12,16,20,24のタイミングで点灯
			if(bn_pwm_count % 4) {
				seg_on = 1;
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	03 c0       	rjmp	.+6      	; 0x748 <__vector_10+0x2cc>
			}
		break;

		case 4: //33.33% bn_pwm_countが3,6,9,12,15,18,21,24のタイミングで点灯
			if(bn_pwm_count % 3) {
				seg_on = 1;
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	01 c0       	rjmp	.+2      	; 0x748 <__vector_10+0x2cc>
			}
		break;

		case 5: //50% bn_pwm_countが2,4,6,8,10,12,14,16,18,20,22,24のタイミングで点灯
			if(bn_pwm_count % 2) {
				seg_on = 1;
     746:	81 e0       	ldi	r24, 0x01	; 1
			seg_on = 1;
		break;
	}

	//点灯実行
	if(seg_on) {
     748:	88 23       	and	r24, r24
     74a:	b9 f1       	breq	.+110    	; 0x7ba <__vector_10+0x33e>
		switch (out_dig) {
     74c:	80 91 14 38 	lds	r24, 0x3814	; 0x803814 <__data_end>
     750:	82 30       	cpi	r24, 0x02	; 2
     752:	e9 f0       	breq	.+58     	; 0x78e <__vector_10+0x312>
     754:	28 f4       	brcc	.+10     	; 0x760 <__vector_10+0x2e4>
     756:	88 23       	and	r24, r24
     758:	41 f0       	breq	.+16     	; 0x76a <__vector_10+0x2ee>
     75a:	81 30       	cpi	r24, 0x01	; 1
     75c:	59 f0       	breq	.+22     	; 0x774 <__vector_10+0x2f8>
     75e:	2d c0       	rjmp	.+90     	; 0x7ba <__vector_10+0x33e>
     760:	83 30       	cpi	r24, 0x03	; 3
     762:	d1 f0       	breq	.+52     	; 0x798 <__vector_10+0x31c>
     764:	84 30       	cpi	r24, 0x04	; 4
     766:	e9 f0       	breq	.+58     	; 0x7a2 <__vector_10+0x326>
     768:	28 c0       	rjmp	.+80     	; 0x7ba <__vector_10+0x33e>

			case 0:
			VPORTB_OUT |= 0b00010000;
     76a:	85 b1       	in	r24, 0x05	; 5
     76c:	80 61       	ori	r24, 0x10	; 16
     76e:	85 b9       	out	0x05, r24	; 5
			VPORTA_OUT = dig1;
     770:	c1 b9       	out	0x01, r28	; 1
			//現状このドットは使用していないのでコメントアウト 使うときは有効化してください
			//VPORTC_OUT = (dig1c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
			break;
     772:	23 c0       	rjmp	.+70     	; 0x7ba <__vector_10+0x33e>

			case 1:
			VPORTC_OUT |= 0b00001000;
     774:	89 b1       	in	r24, 0x09	; 9
     776:	88 60       	ori	r24, 0x08	; 8
     778:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig2;
     77a:	d1 b9       	out	0x01, r29	; 1
			if(display_v) VPORTC_OUT = (dig2c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
     77c:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <display_v>
     780:	88 23       	and	r24, r24
     782:	d9 f0       	breq	.+54     	; 0x7ba <__vector_10+0x33e>
     784:	89 b1       	in	r24, 0x09	; 9
     786:	8e 7f       	andi	r24, 0xFE	; 254
     788:	f8 2a       	or	r15, r24
     78a:	f9 b8       	out	0x09, r15	; 9
     78c:	16 c0       	rjmp	.+44     	; 0x7ba <__vector_10+0x33e>
			break;

			case 2:
			VPORTB_OUT |= 0b00100000;
     78e:	85 b1       	in	r24, 0x05	; 5
     790:	80 62       	ori	r24, 0x20	; 32
     792:	85 b9       	out	0x05, r24	; 5
			VPORTA_OUT = dig3;
     794:	e1 b8       	out	0x01, r14	; 1
			break;
     796:	11 c0       	rjmp	.+34     	; 0x7ba <__vector_10+0x33e>

			case 3:
			VPORTC_OUT |= 0b00000100;
     798:	89 b1       	in	r24, 0x09	; 9
     79a:	84 60       	ori	r24, 0x04	; 4
     79c:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig4;
     79e:	11 b9       	out	0x01, r17	; 1
			//現状このドットは使用していないのでコメントアウト 使うときは有効化してください
			//VPORTC_OUT = (dig4c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
			break;
     7a0:	0c c0       	rjmp	.+24     	; 0x7ba <__vector_10+0x33e>

			case 4:
			VPORTC_OUT |= 0b00000010;
     7a2:	89 b1       	in	r24, 0x09	; 9
     7a4:	82 60       	ori	r24, 0x02	; 2
     7a6:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig5;
     7a8:	01 b9       	out	0x01, r16	; 1
			if(display_v) VPORTC_OUT = (dig5c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
     7aa:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <display_v>
     7ae:	88 23       	and	r24, r24
     7b0:	21 f0       	breq	.+8      	; 0x7ba <__vector_10+0x33e>
     7b2:	89 b1       	in	r24, 0x09	; 9
     7b4:	8e 7f       	andi	r24, 0xFE	; 254
     7b6:	f8 2a       	or	r15, r24
     7b8:	f9 b8       	out	0x09, r15	; 9
		}
	}


	//5回に1回やること
	if ( ++out_dig == 5 ) {
     7ba:	80 91 14 38 	lds	r24, 0x3814	; 0x803814 <__data_end>
     7be:	8f 5f       	subi	r24, 0xFF	; 255
     7c0:	80 93 14 38 	sts	0x3814, r24	; 0x803814 <__data_end>
     7c4:	85 30       	cpi	r24, 0x05	; 5
     7c6:	09 f0       	breq	.+2      	; 0x7ca <__vector_10+0x34e>
     7c8:	93 c0       	rjmp	.+294    	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
		//out_digの0~5トグル動作
		out_dig = 0;
     7ca:	10 92 14 38 	sts	0x3814, r1	; 0x803814 <__data_end>

		//コロンの点滅動作
		if(!(RTC_CNT % 2) || mode != MODE_CLOCK) { //コロンの点滅
     7ce:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
     7d2:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
     7d6:	80 ff       	sbrs	r24, 0
     7d8:	04 c0       	rjmp	.+8      	; 0x7e2 <__vector_10+0x366>
     7da:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <mode>
     7de:	81 30       	cpi	r24, 0x01	; 1
     7e0:	21 f0       	breq	.+8      	; 0x7ea <__vector_10+0x36e>
			colon = 0b00000110;
     7e2:	86 e0       	ldi	r24, 0x06	; 6
     7e4:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <colon.3369>
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <__vector_10+0x372>
		}else{
			colon = 0b00000000;
     7ea:	10 92 17 38 	sts	0x3817, r1	; 0x803817 <colon.3369>
		}

		//算出時刻を進める
		if(!(RTC_CNT % 120)) {
     7ee:	40 91 48 01 	lds	r20, 0x0148	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
     7f2:	50 91 49 01 	lds	r21, 0x0149	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
     7f6:	9a 01       	movw	r18, r20
     7f8:	a9 e8       	ldi	r26, 0x89	; 137
     7fa:	b8 e8       	ldi	r27, 0x88	; 136
     7fc:	0e 94 19 08 	call	0x1032	; 0x1032 <__umulhisi3>
     800:	00 24       	eor	r0, r0
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
     806:	00 1c       	adc	r0, r0
     808:	88 0f       	add	r24, r24
     80a:	99 1f       	adc	r25, r25
     80c:	00 1c       	adc	r0, r0
     80e:	89 2f       	mov	r24, r25
     810:	90 2d       	mov	r25, r0
     812:	68 e7       	ldi	r22, 0x78	; 120
     814:	68 9f       	mul	r22, r24
     816:	90 01       	movw	r18, r0
     818:	69 9f       	mul	r22, r25
     81a:	30 0d       	add	r19, r0
     81c:	11 24       	eor	r1, r1
     81e:	42 17       	cp	r20, r18
     820:	53 07       	cpc	r21, r19
     822:	f1 f4       	brne	.+60     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
			if(calc_updated == 0) {
     824:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <calc_updated>
     828:	81 11       	cpse	r24, r1
     82a:	1c c0       	rjmp	.+56     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
				calc_updated = 1;
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <calc_updated>
				if(++calc_min >= 60) {
     832:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <calc_min>
     836:	8f 5f       	subi	r24, 0xFF	; 255
     838:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <calc_min>
     83c:	8c 33       	cpi	r24, 0x3C	; 60
     83e:	40 f0       	brcs	.+16     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
					calc_hour++;
     840:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <calc_hour>
     844:	9f 5f       	subi	r25, 0xFF	; 255
     846:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <calc_hour>
					calc_min -= 60;
     84a:	8c 53       	subi	r24, 0x3C	; 60
     84c:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <calc_min>
				}
				if(calc_hour >= 24) calc_hour -= 24;
     850:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <calc_hour>
     854:	88 31       	cpi	r24, 0x18	; 24
     856:	30 f0       	brcs	.+12     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
     858:	88 51       	subi	r24, 0x18	; 24
     85a:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <calc_hour>
     85e:	02 c0       	rjmp	.+4      	; 0x864 <__DATA_REGION_LENGTH__+0x64>
			}
		}else{
			calc_updated = 0;
     860:	10 92 05 38 	sts	0x3805, r1	; 0x803805 <calc_updated>
		}

		//スリープへ向けwakeupを減らす
		if(wakeup) wakeup--;
     864:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <wakeup>
     868:	90 91 2f 38 	lds	r25, 0x382F	; 0x80382f <wakeup+0x1>
     86c:	00 97       	sbiw	r24, 0x00	; 0
     86e:	29 f0       	breq	.+10     	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <wakeup>
     876:	90 93 2f 38 	sts	0x382F, r25	; 0x80382f <wakeup+0x1>

		//電圧表示時間を減らす
		if(display_v) display_v--;
     87a:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <display_v>
     87e:	88 23       	and	r24, r24
     880:	19 f0       	breq	.+6      	; 0x888 <__DATA_REGION_LENGTH__+0x88>
     882:	81 50       	subi	r24, 0x01	; 1
     884:	80 93 22 38 	sts	0x3822, r24	; 0x803822 <display_v>

		//タクトスイッチが長押しされている場合、長押しカウントを加算
		if(VPORTB_IN & PIN1_bm) {
     888:	31 9b       	sbis	0x06, 1	; 6
     88a:	05 c0       	rjmp	.+10     	; 0x896 <__DATA_REGION_LENGTH__+0x96>
			long_push = 0;
     88c:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <long_push>
     890:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <long_push+0x1>
     894:	2d c0       	rjmp	.+90     	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
		}else{
			if(++long_push > 1200) {
     896:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <long_push>
     89a:	90 91 2d 38 	lds	r25, 0x382D	; 0x80382d <long_push+0x1>
     89e:	01 96       	adiw	r24, 0x01	; 1
     8a0:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <long_push>
     8a4:	90 93 2d 38 	sts	0x382D, r25	; 0x80382d <long_push+0x1>
     8a8:	81 3b       	cpi	r24, 0xB1	; 177
     8aa:	94 40       	sbci	r25, 0x04	; 4
     8ac:	08 f1       	brcs	.+66     	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
				long_push = 0;
     8ae:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <long_push>
     8b2:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <long_push+0x1>
				//時刻設定をした後、算出時刻を保存時刻に代入しカウントリセット
				init_memory_clock();
     8b6:	0e 94 21 02 	call	0x442	; 0x442 <init_memory_clock>
				change_mode(0);
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	0e 94 10 02 	call	0x420	; 0x420 <change_mode>
				change_mode_after = 1;
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <change_mode_after>

				unset = 0; //時刻未設定フラグを折る
     8c6:	10 92 03 38 	sts	0x3803, r1	; 0x803803 <unset>
				//スリープを挟まず3回連続で時刻合わせを行った場合は24時間表記に切り替える
				if(mode == MODE_HOUR_SET) {
     8ca:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <mode>
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	79 f4       	brne	.+30     	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
					s24count++;
     8d2:	80 91 20 38 	lds	r24, 0x3820	; 0x803820 <s24count>
     8d6:	8f 5f       	subi	r24, 0xFF	; 255
     8d8:	80 93 20 38 	sts	0x3820, r24	; 0x803820 <s24count>
					if(s24count >= 3) {
     8dc:	83 30       	cpi	r24, 0x03	; 3
     8de:	28 f0       	brcs	.+10     	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
						s24count = 0;
     8e0:	10 92 20 38 	sts	0x3820, r1	; 0x803820 <s24count>
						system12 = 0;
     8e4:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <system12>
     8e8:	03 c0       	rjmp	.+6      	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
					}else{
						system12 = 1;
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <system12>
				}
			}
		}
	}

}
     8f0:	ff 91       	pop	r31
     8f2:	ef 91       	pop	r30
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	bf 91       	pop	r27
     8fa:	af 91       	pop	r26
     8fc:	9f 91       	pop	r25
     8fe:	8f 91       	pop	r24
     900:	7f 91       	pop	r23
     902:	6f 91       	pop	r22
     904:	5f 91       	pop	r21
     906:	4f 91       	pop	r20
     908:	3f 91       	pop	r19
     90a:	2f 91       	pop	r18
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	ff 90       	pop	r15
     912:	ef 90       	pop	r14
     914:	0f 90       	pop	r0
     916:	0f be       	out	0x3f, r0	; 63
     918:	0f 90       	pop	r0
     91a:	1f 90       	pop	r1
     91c:	18 95       	reti

0000091e <__vector_4>:

//外部割り込み PB0が変化したら 両方のエッジを検出する(片方エッジにしたいがそうするとなぜかスタンバイから復帰しない)
ISR(PORTB_PORT_vect) {
     91e:	1f 92       	push	r1
     920:	0f 92       	push	r0
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	0f 92       	push	r0
     926:	11 24       	eor	r1, r1
     928:	2f 93       	push	r18
     92a:	3f 93       	push	r19
     92c:	4f 93       	push	r20
     92e:	5f 93       	push	r21
     930:	6f 93       	push	r22
     932:	7f 93       	push	r23
     934:	8f 93       	push	r24
     936:	9f 93       	push	r25
     938:	af 93       	push	r26
     93a:	bf 93       	push	r27
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	ef 93       	push	r30
     942:	ff 93       	push	r31
	
	PORTB_INTFLAGS |= 0b00000010; //割り込み要求フラグ解除
     944:	e9 e2       	ldi	r30, 0x29	; 41
     946:	f4 e0       	ldi	r31, 0x04	; 4
     948:	80 81       	ld	r24, Z
     94a:	82 60       	ori	r24, 0x02	; 2
     94c:	80 83       	st	Z, r24

	//赤外線センサー PB0がLowに切り替わったら何もせず返す 両方のエッジを検出するようにしているので立ち下がりエッジ割り込みはここで無効にする
	if(!(VPORTB_IN & PIN0_bm)) {
     94e:	30 9b       	sbis	0x06, 0	; 6
     950:	61 c0       	rjmp	.+194    	; 0xa14 <__vector_4+0xf6>
		return;
	}

	//赤外線センサー PB0がHighだったら一定時間起き上がらせる
	if(VPORTB_IN & PIN0_bm) {
     952:	30 9b       	sbis	0x06, 0	; 6
     954:	5f c0       	rjmp	.+190    	; 0xa14 <__vector_4+0xf6>

		//まず電圧測定する
		if(yet_v) {
     956:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <yet_v>
     95a:	88 23       	and	r24, r24
     95c:	21 f0       	breq	.+8      	; 0x966 <__vector_4+0x48>
			yet_v = 0; //電圧測定をしたことをyet_vに記録
     95e:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <yet_v>
			get_v();
     962:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
		}

		if(!wakeup) {
     966:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <wakeup>
     96a:	f0 91 2f 38 	lds	r31, 0x382F	; 0x80382f <wakeup+0x1>
     96e:	30 97       	sbiw	r30, 0x00	; 0
     970:	09 f0       	breq	.+2      	; 0x974 <__vector_4+0x56>
     972:	47 c0       	rjmp	.+142    	; 0xa02 <__vector_4+0xe4>

			//現在時刻を算出
			
			//眠っている間に計測した秒数を分に換算
			uint16_t slept_min = RTC_CNT / 120;
     974:	40 91 48 01 	lds	r20, 0x0148	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
     978:	50 91 49 01 	lds	r21, 0x0149	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
     97c:	9a 01       	movw	r18, r20
     97e:	a9 e8       	ldi	r26, 0x89	; 137
     980:	b8 e8       	ldi	r27, 0x88	; 136
     982:	0e 94 19 08 	call	0x1032	; 0x1032 <__umulhisi3>
     986:	ec 01       	movw	r28, r24
     988:	00 24       	eor	r0, r0
     98a:	cc 0f       	add	r28, r28
     98c:	dd 1f       	adc	r29, r29
     98e:	00 1c       	adc	r0, r0
     990:	cc 0f       	add	r28, r28
     992:	dd 1f       	adc	r29, r29
     994:	00 1c       	adc	r0, r0
     996:	cd 2f       	mov	r28, r29
     998:	d0 2d       	mov	r29, r0

			calc_hour = memory_hour + slept_min / 60;
     99a:	ca 01       	movw	r24, r20
     99c:	60 e2       	ldi	r22, 0x20	; 32
     99e:	7c e1       	ldi	r23, 0x1C	; 28
     9a0:	0e 94 05 08 	call	0x100a	; 0x100a <__udivmodhi4>
     9a4:	40 91 32 38 	lds	r20, 0x3832	; 0x803832 <memory_hour>
     9a8:	46 0f       	add	r20, r22
     9aa:	40 93 30 38 	sts	0x3830, r20	; 0x803830 <calc_hour>
			calc_min  = memory_min  + slept_min % 60;
     9ae:	9e 01       	movw	r18, r28
     9b0:	a9 e8       	ldi	r26, 0x89	; 137
     9b2:	b8 e8       	ldi	r27, 0x88	; 136
     9b4:	0e 94 19 08 	call	0x1032	; 0x1032 <__umulhisi3>
     9b8:	96 95       	lsr	r25
     9ba:	87 95       	ror	r24
     9bc:	92 95       	swap	r25
     9be:	82 95       	swap	r24
     9c0:	8f 70       	andi	r24, 0x0F	; 15
     9c2:	89 27       	eor	r24, r25
     9c4:	9f 70       	andi	r25, 0x0F	; 15
     9c6:	89 27       	eor	r24, r25
     9c8:	5c e3       	ldi	r21, 0x3C	; 60
     9ca:	58 9f       	mul	r21, r24
     9cc:	90 01       	movw	r18, r0
     9ce:	59 9f       	mul	r21, r25
     9d0:	30 0d       	add	r19, r0
     9d2:	11 24       	eor	r1, r1
     9d4:	ce 01       	movw	r24, r28
     9d6:	82 1b       	sub	r24, r18
     9d8:	93 0b       	sbc	r25, r19
     9da:	90 91 33 38 	lds	r25, 0x3833	; 0x803833 <memory_min>
     9de:	89 0f       	add	r24, r25
     9e0:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <calc_min>

			if(calc_min >= 60) {
     9e4:	8c 33       	cpi	r24, 0x3C	; 60
     9e6:	30 f0       	brcs	.+12     	; 0x9f4 <__vector_4+0xd6>
				calc_hour++;
     9e8:	4f 5f       	subi	r20, 0xFF	; 255
     9ea:	40 93 30 38 	sts	0x3830, r20	; 0x803830 <calc_hour>
				calc_min -= 60;
     9ee:	8c 53       	subi	r24, 0x3C	; 60
     9f0:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <calc_min>
			}

			if(calc_hour >= 24) calc_hour -= 24;
     9f4:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <calc_hour>
     9f8:	88 31       	cpi	r24, 0x18	; 24
     9fa:	18 f0       	brcs	.+6      	; 0xa02 <__vector_4+0xe4>
     9fc:	88 51       	subi	r24, 0x18	; 24
     9fe:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <calc_hour>
		}

		//一定時間起き上がらせる
		if(wakeup < 1000) wakeup = 1000;
     a02:	e8 3e       	cpi	r30, 0xE8	; 232
     a04:	f3 40       	sbci	r31, 0x03	; 3
     a06:	30 f4       	brcc	.+12     	; 0xa14 <__vector_4+0xf6>
     a08:	88 ee       	ldi	r24, 0xE8	; 232
     a0a:	93 e0       	ldi	r25, 0x03	; 3
     a0c:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <wakeup>
     a10:	90 93 2f 38 	sts	0x382F, r25	; 0x80382f <wakeup+0x1>
		return;
	}

	return;
}
     a14:	ff 91       	pop	r31
     a16:	ef 91       	pop	r30
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	bf 91       	pop	r27
     a1e:	af 91       	pop	r26
     a20:	9f 91       	pop	r25
     a22:	8f 91       	pop	r24
     a24:	7f 91       	pop	r23
     a26:	6f 91       	pop	r22
     a28:	5f 91       	pop	r21
     a2a:	4f 91       	pop	r20
     a2c:	3f 91       	pop	r19
     a2e:	2f 91       	pop	r18
     a30:	0f 90       	pop	r0
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	0f 90       	pop	r0
     a36:	1f 90       	pop	r1
     a38:	18 95       	reti

00000a3a <__vector_6>:

//リアルタイムクロック 比較一致割り込み
ISR(RTC_CNT_vect) {
     a3a:	1f 92       	push	r1
     a3c:	0f 92       	push	r0
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	0f 92       	push	r0
     a42:	11 24       	eor	r1, r1
     a44:	2f 93       	push	r18
     a46:	3f 93       	push	r19
     a48:	4f 93       	push	r20
     a4a:	5f 93       	push	r21
     a4c:	6f 93       	push	r22
     a4e:	7f 93       	push	r23
     a50:	8f 93       	push	r24
     a52:	9f 93       	push	r25
     a54:	af 93       	push	r26
     a56:	bf 93       	push	r27
     a58:	ef 93       	push	r30
     a5a:	ff 93       	push	r31
	RTC_CNT = 0;
     a5c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
     a60:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
	RTC_INTFLAGS |= 0b00000010;
     a64:	e3 e4       	ldi	r30, 0x43	; 67
     a66:	f1 e0       	ldi	r31, 0x01	; 1
     a68:	80 81       	ld	r24, Z
     a6a:	82 60       	ori	r24, 0x02	; 2
     a6c:	80 83       	st	Z, r24

	//時計を9時間進める
	if (mode == MODE_CLOCK) {
     a6e:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <mode>
     a72:	81 30       	cpi	r24, 0x01	; 1
     a74:	51 f4       	brne	.+20     	; 0xa8a <__vector_6+0x50>
		memory_hour += 9;
     a76:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <memory_hour>
     a7a:	87 5f       	subi	r24, 0xF7	; 247
     a7c:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <memory_hour>
		if(memory_hour >= 24) memory_hour -= 24;
     a80:	88 31       	cpi	r24, 0x18	; 24
     a82:	18 f0       	brcs	.+6      	; 0xa8a <__vector_6+0x50>
     a84:	88 51       	subi	r24, 0x18	; 24
     a86:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <memory_hour>
	}
	
	//日常点検作業
	if(!wakeup){
     a8a:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <wakeup>
     a8e:	90 91 2f 38 	lds	r25, 0x382F	; 0x80382f <wakeup+0x1>
     a92:	89 2b       	or	r24, r25
     a94:	09 f0       	breq	.+2      	; 0xa98 <__vector_6+0x5e>
     a96:	3d c0       	rjmp	.+122    	; 0xb12 <__vector_6+0xd8>
		get_v();
     a98:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
		//低電圧再起動処理 起きてる時にやると一瞬7セグがちらつくので起きてない時(厳密には起きてるカウントがされていない時)にやる
		if(supply_v <= MIN_SUPPLY_V) {
     a9c:	60 91 27 38 	lds	r22, 0x3827	; 0x803827 <supply_v>
     aa0:	70 91 28 38 	lds	r23, 0x3828	; 0x803828 <supply_v+0x1>
     aa4:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <supply_v+0x2>
     aa8:	90 91 2a 38 	lds	r25, 0x382A	; 0x80382a <supply_v+0x3>
     aac:	2a e9       	ldi	r18, 0x9A	; 154
     aae:	39 e9       	ldi	r19, 0x99	; 153
     ab0:	49 ed       	ldi	r20, 0xD9	; 217
     ab2:	5f e3       	ldi	r21, 0x3F	; 63
     ab4:	0e 94 3b 06 	call	0xc76	; 0xc76 <__cmpsf2>
     ab8:	18 16       	cp	r1, r24
     aba:	94 f0       	brlt	.+36     	; 0xae0 <__vector_6+0xa6>
			//停止処理
			//ウォッチドッグタイマを0.008秒で起動
			wdt_enable(0b00000001);//0.008秒の場合、右4桁をデータシート上の8CLKのレジスタ設定値にする
     abc:	88 ed       	ldi	r24, 0xD8	; 216
     abe:	a8 95       	wdr
     ac0:	84 bf       	out	0x34, r24	; 52
     ac2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
     ac6:	81 60       	ori	r24, 0x01	; 1
     ac8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
     acc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__RODATA_PM_OFFSET__+0x7f8101>
     ad0:	81 fd       	sbrc	r24, 1
     ad2:	fc cf       	rjmp	.-8      	; 0xacc <__vector_6+0x92>
     ad4:	87 ea       	ldi	r24, 0xA7	; 167
     ad6:	91 e6       	ldi	r25, 0x61	; 97
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	f1 f7       	brne	.-4      	; 0xad8 <__vector_6+0x9e>
     adc:	00 c0       	rjmp	.+0      	; 0xade <__vector_6+0xa4>
     ade:	00 00       	nop
			//待機(しているあいだにウォッチドッグリセットがかかる)
			_delay_ms(100);
		}
		//高電圧放電処理
		if(supply_v >= MAX_SUPPLY_V) {
     ae0:	60 91 27 38 	lds	r22, 0x3827	; 0x803827 <supply_v>
     ae4:	70 91 28 38 	lds	r23, 0x3828	; 0x803828 <supply_v+0x1>
     ae8:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <supply_v+0x2>
     aec:	90 91 2a 38 	lds	r25, 0x382A	; 0x80382a <supply_v+0x3>
     af0:	26 e6       	ldi	r18, 0x66	; 102
     af2:	36 e6       	ldi	r19, 0x66	; 102
     af4:	46 ea       	ldi	r20, 0xA6	; 166
     af6:	50 e4       	ldi	r21, 0x40	; 64
     af8:	0e 94 93 07 	call	0xf26	; 0xf26 <__gesf2>
     afc:	88 23       	and	r24, r24
     afe:	4c f0       	brlt	.+18     	; 0xb12 <__vector_6+0xd8>
			wakeup = 7000;
     b00:	88 e5       	ldi	r24, 0x58	; 88
     b02:	9b e1       	ldi	r25, 0x1B	; 27
     b04:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <wakeup>
     b08:	90 93 2f 38 	sts	0x382F, r25	; 0x80382f <wakeup+0x1>
			discharge = 1;
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	80 93 21 38 	sts	0x3821, r24	; 0x803821 <discharge>
		}
	}

	return;
}
     b12:	ff 91       	pop	r31
     b14:	ef 91       	pop	r30
     b16:	bf 91       	pop	r27
     b18:	af 91       	pop	r26
     b1a:	9f 91       	pop	r25
     b1c:	8f 91       	pop	r24
     b1e:	7f 91       	pop	r23
     b20:	6f 91       	pop	r22
     b22:	5f 91       	pop	r21
     b24:	4f 91       	pop	r20
     b26:	3f 91       	pop	r19
     b28:	2f 91       	pop	r18
     b2a:	0f 90       	pop	r0
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	0f 90       	pop	r0
     b30:	1f 90       	pop	r1
     b32:	18 95       	reti

00000b34 <main>:
int main(void) {

	//■□■――――――――――――――――――――――――――――――――――――■□■
	//		□ レジスタの設定
	//■□■――――――――――――――――――――――――――――――――――――■□■
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
     b34:	88 ed       	ldi	r24, 0xD8	; 216
     b36:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLA = 0b00000000; //16/20 MHz内部オシレータ
     b38:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RODATA_PM_OFFSET__+0x7f8060>
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
     b3c:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLB = 0b00000111; //16分周
     b3e:	97 e0       	ldi	r25, 0x07	; 7
     b40:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>

	//入出力モード設定
	VPORTA_DIR = 0b11111111; //ポートA 
     b44:	9f ef       	ldi	r25, 0xFF	; 255
     b46:	90 b9       	out	0x00, r25	; 0
	VPORTB_DIR = 0b11111100; //ポートB 
     b48:	2c ef       	ldi	r18, 0xFC	; 252
     b4a:	24 b9       	out	0x04, r18	; 4
	VPORTC_DIR = 0b11111111; //ポートC
     b4c:	98 b9       	out	0x08, r25	; 8

	//出力の初期化
	VPORTA_OUT = 0b00000000; //ポートA
     b4e:	11 b8       	out	0x01, r1	; 1
	VPORTB_OUT = 0b00000000; //ポートB
     b50:	15 b8       	out	0x05, r1	; 5
	VPORTC_OUT = 0b00000000; //ポートC
     b52:	19 b8       	out	0x09, r1	; 9

	//焦電型赤外線センサー入力
	PORTB_PIN0CTRL = 0b00000001; //プルアップ無効 両方のエッジを検出する
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <__RODATA_PM_OFFSET__+0x7f8430>
	//タクトスイッチ入力
	PORTB_PIN1CTRL = 0b00001000; //プルアップ有効
     b5a:	28 e0       	ldi	r18, 0x08	; 8
     b5c:	20 93 31 04 	sts	0x0431, r18	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>

	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
     b60:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_XOSC32KCTRLA = 0b00000001; //外付け水晶振動子 イネーブル
     b62:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__RODATA_PM_OFFSET__+0x7f807c>
	
	//RTC設定
	RTC_INTCTRL = 0b00000010; //比較一致割り込み許可
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__RODATA_PM_OFFSET__+0x7f8142>
	RTC_CLKSEL  = 0b00000010; //クロック選択 XOSC32Kからの32.768 kHz
     b6c:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <__RODATA_PM_OFFSET__+0x7f8147>
	//STATUS.CTRLABUSYフラグが1の間待機
	while((RTC_STATUS & 0b00000001));
     b70:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7f8141>
     b74:	80 fd       	sbrc	r24, 0
     b76:	fc cf       	rjmp	.-8      	; 0xb70 <main+0x3c>
	RTC_CTRLA   = 0b11110001; //ｽﾀﾝﾊﾞｲ休止動作でもRTC許可 16384分周=0.5秒カウント RTC許可
     b78:	81 ef       	ldi	r24, 0xF1	; 241
     b7a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__RODATA_PM_OFFSET__+0x7f8140>

	//割り込みたい間隔の秒数をx2-1して代入
	RTC_CMP = (uint16_t) 32400 * 2 - 1; //32400秒=540分=9時間 16ビット最大値以内で表せる極力長い時間を代入するとこの値になる
     b7e:	8f e1       	ldi	r24, 0x1F	; 31
     b80:	9d ef       	ldi	r25, 0xFD	; 253
     b82:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__RODATA_PM_OFFSET__+0x7f814c>
     b86:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__RODATA_PM_OFFSET__+0x7f814d>
	RTC_CNT = 0;
     b8a:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
     b8e:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>

	//タイマーA
	TCA0_SINGLE_CTRLA = 0b00001101; //1024分周 動作許可
     b92:	8d e0       	ldi	r24, 0x0D	; 13
     b94:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
	TCA0_SINGLE_CTRLB = 0b00000000; //
     b98:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
	TCA0_SINGLE_CMP0 = 1; // カウントがこの値に達したら割り込み(TCA0_CMP1_vect)が発生
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
     ba4:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__RODATA_PM_OFFSET__+0x7f8a29>
	TCA0_SINGLE_INTCTRL = 0b00010000; //CMP0割り込み許可
     ba8:	80 e1       	ldi	r24, 0x10	; 16
     baa:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__RODATA_PM_OFFSET__+0x7f8a0a>

	//ADC設定
	ADC0_CTRLA = 0b00000001; //ADC Enable
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	90 93 00 06 	sts	0x0600, r25	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
	ADC0_CTRLB = 0b00000000; //累積なし
     bb4:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <__RODATA_PM_OFFSET__+0x7f8601>
	ADC0_CTRLC = 0b01010101; //VREF = VDD, プリスケーラ1/64
     bb8:	95 e5       	ldi	r25, 0x55	; 85
     bba:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__RODATA_PM_OFFSET__+0x7f8602>
	VREF_CTRLA = 0b00010000; //内部基準電圧 1.1V
     bbe:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__RODATA_PM_OFFSET__+0x7f80a0>

	set_sleep_mode(SLEEP_MODE_STANDBY); //スリープモードを設定
     bc2:	e0 e5       	ldi	r30, 0x50	; 80
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	89 7f       	andi	r24, 0xF9	; 249
     bca:	82 60       	ori	r24, 0x02	; 2
     bcc:	80 83       	st	Z, r24
     bce:	81 ee       	ldi	r24, 0xE1	; 225
     bd0:	94 e0       	ldi	r25, 0x04	; 4
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	f1 f7       	brne	.-4      	; 0xbd2 <main+0x9e>
     bd6:	00 c0       	rjmp	.+0      	; 0xbd8 <main+0xa4>
     bd8:	00 00       	nop

	//少し待機
	_delay_ms(5);

	sei(); //割り込み許可
     bda:	78 94       	sei
     bdc:	23 c0       	rjmp	.+70     	; 0xc24 <main+0xf0>
	
	while (1) {

		//放電中ループ 起き続け3秒毎に電圧を計り下がっていたらブレイク
		while (discharge) {
			get_v();
     bde:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
			if(supply_v < (MAX_SUPPLY_V - 0.1)) {
     be2:	60 91 27 38 	lds	r22, 0x3827	; 0x803827 <supply_v>
     be6:	70 91 28 38 	lds	r23, 0x3828	; 0x803828 <supply_v+0x1>
     bea:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <supply_v+0x2>
     bee:	90 91 2a 38 	lds	r25, 0x382A	; 0x80382a <supply_v+0x3>
     bf2:	23 e3       	ldi	r18, 0x33	; 51
     bf4:	33 e3       	ldi	r19, 0x33	; 51
     bf6:	43 ea       	ldi	r20, 0xA3	; 163
     bf8:	50 e4       	ldi	r21, 0x40	; 64
     bfa:	0e 94 3b 06 	call	0xc76	; 0xc76 <__cmpsf2>
     bfe:	88 23       	and	r24, r24
     c00:	3c f4       	brge	.+14     	; 0xc10 <main+0xdc>
				discharge = 0;
     c02:	10 92 21 38 	sts	0x3821, r1	; 0x803821 <discharge>
				wakeup = 0;
     c06:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <wakeup>
     c0a:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <wakeup+0x1>
				break;
     c0e:	0e c0       	rjmp	.+28     	; 0xc2c <main+0xf8>
			}
			sens_delay_ms(3000);
     c10:	88 eb       	ldi	r24, 0xB8	; 184
     c12:	9b e0       	ldi	r25, 0x0B	; 11
     c14:	0e 94 79 01 	call	0x2f2	; 0x2f2 <sens_delay_ms>
			wakeup = 7000;
     c18:	88 e5       	ldi	r24, 0x58	; 88
     c1a:	9b e1       	ldi	r25, 0x1B	; 27
     c1c:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <wakeup>
     c20:	90 93 2f 38 	sts	0x382F, r25	; 0x80382f <wakeup+0x1>
	sei(); //割り込み許可
	
	while (1) {

		//放電中ループ 起き続け3秒毎に電圧を計り下がっていたらブレイク
		while (discharge) {
     c24:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <discharge>
     c28:	81 11       	cpse	r24, r1
     c2a:	d9 cf       	rjmp	.-78     	; 0xbde <main+0xaa>
			}
			sens_delay_ms(3000);
			wakeup = 7000;
		}

		if(!wakeup) {
     c2c:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <wakeup>
     c30:	90 91 2f 38 	lds	r25, 0x382F	; 0x80382f <wakeup+0x1>
     c34:	89 2b       	or	r24, r25
     c36:	d1 f4       	brne	.+52     	; 0xc6c <main+0x138>
			//寝る準備
			seg_all_off();
     c38:	0e 94 03 02 	call	0x406	; 0x406 <seg_all_off>
			change_mode(MODE_CLOCK);
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	0e 94 10 02 	call	0x420	; 0x420 <change_mode>
			display_v = 0;
     c42:	10 92 22 38 	sts	0x3822, r1	; 0x803822 <display_v>
			yet_v = 1;
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <yet_v>
			s24count = 0;
     c4c:	10 92 20 38 	sts	0x3820, r1	; 0x803820 <s24count>
			old_calc_min = old_calc_hour = 255;
     c50:	8f ef       	ldi	r24, 0xFF	; 255
     c52:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <old_calc_hour>
     c56:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <old_calc_min>
			//寝る
			sleep_mode();
     c5a:	e0 e5       	ldi	r30, 0x50	; 80
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	81 60       	ori	r24, 0x01	; 1
     c62:	80 83       	st	Z, r24
     c64:	88 95       	sleep
     c66:	80 81       	ld	r24, Z
     c68:	8e 7f       	andi	r24, 0xFE	; 254
     c6a:	80 83       	st	Z, r24
		}
		
		sens_delay_ms(5);
     c6c:	85 e0       	ldi	r24, 0x05	; 5
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 79 01 	call	0x2f2	; 0x2f2 <sens_delay_ms>

	}
     c74:	d7 cf       	rjmp	.-82     	; 0xc24 <main+0xf0>

00000c76 <__cmpsf2>:
     c76:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fp_cmp>
     c7a:	08 f4       	brcc	.+2      	; 0xc7e <__cmpsf2+0x8>
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	08 95       	ret

00000c80 <__divsf3>:
     c80:	0e 94 54 06 	call	0xca8	; 0xca8 <__divsf3x>
     c84:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__fp_round>
     c88:	0e 94 52 07 	call	0xea4	; 0xea4 <__fp_pscB>
     c8c:	58 f0       	brcs	.+22     	; 0xca4 <__divsf3+0x24>
     c8e:	0e 94 4b 07 	call	0xe96	; 0xe96 <__fp_pscA>
     c92:	40 f0       	brcs	.+16     	; 0xca4 <__divsf3+0x24>
     c94:	29 f4       	brne	.+10     	; 0xca0 <__divsf3+0x20>
     c96:	5f 3f       	cpi	r21, 0xFF	; 255
     c98:	29 f0       	breq	.+10     	; 0xca4 <__divsf3+0x24>
     c9a:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_inf>
     c9e:	51 11       	cpse	r21, r1
     ca0:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_szero>
     ca4:	0c 94 48 07 	jmp	0xe90	; 0xe90 <__fp_nan>

00000ca8 <__divsf3x>:
     ca8:	0e 94 6a 07 	call	0xed4	; 0xed4 <__fp_split3>
     cac:	68 f3       	brcs	.-38     	; 0xc88 <__divsf3+0x8>

00000cae <__divsf3_pse>:
     cae:	99 23       	and	r25, r25
     cb0:	b1 f3       	breq	.-20     	; 0xc9e <__divsf3+0x1e>
     cb2:	55 23       	and	r21, r21
     cb4:	91 f3       	breq	.-28     	; 0xc9a <__divsf3+0x1a>
     cb6:	95 1b       	sub	r25, r21
     cb8:	55 0b       	sbc	r21, r21
     cba:	bb 27       	eor	r27, r27
     cbc:	aa 27       	eor	r26, r26
     cbe:	62 17       	cp	r22, r18
     cc0:	73 07       	cpc	r23, r19
     cc2:	84 07       	cpc	r24, r20
     cc4:	38 f0       	brcs	.+14     	; 0xcd4 <__divsf3_pse+0x26>
     cc6:	9f 5f       	subi	r25, 0xFF	; 255
     cc8:	5f 4f       	sbci	r21, 0xFF	; 255
     cca:	22 0f       	add	r18, r18
     ccc:	33 1f       	adc	r19, r19
     cce:	44 1f       	adc	r20, r20
     cd0:	aa 1f       	adc	r26, r26
     cd2:	a9 f3       	breq	.-22     	; 0xcbe <__divsf3_pse+0x10>
     cd4:	35 d0       	rcall	.+106    	; 0xd40 <__divsf3_pse+0x92>
     cd6:	0e 2e       	mov	r0, r30
     cd8:	3a f0       	brmi	.+14     	; 0xce8 <__divsf3_pse+0x3a>
     cda:	e0 e8       	ldi	r30, 0x80	; 128
     cdc:	32 d0       	rcall	.+100    	; 0xd42 <__divsf3_pse+0x94>
     cde:	91 50       	subi	r25, 0x01	; 1
     ce0:	50 40       	sbci	r21, 0x00	; 0
     ce2:	e6 95       	lsr	r30
     ce4:	00 1c       	adc	r0, r0
     ce6:	ca f7       	brpl	.-14     	; 0xcda <__divsf3_pse+0x2c>
     ce8:	2b d0       	rcall	.+86     	; 0xd40 <__divsf3_pse+0x92>
     cea:	fe 2f       	mov	r31, r30
     cec:	29 d0       	rcall	.+82     	; 0xd40 <__divsf3_pse+0x92>
     cee:	66 0f       	add	r22, r22
     cf0:	77 1f       	adc	r23, r23
     cf2:	88 1f       	adc	r24, r24
     cf4:	bb 1f       	adc	r27, r27
     cf6:	26 17       	cp	r18, r22
     cf8:	37 07       	cpc	r19, r23
     cfa:	48 07       	cpc	r20, r24
     cfc:	ab 07       	cpc	r26, r27
     cfe:	b0 e8       	ldi	r27, 0x80	; 128
     d00:	09 f0       	breq	.+2      	; 0xd04 <__divsf3_pse+0x56>
     d02:	bb 0b       	sbc	r27, r27
     d04:	80 2d       	mov	r24, r0
     d06:	bf 01       	movw	r22, r30
     d08:	ff 27       	eor	r31, r31
     d0a:	93 58       	subi	r25, 0x83	; 131
     d0c:	5f 4f       	sbci	r21, 0xFF	; 255
     d0e:	3a f0       	brmi	.+14     	; 0xd1e <__divsf3_pse+0x70>
     d10:	9e 3f       	cpi	r25, 0xFE	; 254
     d12:	51 05       	cpc	r21, r1
     d14:	78 f0       	brcs	.+30     	; 0xd34 <__divsf3_pse+0x86>
     d16:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_inf>
     d1a:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_szero>
     d1e:	5f 3f       	cpi	r21, 0xFF	; 255
     d20:	e4 f3       	brlt	.-8      	; 0xd1a <__divsf3_pse+0x6c>
     d22:	98 3e       	cpi	r25, 0xE8	; 232
     d24:	d4 f3       	brlt	.-12     	; 0xd1a <__divsf3_pse+0x6c>
     d26:	86 95       	lsr	r24
     d28:	77 95       	ror	r23
     d2a:	67 95       	ror	r22
     d2c:	b7 95       	ror	r27
     d2e:	f7 95       	ror	r31
     d30:	9f 5f       	subi	r25, 0xFF	; 255
     d32:	c9 f7       	brne	.-14     	; 0xd26 <__divsf3_pse+0x78>
     d34:	88 0f       	add	r24, r24
     d36:	91 1d       	adc	r25, r1
     d38:	96 95       	lsr	r25
     d3a:	87 95       	ror	r24
     d3c:	97 f9       	bld	r25, 7
     d3e:	08 95       	ret
     d40:	e1 e0       	ldi	r30, 0x01	; 1
     d42:	66 0f       	add	r22, r22
     d44:	77 1f       	adc	r23, r23
     d46:	88 1f       	adc	r24, r24
     d48:	bb 1f       	adc	r27, r27
     d4a:	62 17       	cp	r22, r18
     d4c:	73 07       	cpc	r23, r19
     d4e:	84 07       	cpc	r24, r20
     d50:	ba 07       	cpc	r27, r26
     d52:	20 f0       	brcs	.+8      	; 0xd5c <__divsf3_pse+0xae>
     d54:	62 1b       	sub	r22, r18
     d56:	73 0b       	sbc	r23, r19
     d58:	84 0b       	sbc	r24, r20
     d5a:	ba 0b       	sbc	r27, r26
     d5c:	ee 1f       	adc	r30, r30
     d5e:	88 f7       	brcc	.-30     	; 0xd42 <__divsf3_pse+0x94>
     d60:	e0 95       	com	r30
     d62:	08 95       	ret

00000d64 <__fixunssfsi>:
     d64:	0e 94 72 07 	call	0xee4	; 0xee4 <__fp_splitA>
     d68:	88 f0       	brcs	.+34     	; 0xd8c <__fixunssfsi+0x28>
     d6a:	9f 57       	subi	r25, 0x7F	; 127
     d6c:	98 f0       	brcs	.+38     	; 0xd94 <__fixunssfsi+0x30>
     d6e:	b9 2f       	mov	r27, r25
     d70:	99 27       	eor	r25, r25
     d72:	b7 51       	subi	r27, 0x17	; 23
     d74:	b0 f0       	brcs	.+44     	; 0xda2 <__fixunssfsi+0x3e>
     d76:	e1 f0       	breq	.+56     	; 0xdb0 <__fixunssfsi+0x4c>
     d78:	66 0f       	add	r22, r22
     d7a:	77 1f       	adc	r23, r23
     d7c:	88 1f       	adc	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	1a f0       	brmi	.+6      	; 0xd88 <__fixunssfsi+0x24>
     d82:	ba 95       	dec	r27
     d84:	c9 f7       	brne	.-14     	; 0xd78 <__fixunssfsi+0x14>
     d86:	14 c0       	rjmp	.+40     	; 0xdb0 <__fixunssfsi+0x4c>
     d88:	b1 30       	cpi	r27, 0x01	; 1
     d8a:	91 f0       	breq	.+36     	; 0xdb0 <__fixunssfsi+0x4c>
     d8c:	0e 94 8c 07 	call	0xf18	; 0xf18 <__fp_zero>
     d90:	b1 e0       	ldi	r27, 0x01	; 1
     d92:	08 95       	ret
     d94:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__fp_zero>
     d98:	67 2f       	mov	r22, r23
     d9a:	78 2f       	mov	r23, r24
     d9c:	88 27       	eor	r24, r24
     d9e:	b8 5f       	subi	r27, 0xF8	; 248
     da0:	39 f0       	breq	.+14     	; 0xdb0 <__fixunssfsi+0x4c>
     da2:	b9 3f       	cpi	r27, 0xF9	; 249
     da4:	cc f3       	brlt	.-14     	; 0xd98 <__fixunssfsi+0x34>
     da6:	86 95       	lsr	r24
     da8:	77 95       	ror	r23
     daa:	67 95       	ror	r22
     dac:	b3 95       	inc	r27
     dae:	d9 f7       	brne	.-10     	; 0xda6 <__fixunssfsi+0x42>
     db0:	3e f4       	brtc	.+14     	; 0xdc0 <__fixunssfsi+0x5c>
     db2:	90 95       	com	r25
     db4:	80 95       	com	r24
     db6:	70 95       	com	r23
     db8:	61 95       	neg	r22
     dba:	7f 4f       	sbci	r23, 0xFF	; 255
     dbc:	8f 4f       	sbci	r24, 0xFF	; 255
     dbe:	9f 4f       	sbci	r25, 0xFF	; 255
     dc0:	08 95       	ret

00000dc2 <__floatunsisf>:
     dc2:	e8 94       	clt
     dc4:	09 c0       	rjmp	.+18     	; 0xdd8 <__floatsisf+0x12>

00000dc6 <__floatsisf>:
     dc6:	97 fb       	bst	r25, 7
     dc8:	3e f4       	brtc	.+14     	; 0xdd8 <__floatsisf+0x12>
     dca:	90 95       	com	r25
     dcc:	80 95       	com	r24
     dce:	70 95       	com	r23
     dd0:	61 95       	neg	r22
     dd2:	7f 4f       	sbci	r23, 0xFF	; 255
     dd4:	8f 4f       	sbci	r24, 0xFF	; 255
     dd6:	9f 4f       	sbci	r25, 0xFF	; 255
     dd8:	99 23       	and	r25, r25
     dda:	a9 f0       	breq	.+42     	; 0xe06 <__floatsisf+0x40>
     ddc:	f9 2f       	mov	r31, r25
     dde:	96 e9       	ldi	r25, 0x96	; 150
     de0:	bb 27       	eor	r27, r27
     de2:	93 95       	inc	r25
     de4:	f6 95       	lsr	r31
     de6:	87 95       	ror	r24
     de8:	77 95       	ror	r23
     dea:	67 95       	ror	r22
     dec:	b7 95       	ror	r27
     dee:	f1 11       	cpse	r31, r1
     df0:	f8 cf       	rjmp	.-16     	; 0xde2 <__floatsisf+0x1c>
     df2:	fa f4       	brpl	.+62     	; 0xe32 <__floatsisf+0x6c>
     df4:	bb 0f       	add	r27, r27
     df6:	11 f4       	brne	.+4      	; 0xdfc <__floatsisf+0x36>
     df8:	60 ff       	sbrs	r22, 0
     dfa:	1b c0       	rjmp	.+54     	; 0xe32 <__floatsisf+0x6c>
     dfc:	6f 5f       	subi	r22, 0xFF	; 255
     dfe:	7f 4f       	sbci	r23, 0xFF	; 255
     e00:	8f 4f       	sbci	r24, 0xFF	; 255
     e02:	9f 4f       	sbci	r25, 0xFF	; 255
     e04:	16 c0       	rjmp	.+44     	; 0xe32 <__floatsisf+0x6c>
     e06:	88 23       	and	r24, r24
     e08:	11 f0       	breq	.+4      	; 0xe0e <__floatsisf+0x48>
     e0a:	96 e9       	ldi	r25, 0x96	; 150
     e0c:	11 c0       	rjmp	.+34     	; 0xe30 <__floatsisf+0x6a>
     e0e:	77 23       	and	r23, r23
     e10:	21 f0       	breq	.+8      	; 0xe1a <__floatsisf+0x54>
     e12:	9e e8       	ldi	r25, 0x8E	; 142
     e14:	87 2f       	mov	r24, r23
     e16:	76 2f       	mov	r23, r22
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <__floatsisf+0x5e>
     e1a:	66 23       	and	r22, r22
     e1c:	71 f0       	breq	.+28     	; 0xe3a <__floatsisf+0x74>
     e1e:	96 e8       	ldi	r25, 0x86	; 134
     e20:	86 2f       	mov	r24, r22
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	2a f0       	brmi	.+10     	; 0xe32 <__floatsisf+0x6c>
     e28:	9a 95       	dec	r25
     e2a:	66 0f       	add	r22, r22
     e2c:	77 1f       	adc	r23, r23
     e2e:	88 1f       	adc	r24, r24
     e30:	da f7       	brpl	.-10     	; 0xe28 <__floatsisf+0x62>
     e32:	88 0f       	add	r24, r24
     e34:	96 95       	lsr	r25
     e36:	87 95       	ror	r24
     e38:	97 f9       	bld	r25, 7
     e3a:	08 95       	ret

00000e3c <__fp_cmp>:
     e3c:	99 0f       	add	r25, r25
     e3e:	00 08       	sbc	r0, r0
     e40:	55 0f       	add	r21, r21
     e42:	aa 0b       	sbc	r26, r26
     e44:	e0 e8       	ldi	r30, 0x80	; 128
     e46:	fe ef       	ldi	r31, 0xFE	; 254
     e48:	16 16       	cp	r1, r22
     e4a:	17 06       	cpc	r1, r23
     e4c:	e8 07       	cpc	r30, r24
     e4e:	f9 07       	cpc	r31, r25
     e50:	c0 f0       	brcs	.+48     	; 0xe82 <__fp_cmp+0x46>
     e52:	12 16       	cp	r1, r18
     e54:	13 06       	cpc	r1, r19
     e56:	e4 07       	cpc	r30, r20
     e58:	f5 07       	cpc	r31, r21
     e5a:	98 f0       	brcs	.+38     	; 0xe82 <__fp_cmp+0x46>
     e5c:	62 1b       	sub	r22, r18
     e5e:	73 0b       	sbc	r23, r19
     e60:	84 0b       	sbc	r24, r20
     e62:	95 0b       	sbc	r25, r21
     e64:	39 f4       	brne	.+14     	; 0xe74 <__fp_cmp+0x38>
     e66:	0a 26       	eor	r0, r26
     e68:	61 f0       	breq	.+24     	; 0xe82 <__fp_cmp+0x46>
     e6a:	23 2b       	or	r18, r19
     e6c:	24 2b       	or	r18, r20
     e6e:	25 2b       	or	r18, r21
     e70:	21 f4       	brne	.+8      	; 0xe7a <__fp_cmp+0x3e>
     e72:	08 95       	ret
     e74:	0a 26       	eor	r0, r26
     e76:	09 f4       	brne	.+2      	; 0xe7a <__fp_cmp+0x3e>
     e78:	a1 40       	sbci	r26, 0x01	; 1
     e7a:	a6 95       	lsr	r26
     e7c:	8f ef       	ldi	r24, 0xFF	; 255
     e7e:	81 1d       	adc	r24, r1
     e80:	81 1d       	adc	r24, r1
     e82:	08 95       	ret

00000e84 <__fp_inf>:
     e84:	97 f9       	bld	r25, 7
     e86:	9f 67       	ori	r25, 0x7F	; 127
     e88:	80 e8       	ldi	r24, 0x80	; 128
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	08 95       	ret

00000e90 <__fp_nan>:
     e90:	9f ef       	ldi	r25, 0xFF	; 255
     e92:	80 ec       	ldi	r24, 0xC0	; 192
     e94:	08 95       	ret

00000e96 <__fp_pscA>:
     e96:	00 24       	eor	r0, r0
     e98:	0a 94       	dec	r0
     e9a:	16 16       	cp	r1, r22
     e9c:	17 06       	cpc	r1, r23
     e9e:	18 06       	cpc	r1, r24
     ea0:	09 06       	cpc	r0, r25
     ea2:	08 95       	ret

00000ea4 <__fp_pscB>:
     ea4:	00 24       	eor	r0, r0
     ea6:	0a 94       	dec	r0
     ea8:	12 16       	cp	r1, r18
     eaa:	13 06       	cpc	r1, r19
     eac:	14 06       	cpc	r1, r20
     eae:	05 06       	cpc	r0, r21
     eb0:	08 95       	ret

00000eb2 <__fp_round>:
     eb2:	09 2e       	mov	r0, r25
     eb4:	03 94       	inc	r0
     eb6:	00 0c       	add	r0, r0
     eb8:	11 f4       	brne	.+4      	; 0xebe <__fp_round+0xc>
     eba:	88 23       	and	r24, r24
     ebc:	52 f0       	brmi	.+20     	; 0xed2 <__fp_round+0x20>
     ebe:	bb 0f       	add	r27, r27
     ec0:	40 f4       	brcc	.+16     	; 0xed2 <__fp_round+0x20>
     ec2:	bf 2b       	or	r27, r31
     ec4:	11 f4       	brne	.+4      	; 0xeca <__fp_round+0x18>
     ec6:	60 ff       	sbrs	r22, 0
     ec8:	04 c0       	rjmp	.+8      	; 0xed2 <__fp_round+0x20>
     eca:	6f 5f       	subi	r22, 0xFF	; 255
     ecc:	7f 4f       	sbci	r23, 0xFF	; 255
     ece:	8f 4f       	sbci	r24, 0xFF	; 255
     ed0:	9f 4f       	sbci	r25, 0xFF	; 255
     ed2:	08 95       	ret

00000ed4 <__fp_split3>:
     ed4:	57 fd       	sbrc	r21, 7
     ed6:	90 58       	subi	r25, 0x80	; 128
     ed8:	44 0f       	add	r20, r20
     eda:	55 1f       	adc	r21, r21
     edc:	59 f0       	breq	.+22     	; 0xef4 <__fp_splitA+0x10>
     ede:	5f 3f       	cpi	r21, 0xFF	; 255
     ee0:	71 f0       	breq	.+28     	; 0xefe <__fp_splitA+0x1a>
     ee2:	47 95       	ror	r20

00000ee4 <__fp_splitA>:
     ee4:	88 0f       	add	r24, r24
     ee6:	97 fb       	bst	r25, 7
     ee8:	99 1f       	adc	r25, r25
     eea:	61 f0       	breq	.+24     	; 0xf04 <__fp_splitA+0x20>
     eec:	9f 3f       	cpi	r25, 0xFF	; 255
     eee:	79 f0       	breq	.+30     	; 0xf0e <__fp_splitA+0x2a>
     ef0:	87 95       	ror	r24
     ef2:	08 95       	ret
     ef4:	12 16       	cp	r1, r18
     ef6:	13 06       	cpc	r1, r19
     ef8:	14 06       	cpc	r1, r20
     efa:	55 1f       	adc	r21, r21
     efc:	f2 cf       	rjmp	.-28     	; 0xee2 <__fp_split3+0xe>
     efe:	46 95       	lsr	r20
     f00:	f1 df       	rcall	.-30     	; 0xee4 <__fp_splitA>
     f02:	08 c0       	rjmp	.+16     	; 0xf14 <__fp_splitA+0x30>
     f04:	16 16       	cp	r1, r22
     f06:	17 06       	cpc	r1, r23
     f08:	18 06       	cpc	r1, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	f1 cf       	rjmp	.-30     	; 0xef0 <__fp_splitA+0xc>
     f0e:	86 95       	lsr	r24
     f10:	71 05       	cpc	r23, r1
     f12:	61 05       	cpc	r22, r1
     f14:	08 94       	sec
     f16:	08 95       	ret

00000f18 <__fp_zero>:
     f18:	e8 94       	clt

00000f1a <__fp_szero>:
     f1a:	bb 27       	eor	r27, r27
     f1c:	66 27       	eor	r22, r22
     f1e:	77 27       	eor	r23, r23
     f20:	cb 01       	movw	r24, r22
     f22:	97 f9       	bld	r25, 7
     f24:	08 95       	ret

00000f26 <__gesf2>:
     f26:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fp_cmp>
     f2a:	08 f4       	brcc	.+2      	; 0xf2e <__gesf2+0x8>
     f2c:	8f ef       	ldi	r24, 0xFF	; 255
     f2e:	08 95       	ret

00000f30 <__mulsf3>:
     f30:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3x>
     f34:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__fp_round>
     f38:	0e 94 4b 07 	call	0xe96	; 0xe96 <__fp_pscA>
     f3c:	38 f0       	brcs	.+14     	; 0xf4c <__mulsf3+0x1c>
     f3e:	0e 94 52 07 	call	0xea4	; 0xea4 <__fp_pscB>
     f42:	20 f0       	brcs	.+8      	; 0xf4c <__mulsf3+0x1c>
     f44:	95 23       	and	r25, r21
     f46:	11 f0       	breq	.+4      	; 0xf4c <__mulsf3+0x1c>
     f48:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_inf>
     f4c:	0c 94 48 07 	jmp	0xe90	; 0xe90 <__fp_nan>
     f50:	11 24       	eor	r1, r1
     f52:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_szero>

00000f56 <__mulsf3x>:
     f56:	0e 94 6a 07 	call	0xed4	; 0xed4 <__fp_split3>
     f5a:	70 f3       	brcs	.-36     	; 0xf38 <__mulsf3+0x8>

00000f5c <__mulsf3_pse>:
     f5c:	95 9f       	mul	r25, r21
     f5e:	c1 f3       	breq	.-16     	; 0xf50 <__mulsf3+0x20>
     f60:	95 0f       	add	r25, r21
     f62:	50 e0       	ldi	r21, 0x00	; 0
     f64:	55 1f       	adc	r21, r21
     f66:	62 9f       	mul	r22, r18
     f68:	f0 01       	movw	r30, r0
     f6a:	72 9f       	mul	r23, r18
     f6c:	bb 27       	eor	r27, r27
     f6e:	f0 0d       	add	r31, r0
     f70:	b1 1d       	adc	r27, r1
     f72:	63 9f       	mul	r22, r19
     f74:	aa 27       	eor	r26, r26
     f76:	f0 0d       	add	r31, r0
     f78:	b1 1d       	adc	r27, r1
     f7a:	aa 1f       	adc	r26, r26
     f7c:	64 9f       	mul	r22, r20
     f7e:	66 27       	eor	r22, r22
     f80:	b0 0d       	add	r27, r0
     f82:	a1 1d       	adc	r26, r1
     f84:	66 1f       	adc	r22, r22
     f86:	82 9f       	mul	r24, r18
     f88:	22 27       	eor	r18, r18
     f8a:	b0 0d       	add	r27, r0
     f8c:	a1 1d       	adc	r26, r1
     f8e:	62 1f       	adc	r22, r18
     f90:	73 9f       	mul	r23, r19
     f92:	b0 0d       	add	r27, r0
     f94:	a1 1d       	adc	r26, r1
     f96:	62 1f       	adc	r22, r18
     f98:	83 9f       	mul	r24, r19
     f9a:	a0 0d       	add	r26, r0
     f9c:	61 1d       	adc	r22, r1
     f9e:	22 1f       	adc	r18, r18
     fa0:	74 9f       	mul	r23, r20
     fa2:	33 27       	eor	r19, r19
     fa4:	a0 0d       	add	r26, r0
     fa6:	61 1d       	adc	r22, r1
     fa8:	23 1f       	adc	r18, r19
     faa:	84 9f       	mul	r24, r20
     fac:	60 0d       	add	r22, r0
     fae:	21 1d       	adc	r18, r1
     fb0:	82 2f       	mov	r24, r18
     fb2:	76 2f       	mov	r23, r22
     fb4:	6a 2f       	mov	r22, r26
     fb6:	11 24       	eor	r1, r1
     fb8:	9f 57       	subi	r25, 0x7F	; 127
     fba:	50 40       	sbci	r21, 0x00	; 0
     fbc:	9a f0       	brmi	.+38     	; 0xfe4 <__mulsf3_pse+0x88>
     fbe:	f1 f0       	breq	.+60     	; 0xffc <__mulsf3_pse+0xa0>
     fc0:	88 23       	and	r24, r24
     fc2:	4a f0       	brmi	.+18     	; 0xfd6 <__mulsf3_pse+0x7a>
     fc4:	ee 0f       	add	r30, r30
     fc6:	ff 1f       	adc	r31, r31
     fc8:	bb 1f       	adc	r27, r27
     fca:	66 1f       	adc	r22, r22
     fcc:	77 1f       	adc	r23, r23
     fce:	88 1f       	adc	r24, r24
     fd0:	91 50       	subi	r25, 0x01	; 1
     fd2:	50 40       	sbci	r21, 0x00	; 0
     fd4:	a9 f7       	brne	.-22     	; 0xfc0 <__mulsf3_pse+0x64>
     fd6:	9e 3f       	cpi	r25, 0xFE	; 254
     fd8:	51 05       	cpc	r21, r1
     fda:	80 f0       	brcs	.+32     	; 0xffc <__mulsf3_pse+0xa0>
     fdc:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_inf>
     fe0:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_szero>
     fe4:	5f 3f       	cpi	r21, 0xFF	; 255
     fe6:	e4 f3       	brlt	.-8      	; 0xfe0 <__mulsf3_pse+0x84>
     fe8:	98 3e       	cpi	r25, 0xE8	; 232
     fea:	d4 f3       	brlt	.-12     	; 0xfe0 <__mulsf3_pse+0x84>
     fec:	86 95       	lsr	r24
     fee:	77 95       	ror	r23
     ff0:	67 95       	ror	r22
     ff2:	b7 95       	ror	r27
     ff4:	f7 95       	ror	r31
     ff6:	e7 95       	ror	r30
     ff8:	9f 5f       	subi	r25, 0xFF	; 255
     ffa:	c1 f7       	brne	.-16     	; 0xfec <__mulsf3_pse+0x90>
     ffc:	fe 2b       	or	r31, r30
     ffe:	88 0f       	add	r24, r24
    1000:	91 1d       	adc	r25, r1
    1002:	96 95       	lsr	r25
    1004:	87 95       	ror	r24
    1006:	97 f9       	bld	r25, 7
    1008:	08 95       	ret

0000100a <__udivmodhi4>:
    100a:	aa 1b       	sub	r26, r26
    100c:	bb 1b       	sub	r27, r27
    100e:	51 e1       	ldi	r21, 0x11	; 17
    1010:	07 c0       	rjmp	.+14     	; 0x1020 <__udivmodhi4_ep>

00001012 <__udivmodhi4_loop>:
    1012:	aa 1f       	adc	r26, r26
    1014:	bb 1f       	adc	r27, r27
    1016:	a6 17       	cp	r26, r22
    1018:	b7 07       	cpc	r27, r23
    101a:	10 f0       	brcs	.+4      	; 0x1020 <__udivmodhi4_ep>
    101c:	a6 1b       	sub	r26, r22
    101e:	b7 0b       	sbc	r27, r23

00001020 <__udivmodhi4_ep>:
    1020:	88 1f       	adc	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	5a 95       	dec	r21
    1026:	a9 f7       	brne	.-22     	; 0x1012 <__udivmodhi4_loop>
    1028:	80 95       	com	r24
    102a:	90 95       	com	r25
    102c:	bc 01       	movw	r22, r24
    102e:	cd 01       	movw	r24, r26
    1030:	08 95       	ret

00001032 <__umulhisi3>:
    1032:	a2 9f       	mul	r26, r18
    1034:	b0 01       	movw	r22, r0
    1036:	b3 9f       	mul	r27, r19
    1038:	c0 01       	movw	r24, r0
    103a:	a3 9f       	mul	r26, r19
    103c:	70 0d       	add	r23, r0
    103e:	81 1d       	adc	r24, r1
    1040:	11 24       	eor	r1, r1
    1042:	91 1d       	adc	r25, r1
    1044:	b2 9f       	mul	r27, r18
    1046:	70 0d       	add	r23, r0
    1048:	81 1d       	adc	r24, r1
    104a:	11 24       	eor	r1, r1
    104c:	91 1d       	adc	r25, r1
    104e:	08 95       	ret

00001050 <_exit>:
    1050:	f8 94       	cli

00001052 <__stop_program>:
    1052:	ff cf       	rjmp	.-2      	; 0x1052 <__stop_program>
