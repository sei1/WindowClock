
WindowClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00803800  00000aca  00000b5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00803814  00803814  00000b72  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ba4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fb4  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b1f  00000000  00000000  00002bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000760  00000000  00000000  0000470f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00004e70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d3d  00000000  00000000  00005000  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d8  00000000  00000000  00005d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00006415  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__vector_4>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 2d 03 	jmp	0x65a	; 0x65a <__vector_6>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__vector_10>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
  88:	18 e3       	ldi	r17, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	ea ec       	ldi	r30, 0xCA	; 202
  90:	fa e0       	ldi	r31, 0x0A	; 10
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 31       	cpi	r26, 0x14	; 20
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	28 e3       	ldi	r18, 0x38	; 56
  a0:	a4 e1       	ldi	r26, 0x14	; 20
  a2:	b8 e3       	ldi	r27, 0x38	; 56
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ae 31       	cpi	r26, 0x1E	; 30
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <main>
  b2:	0c 94 63 05 	jmp	0xac6	; 0xac6 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <get_v>:
// プログラム本文
//---------------------------------


//キャパシタに蓄えられた電源電圧と太陽電池の発電電圧を取得する関数
void get_v (void) {
  ba:	cf 92       	push	r12
  bc:	df 92       	push	r13
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
	
	uint16_t x = 0;
	uint16_t y = 0;

	// 基準電圧1.1V / 電源電圧 を10bit(1024段階)で測定
	ADC0_MUXPOS = 0b00011101; //基準電圧
  c6:	8d e1       	ldi	r24, 0x1D	; 29
  c8:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7f8606>

	ADC0_COMMAND = 1;//AD変換開始
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
	while(ADC0_COMMAND);
  d2:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
  d6:	81 11       	cpse	r24, r1
  d8:	fc cf       	rjmp	.-8      	; 0xd2 <get_v+0x18>
	ADC0_COMMAND = 0;//AD変換終了
  da:	c8 e0       	ldi	r28, 0x08	; 8
  dc:	d6 e0       	ldi	r29, 0x06	; 6
  de:	18 82       	st	Y, r1

	y = ADC0_RES;
  e0:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
  e4:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
	
	//電源電圧を算出
	supply_v = 1023 * 1.1 / y;
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__floatunsisf>
  f0:	6b 01       	movw	r12, r22
  f2:	7c 01       	movw	r14, r24
  f4:	9b 01       	movw	r18, r22
  f6:	ac 01       	movw	r20, r24
  f8:	6a e9       	ldi	r22, 0x9A	; 154
  fa:	79 ea       	ldi	r23, 0xA9	; 169
  fc:	8c e8       	ldi	r24, 0x8C	; 140
  fe:	94 e4       	ldi	r25, 0x44	; 68
 100:	0e 94 c7 03 	call	0x78e	; 0x78e <__divsf3>
 104:	60 93 05 38 	sts	0x3805, r22	; 0x803805 <supply_v>
 108:	70 93 06 38 	sts	0x3806, r23	; 0x803806 <supply_v+0x1>
 10c:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <supply_v+0x2>
 110:	90 93 08 38 	sts	0x3808, r25	; 0x803808 <supply_v+0x3>

	//PB1をタクトスイッチ入力から一時的に太陽電池電圧の測定ピンに切り替える
	PORTB_PIN1CTRL = 0b00000000; //プルアップ無効 エッジを検出しない
 114:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>
	VPORTB_DIR    |= 0b00000010; //出力モードに変更
 118:	84 b1       	in	r24, 0x04	; 4
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	84 b9       	out	0x04, r24	; 4
	VPORTB_OUT    &= 0b11111101; //出力Low
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	8d 7f       	andi	r24, 0xFD	; 253
 122:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	89 e2       	ldi	r24, 0x29	; 41
 126:	8a 95       	dec	r24
 128:	f1 f7       	brne	.-4      	; 0x126 <__EEPROM_REGION_LENGTH__+0x26>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <__EEPROM_REGION_LENGTH__+0x2c>
	_delay_us(500);//少し待機
	VPORTB_DIR    &= 0b11111101; //入力モードに戻す
 12c:	84 b1       	in	r24, 0x04	; 4
 12e:	8d 7f       	andi	r24, 0xFD	; 253
 130:	84 b9       	out	0x04, r24	; 4

	//ADC入力ピンの選択
	// PB1ピンの電圧 / 電源電圧 を10bit(1024段階)で測定
	ADC0_MUXPOS = 0b00001010; //AIN10 = PB1
 132:	8a e0       	ldi	r24, 0x0A	; 10
 134:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7f8606>

	ADC0_COMMAND = 1;//AD変換開始
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	88 83       	st	Y, r24
	while(ADC0_COMMAND);
 13c:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
 140:	81 11       	cpse	r24, r1
 142:	fc cf       	rjmp	.-8      	; 0x13c <__EEPROM_REGION_LENGTH__+0x3c>
	ADC0_COMMAND = 0;//AD変換終了
 144:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>

	x = ADC0_RES;
 148:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
 14c:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>

	//PB1のプルアップを有効に戻す
	PORTB_PIN1CTRL = 0b00001001; //プルアップ有効 両方のエッジを検出する
 150:	89 e0       	ldi	r24, 0x09	; 9
 152:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>

	//太陽電池電圧を算出
	solar_v = x * 1.1 / y;
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__floatunsisf>
 15e:	2d ec       	ldi	r18, 0xCD	; 205
 160:	3c ec       	ldi	r19, 0xCC	; 204
 162:	4c e8       	ldi	r20, 0x8C	; 140
 164:	5f e3       	ldi	r21, 0x3F	; 63
 166:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__mulsf3>
 16a:	a7 01       	movw	r20, r14
 16c:	96 01       	movw	r18, r12
 16e:	0e 94 c7 03 	call	0x78e	; 0x78e <__divsf3>
 172:	60 93 01 38 	sts	0x3801, r22	; 0x803801 <solar_v>
 176:	70 93 02 38 	sts	0x3802, r23	; 0x803802 <solar_v+0x1>
 17a:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <solar_v+0x2>
 17e:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <solar_v+0x3>
}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	ff 90       	pop	r15
 188:	ef 90       	pop	r14
 18a:	df 90       	pop	r13
 18c:	cf 90       	pop	r12
 18e:	08 95       	ret

00000190 <sens_delay_ms>:

//ボタン操作を受け付けながら待機する関数
void sens_delay_ms (uint16_t num) {
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	8c 01       	movw	r16, r24

	for (unsigned int i = 0; i < num; i++){
 19a:	c0 e0       	ldi	r28, 0x00	; 0
 19c:	d0 e0       	ldi	r29, 0x00	; 0
 19e:	65 c0       	rjmp	.+202    	; 0x26a <sens_delay_ms+0xda>
		if(!(VPORTB_IN & PIN1_bm)) {
 1a0:	31 99       	sbic	0x06, 1	; 6
 1a2:	5e c0       	rjmp	.+188    	; 0x260 <sens_delay_ms+0xd0>

			//ここにタクトスイッチが押された時の動作を記述
			wakeup = 1600;
 1a4:	80 e4       	ldi	r24, 0x40	; 64
 1a6:	96 e0       	ldi	r25, 0x06	; 6
 1a8:	80 93 1a 38 	sts	0x381A, r24	; 0x80381a <wakeup>
 1ac:	90 93 1b 38 	sts	0x381B, r25	; 0x80381b <wakeup+0x1>
		
			switch (mode) {
 1b0:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <mode>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	d1 f0       	breq	.+52     	; 0x1ec <sens_delay_ms+0x5c>
 1b8:	83 30       	cpi	r24, 0x03	; 3
 1ba:	89 f1       	breq	.+98     	; 0x21e <sens_delay_ms+0x8e>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	09 f0       	breq	.+2      	; 0x1c2 <sens_delay_ms+0x32>
 1c0:	4f c0       	rjmp	.+158    	; 0x260 <sens_delay_ms+0xd0>
				case MODE_CLOCK:
					while(!(VPORTB_IN & PIN1_bm));
 1c2:	31 9b       	sbis	0x06, 1	; 6
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <sens_delay_ms+0x32>
					if(change_mode_after) {
 1c6:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <change_mode_after>
 1ca:	88 23       	and	r24, r24
 1cc:	19 f0       	breq	.+6      	; 0x1d4 <sens_delay_ms+0x44>
						change_mode_after = 0;
 1ce:	10 92 17 38 	sts	0x3817, r1	; 0x803817 <change_mode_after>
 1d2:	46 c0       	rjmp	.+140    	; 0x260 <sens_delay_ms+0xd0>
					}else{
						//電圧の取得
						get_v();
 1d4:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
						display_v = 200;
 1d8:	88 ec       	ldi	r24, 0xC8	; 200
 1da:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <display_v>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	89 e6       	ldi	r24, 0x69	; 105
 1e0:	98 e1       	ldi	r25, 0x18	; 24
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <sens_delay_ms+0x52>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <sens_delay_ms+0x58>
 1e8:	00 00       	nop
 1ea:	3a c0       	rjmp	.+116    	; 0x260 <sens_delay_ms+0xd0>
						_delay_ms(100);
					}
				break;

				case MODE_HOUR_SET:
					while(!(VPORTB_IN & PIN1_bm));
 1ec:	31 9b       	sbis	0x06, 1	; 6
 1ee:	fe cf       	rjmp	.-4      	; 0x1ec <sens_delay_ms+0x5c>
					if(change_mode_after) {
 1f0:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <change_mode_after>
 1f4:	88 23       	and	r24, r24
 1f6:	19 f0       	breq	.+6      	; 0x1fe <sens_delay_ms+0x6e>
						change_mode_after = 0;
 1f8:	10 92 17 38 	sts	0x3817, r1	; 0x803817 <change_mode_after>
 1fc:	31 c0       	rjmp	.+98     	; 0x260 <sens_delay_ms+0xd0>
					}else{
						if(++hour >= 24) hour = 0;
 1fe:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <hour>
 202:	8f 5f       	subi	r24, 0xFF	; 255
 204:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <hour>
 208:	88 31       	cpi	r24, 0x18	; 24
 20a:	10 f0       	brcs	.+4      	; 0x210 <sens_delay_ms+0x80>
 20c:	10 92 1c 38 	sts	0x381C, r1	; 0x80381c <hour>
 210:	89 e6       	ldi	r24, 0x69	; 105
 212:	98 e1       	ldi	r25, 0x18	; 24
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <sens_delay_ms+0x84>
 218:	00 c0       	rjmp	.+0      	; 0x21a <sens_delay_ms+0x8a>
 21a:	00 00       	nop
 21c:	21 c0       	rjmp	.+66     	; 0x260 <sens_delay_ms+0xd0>
						_delay_ms(100);
					}
				break;

				case MODE_MIN_SET:
					while(!(VPORTB_IN & PIN1_bm));
 21e:	31 9b       	sbis	0x06, 1	; 6
 220:	fe cf       	rjmp	.-4      	; 0x21e <sens_delay_ms+0x8e>
					if(change_mode_after) {
 222:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <change_mode_after>
 226:	88 23       	and	r24, r24
 228:	19 f0       	breq	.+6      	; 0x230 <sens_delay_ms+0xa0>
						change_mode_after = 0;
 22a:	10 92 17 38 	sts	0x3817, r1	; 0x803817 <change_mode_after>
 22e:	18 c0       	rjmp	.+48     	; 0x260 <sens_delay_ms+0xd0>
					}else{
						if(++min >= 60) {
 230:	80 91 1d 38 	lds	r24, 0x381D	; 0x80381d <min>
 234:	8f 5f       	subi	r24, 0xFF	; 255
 236:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <min>
 23a:	8c 33       	cpi	r24, 0x3C	; 60
 23c:	88 f0       	brcs	.+34     	; 0x260 <sens_delay_ms+0xd0>
							min = 0;
 23e:	10 92 1d 38 	sts	0x381D, r1	; 0x80381d <min>
							if(++hour >= 24) hour = 0;
 242:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <hour>
 246:	8f 5f       	subi	r24, 0xFF	; 255
 248:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <hour>
 24c:	88 31       	cpi	r24, 0x18	; 24
 24e:	10 f0       	brcs	.+4      	; 0x254 <sens_delay_ms+0xc4>
 250:	10 92 1c 38 	sts	0x381C, r1	; 0x80381c <hour>
 254:	89 e6       	ldi	r24, 0x69	; 105
 256:	98 e1       	ldi	r25, 0x18	; 24
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <sens_delay_ms+0xc8>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <sens_delay_ms+0xce>
 25e:	00 00       	nop
 260:	93 e5       	ldi	r25, 0x53	; 83
 262:	9a 95       	dec	r25
 264:	f1 f7       	brne	.-4      	; 0x262 <sens_delay_ms+0xd2>
 266:	00 00       	nop
}

//ボタン操作を受け付けながら待機する関数
void sens_delay_ms (uint16_t num) {

	for (unsigned int i = 0; i < num; i++){
 268:	21 96       	adiw	r28, 0x01	; 1
 26a:	c0 17       	cp	r28, r16
 26c:	d1 07       	cpc	r29, r17
 26e:	08 f4       	brcc	.+2      	; 0x272 <sens_delay_ms+0xe2>
 270:	97 cf       	rjmp	.-210    	; 0x1a0 <sens_delay_ms+0x10>
				break;
			}
		}
		_delay_ms(1);
	}
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	08 95       	ret

0000027c <seg_all_off>:

//7セグをすべて消灯する関数
void seg_all_off (void) {

	//他のセルの消灯ドットを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	VPORTA_OUT = VPORTA_OUT & 0b00000001;
 27c:	81 b1       	in	r24, 0x01	; 1
 27e:	81 70       	andi	r24, 0x01	; 1
 280:	81 b9       	out	0x01, r24	; 1
	VPORTC_OUT = VPORTC_OUT & 0b11111110;
 282:	89 b1       	in	r24, 0x09	; 9
 284:	8e 7f       	andi	r24, 0xFE	; 254
 286:	89 b9       	out	0x09, r24	; 9
	//ダイナミック点灯用トランジスタも全てOFF
	VPORTB_OUT = VPORTB_OUT & 0b11001111;
 288:	85 b1       	in	r24, 0x05	; 5
 28a:	8f 7c       	andi	r24, 0xCF	; 207
 28c:	85 b9       	out	0x05, r24	; 5
	VPORTC_OUT = VPORTC_OUT & 0b11110001;
 28e:	89 b1       	in	r24, 0x09	; 9
 290:	81 7f       	andi	r24, 0xF1	; 241
 292:	89 b9       	out	0x09, r24	; 9
 294:	08 95       	ret

00000296 <change_mode>:
}

//モードを切り替える関数
//引数に0を指定した場合は次の定数のモードへ 定数を指定した場合はそのモードへ
void change_mode (uint8_t cmode) {
	if(cmode) {
 296:	88 23       	and	r24, r24
 298:	19 f0       	breq	.+6      	; 0x2a0 <change_mode+0xa>
		mode = cmode;
 29a:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <mode>
 29e:	08 95       	ret
	}else if(mode == MODE_MIN_SET) {
 2a0:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <mode>
 2a4:	83 30       	cpi	r24, 0x03	; 3
 2a6:	21 f4       	brne	.+8      	; 0x2b0 <change_mode+0x1a>
		mode = MODE_CLOCK;
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <mode>
 2ae:	08 95       	ret
	}else{
		mode++;
 2b0:	8f 5f       	subi	r24, 0xFF	; 255
 2b2:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <mode>
 2b6:	08 95       	ret

000002b8 <__vector_10>:
	}
}

//TCA割り込み
ISR (TCA0_CMP0_vect) {
 2b8:	1f 92       	push	r1
 2ba:	0f 92       	push	r0
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	0f 92       	push	r0
 2c0:	11 24       	eor	r1, r1
 2c2:	ef 92       	push	r14
 2c4:	ff 92       	push	r15
 2c6:	0f 93       	push	r16
 2c8:	1f 93       	push	r17
 2ca:	2f 93       	push	r18
 2cc:	3f 93       	push	r19
 2ce:	4f 93       	push	r20
 2d0:	5f 93       	push	r21
 2d2:	6f 93       	push	r22
 2d4:	7f 93       	push	r23
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	af 93       	push	r26
 2dc:	bf 93       	push	r27
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	ef 93       	push	r30
 2e4:	ff 93       	push	r31

	//wakeupが0ならセグをすべて消灯してそれ以外を実行しない
	//メインループのseg_all_off関数とsleep_mode関数の間にこの割り込みが入り中途半端に7セグが点灯した状態でスリープするのを防ぐ記述
	if(!wakeup) {
 2e6:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <wakeup>
 2ea:	90 91 1b 38 	lds	r25, 0x381B	; 0x80381b <wakeup+0x1>
 2ee:	89 2b       	or	r24, r25
 2f0:	19 f4       	brne	.+6      	; 0x2f8 <__vector_10+0x40>
		seg_all_off();
 2f2:	0e 94 3e 01 	call	0x27c	; 0x27c <seg_all_off>
		return;
 2f6:	61 c1       	rjmp	.+706    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
	}

	TCA0_SINGLE_CNT = 0;//カウントリセット
 2f8:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__RODATA_PM_OFFSET__+0x7f8a20>
 2fc:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__RODATA_PM_OFFSET__+0x7f8a21>
	TCA0_SINGLE_INTFLAGS = 0b00010000; //割り込み要求フラグを解除
 300:	80 e1       	ldi	r24, 0x10	; 16
 302:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>
	uint8_t dig1, dig2, dig3, dig4, dig5 = 0;
	uint8_t dig1c, dig2c, dig4c, dig5c;
	dig1c = dig2c = dig4c = dig5c = 0;

	//太陽電池の発電電圧とキャパシタの電圧を表示
	if(display_v && mode == MODE_CLOCK) {
 306:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <display_v>
 30a:	88 23       	and	r24, r24
 30c:	09 f4       	brne	.+2      	; 0x310 <__vector_10+0x58>
 30e:	6f c0       	rjmp	.+222    	; 0x3ee <__vector_10+0x136>
 310:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <mode>
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	09 f0       	breq	.+2      	; 0x31a <__vector_10+0x62>
 318:	6a c0       	rjmp	.+212    	; 0x3ee <__vector_10+0x136>
		uint8_t spv = supply_v * 10;
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	40 e2       	ldi	r20, 0x20	; 32
 320:	51 e4       	ldi	r21, 0x41	; 65
 322:	60 91 05 38 	lds	r22, 0x3805	; 0x803805 <supply_v>
 326:	70 91 06 38 	lds	r23, 0x3806	; 0x803806 <supply_v+0x1>
 32a:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <supply_v+0x2>
 32e:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <supply_v+0x3>
 332:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__mulsf3>
 336:	0e 94 39 04 	call	0x872	; 0x872 <__fixunssfsi>
 33a:	c6 2f       	mov	r28, r22
		uint8_t slv =  solar_v * 10;
 33c:	20 e0       	ldi	r18, 0x00	; 0
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	40 e2       	ldi	r20, 0x20	; 32
 342:	51 e4       	ldi	r21, 0x41	; 65
 344:	60 91 01 38 	lds	r22, 0x3801	; 0x803801 <solar_v>
 348:	70 91 02 38 	lds	r23, 0x3802	; 0x803802 <solar_v+0x1>
 34c:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <solar_v+0x2>
 350:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <solar_v+0x3>
 354:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__mulsf3>
 358:	0e 94 39 04 	call	0x872	; 0x872 <__fixunssfsi>
		dig1  = seg[spv % 10];
 35c:	8d ec       	ldi	r24, 0xCD	; 205
 35e:	c8 9f       	mul	r28, r24
 360:	e1 2d       	mov	r30, r1
 362:	11 24       	eor	r1, r1
 364:	e6 95       	lsr	r30
 366:	e6 95       	lsr	r30
 368:	e6 95       	lsr	r30
 36a:	2e 2f       	mov	r18, r30
 36c:	22 0f       	add	r18, r18
 36e:	92 2f       	mov	r25, r18
 370:	99 0f       	add	r25, r25
 372:	99 0f       	add	r25, r25
 374:	92 0f       	add	r25, r18
 376:	c9 1b       	sub	r28, r25
 378:	ac 2f       	mov	r26, r28
 37a:	b0 e0       	ldi	r27, 0x00	; 0
 37c:	a6 5f       	subi	r26, 0xF6	; 246
 37e:	b7 4c       	sbci	r27, 0xC7	; 199
 380:	cc 91       	ld	r28, X
		dig2  = seg[(spv / 10) % 10];
 382:	e8 9f       	mul	r30, r24
 384:	91 2d       	mov	r25, r1
 386:	11 24       	eor	r1, r1
 388:	96 95       	lsr	r25
 38a:	96 95       	lsr	r25
 38c:	96 95       	lsr	r25
 38e:	99 0f       	add	r25, r25
 390:	29 2f       	mov	r18, r25
 392:	22 0f       	add	r18, r18
 394:	22 0f       	add	r18, r18
 396:	92 0f       	add	r25, r18
 398:	e9 1b       	sub	r30, r25
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	e6 5f       	subi	r30, 0xF6	; 246
 39e:	f7 4c       	sbci	r31, 0xC7	; 199
 3a0:	d0 81       	ld	r29, Z
		dig3  = 0b00000000;
		dig4  = seg[slv % 10];
 3a2:	68 9f       	mul	r22, r24
 3a4:	e1 2d       	mov	r30, r1
 3a6:	11 24       	eor	r1, r1
 3a8:	e6 95       	lsr	r30
 3aa:	e6 95       	lsr	r30
 3ac:	e6 95       	lsr	r30
 3ae:	2e 2f       	mov	r18, r30
 3b0:	22 0f       	add	r18, r18
 3b2:	92 2f       	mov	r25, r18
 3b4:	99 0f       	add	r25, r25
 3b6:	99 0f       	add	r25, r25
 3b8:	92 0f       	add	r25, r18
 3ba:	69 1b       	sub	r22, r25
 3bc:	a6 2f       	mov	r26, r22
 3be:	b0 e0       	ldi	r27, 0x00	; 0
 3c0:	a6 5f       	subi	r26, 0xF6	; 246
 3c2:	b7 4c       	sbci	r27, 0xC7	; 199
 3c4:	1c 91       	ld	r17, X
		dig5  = seg[(slv / 10) % 10];
 3c6:	e8 9f       	mul	r30, r24
 3c8:	81 2d       	mov	r24, r1
 3ca:	11 24       	eor	r1, r1
 3cc:	86 95       	lsr	r24
 3ce:	86 95       	lsr	r24
 3d0:	86 95       	lsr	r24
 3d2:	88 0f       	add	r24, r24
 3d4:	98 2f       	mov	r25, r24
 3d6:	99 0f       	add	r25, r25
 3d8:	99 0f       	add	r25, r25
 3da:	89 0f       	add	r24, r25
 3dc:	e8 1b       	sub	r30, r24
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	e6 5f       	subi	r30, 0xF6	; 246
 3e2:	f7 4c       	sbci	r31, 0xC7	; 199
 3e4:	00 81       	ld	r16, Z
		dig2c = dig5c =0b00000001;//ドット(小数点)
 3e6:	ff 24       	eor	r15, r15
 3e8:	f3 94       	inc	r15
	if(display_v && mode == MODE_CLOCK) {
		uint8_t spv = supply_v * 10;
		uint8_t slv =  solar_v * 10;
		dig1  = seg[spv % 10];
		dig2  = seg[(spv / 10) % 10];
		dig3  = 0b00000000;
 3ea:	e1 2c       	mov	r14, r1
	uint8_t dig1, dig2, dig3, dig4, dig5 = 0;
	uint8_t dig1c, dig2c, dig4c, dig5c;
	dig1c = dig2c = dig4c = dig5c = 0;

	//太陽電池の発電電圧とキャパシタの電圧を表示
	if(display_v && mode == MODE_CLOCK) {
 3ec:	55 c0       	rjmp	.+170    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
		dig4  = seg[slv % 10];
		dig5  = seg[(slv / 10) % 10];
		dig2c = dig5c =0b00000001;//ドット(小数点)

	}else{//時刻を表示
		dig1  = seg[min % 10];
 3ee:	c0 91 1d 38 	lds	r28, 0x381D	; 0x80381d <min>
 3f2:	ed ec       	ldi	r30, 0xCD	; 205
 3f4:	ce 9f       	mul	r28, r30
 3f6:	a1 2d       	mov	r26, r1
 3f8:	11 24       	eor	r1, r1
 3fa:	a6 95       	lsr	r26
 3fc:	a6 95       	lsr	r26
 3fe:	a6 95       	lsr	r26
 400:	9a 2f       	mov	r25, r26
 402:	99 0f       	add	r25, r25
 404:	89 2f       	mov	r24, r25
 406:	88 0f       	add	r24, r24
 408:	88 0f       	add	r24, r24
 40a:	89 0f       	add	r24, r25
 40c:	c8 1b       	sub	r28, r24
 40e:	d0 e0       	ldi	r29, 0x00	; 0
 410:	c6 5f       	subi	r28, 0xF6	; 246
 412:	d7 4c       	sbci	r29, 0xC7	; 199
 414:	c8 81       	ld	r28, Y
		dig2  = seg[(min / 10) % 10];
 416:	ae 9f       	mul	r26, r30
 418:	81 2d       	mov	r24, r1
 41a:	11 24       	eor	r1, r1
 41c:	86 95       	lsr	r24
 41e:	86 95       	lsr	r24
 420:	86 95       	lsr	r24
 422:	88 0f       	add	r24, r24
 424:	98 2f       	mov	r25, r24
 426:	99 0f       	add	r25, r25
 428:	99 0f       	add	r25, r25
 42a:	89 0f       	add	r24, r25
 42c:	a8 1b       	sub	r26, r24
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	a6 5f       	subi	r26, 0xF6	; 246
 432:	b7 4c       	sbci	r27, 0xC7	; 199
 434:	dc 91       	ld	r29, X
		dig3  = 0b00000110;
		dig4  = seg[hour % 10];
 436:	a0 91 1c 38 	lds	r26, 0x381C	; 0x80381c <hour>
 43a:	ae 9f       	mul	r26, r30
 43c:	81 2d       	mov	r24, r1
 43e:	11 24       	eor	r1, r1
 440:	86 95       	lsr	r24
 442:	86 95       	lsr	r24
 444:	86 95       	lsr	r24
 446:	28 2f       	mov	r18, r24
 448:	22 0f       	add	r18, r18
 44a:	92 2f       	mov	r25, r18
 44c:	99 0f       	add	r25, r25
 44e:	99 0f       	add	r25, r25
 450:	92 0f       	add	r25, r18
 452:	a9 1b       	sub	r26, r25
 454:	b0 e0       	ldi	r27, 0x00	; 0
 456:	a6 5f       	subi	r26, 0xF6	; 246
 458:	b7 4c       	sbci	r27, 0xC7	; 199
 45a:	1c 91       	ld	r17, X

		//dig5のみ0なら不点灯にする(ゼロサプレス)
		uint8_t zerocheck = (hour / 10) % 10;
 45c:	8e 9f       	mul	r24, r30
 45e:	e1 2d       	mov	r30, r1
 460:	11 24       	eor	r1, r1
 462:	e6 95       	lsr	r30
 464:	e6 95       	lsr	r30
 466:	e6 95       	lsr	r30
 468:	ee 0f       	add	r30, r30
 46a:	9e 2f       	mov	r25, r30
 46c:	99 0f       	add	r25, r25
 46e:	99 0f       	add	r25, r25
 470:	e9 0f       	add	r30, r25
 472:	8e 1b       	sub	r24, r30
		if(zerocheck == 0) {
 474:	59 f0       	breq	.+22     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
			dig5 = 0b00000000;
		}else{
			dig5   = seg[zerocheck];
 476:	e8 2f       	mov	r30, r24
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	e6 5f       	subi	r30, 0xF6	; 246
 47c:	f7 4c       	sbci	r31, 0xC7	; 199
 47e:	00 81       	ld	r16, Z
	TCA0_SINGLE_INTFLAGS = 0b00010000; //割り込み要求フラグを解除

	static uint8_t sel = 0;
	uint8_t dig1, dig2, dig3, dig4, dig5 = 0;
	uint8_t dig1c, dig2c, dig4c, dig5c;
	dig1c = dig2c = dig4c = dig5c = 0;
 480:	f1 2c       	mov	r15, r1
		dig2c = dig5c =0b00000001;//ドット(小数点)

	}else{//時刻を表示
		dig1  = seg[min % 10];
		dig2  = seg[(min / 10) % 10];
		dig3  = 0b00000110;
 482:	0f 2e       	mov	r0, r31
 484:	f6 e0       	ldi	r31, 0x06	; 6
 486:	ef 2e       	mov	r14, r31
 488:	f0 2d       	mov	r31, r0
 48a:	06 c0       	rjmp	.+12     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
	TCA0_SINGLE_INTFLAGS = 0b00010000; //割り込み要求フラグを解除

	static uint8_t sel = 0;
	uint8_t dig1, dig2, dig3, dig4, dig5 = 0;
	uint8_t dig1c, dig2c, dig4c, dig5c;
	dig1c = dig2c = dig4c = dig5c = 0;
 48c:	f1 2c       	mov	r15, r1
		dig4  = seg[hour % 10];

		//dig5のみ0なら不点灯にする(ゼロサプレス)
		uint8_t zerocheck = (hour / 10) % 10;
		if(zerocheck == 0) {
			dig5 = 0b00000000;
 48e:	00 e0       	ldi	r16, 0x00	; 0
		dig2c = dig5c =0b00000001;//ドット(小数点)

	}else{//時刻を表示
		dig1  = seg[min % 10];
		dig2  = seg[(min / 10) % 10];
		dig3  = 0b00000110;
 490:	0f 2e       	mov	r0, r31
 492:	f6 e0       	ldi	r31, 0x06	; 6
 494:	ef 2e       	mov	r14, r31
 496:	f0 2d       	mov	r31, r0
	}

	//時刻設定時の点滅演出
	//点滅カウンター
	static uint8_t wink = 0;
	if(mode == MODE_HOUR_SET) {
 498:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <mode>
 49c:	82 30       	cpi	r24, 0x02	; 2
 49e:	41 f4       	brne	.+16     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		if(++wink < 128) dig4 = dig5 = 0b00000000;
 4a0:	80 91 15 38 	lds	r24, 0x3815	; 0x803815 <wink.3561>
 4a4:	8f 5f       	subi	r24, 0xFF	; 255
 4a6:	80 93 15 38 	sts	0x3815, r24	; 0x803815 <wink.3561>
 4aa:	88 23       	and	r24, r24
 4ac:	74 f4       	brge	.+28     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4ae:	12 c0       	rjmp	.+36     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
	}else if(mode == MODE_MIN_SET) {
 4b0:	83 30       	cpi	r24, 0x03	; 3
 4b2:	41 f4       	brne	.+16     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
		if(++wink < 128) dig1 = dig2 = 0b00000000;
 4b4:	80 91 15 38 	lds	r24, 0x3815	; 0x803815 <wink.3561>
 4b8:	8f 5f       	subi	r24, 0xFF	; 255
 4ba:	80 93 15 38 	sts	0x3815, r24	; 0x803815 <wink.3561>
 4be:	88 23       	and	r24, r24
 4c0:	3c f4       	brge	.+14     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4c2:	08 c0       	rjmp	.+16     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
	}else{
		wink = 0;
 4c4:	10 92 15 38 	sts	0x3815, r1	; 0x803815 <wink.3561>
 4c8:	05 c0       	rjmp	.+10     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>

	//時刻設定時の点滅演出
	//点滅カウンター
	static uint8_t wink = 0;
	if(mode == MODE_HOUR_SET) {
		if(++wink < 128) dig4 = dig5 = 0b00000000;
 4ca:	00 e0       	ldi	r16, 0x00	; 0
 4cc:	10 e0       	ldi	r17, 0x00	; 0
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
	}else if(mode == MODE_MIN_SET) {
		if(++wink < 128) dig1 = dig2 = 0b00000000;
 4d0:	d0 e0       	ldi	r29, 0x00	; 0
 4d2:	c0 e0       	ldi	r28, 0x00	; 0
		wink = 0;
	}


	//他のセルの消灯ドットを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();
 4d4:	0e 94 3e 01 	call	0x27c	; 0x27c <seg_all_off>

	switch ( sel ) {
 4d8:	80 91 14 38 	lds	r24, 0x3814	; 0x803814 <__data_end>
 4dc:	82 30       	cpi	r24, 0x02	; 2
 4de:	e1 f0       	breq	.+56     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 4e0:	28 f4       	brcc	.+10     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 4e2:	88 23       	and	r24, r24
 4e4:	41 f0       	breq	.+16     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4e6:	81 30       	cpi	r24, 0x01	; 1
 4e8:	71 f0       	breq	.+28     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 4ea:	2b c0       	rjmp	.+86     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 4ec:	83 30       	cpi	r24, 0x03	; 3
 4ee:	c9 f0       	breq	.+50     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 4f0:	84 30       	cpi	r24, 0x04	; 4
 4f2:	f9 f0       	breq	.+62     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 4f4:	26 c0       	rjmp	.+76     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>

		case 0:
		VPORTB_OUT = VPORTB_OUT | 0b00010000;
 4f6:	85 b1       	in	r24, 0x05	; 5
 4f8:	80 61       	ori	r24, 0x10	; 16
 4fa:	85 b9       	out	0x05, r24	; 5
		VPORTA_OUT = dig1;
 4fc:	c1 b9       	out	0x01, r28	; 1
		VPORTC_OUT = (dig1c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 4fe:	89 b1       	in	r24, 0x09	; 9
 500:	8e 7f       	andi	r24, 0xFE	; 254
 502:	89 b9       	out	0x09, r24	; 9
		break;
 504:	1e c0       	rjmp	.+60     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>

		case 1:
		VPORTC_OUT = VPORTC_OUT | 0b00001000;
 506:	89 b1       	in	r24, 0x09	; 9
 508:	88 60       	ori	r24, 0x08	; 8
 50a:	89 b9       	out	0x09, r24	; 9
		VPORTA_OUT = dig2;
 50c:	d1 b9       	out	0x01, r29	; 1
		VPORTC_OUT = (dig2c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 50e:	89 b1       	in	r24, 0x09	; 9
 510:	8e 7f       	andi	r24, 0xFE	; 254
 512:	f8 2a       	or	r15, r24
 514:	f9 b8       	out	0x09, r15	; 9
		break;
 516:	15 c0       	rjmp	.+42     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>

		case 2:
		VPORTB_OUT = VPORTB_OUT | 0b00100000;
 518:	85 b1       	in	r24, 0x05	; 5
 51a:	80 62       	ori	r24, 0x20	; 32
 51c:	85 b9       	out	0x05, r24	; 5
		VPORTA_OUT = dig3;
 51e:	e1 b8       	out	0x01, r14	; 1
		break;
 520:	10 c0       	rjmp	.+32     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>

		case 3:
		VPORTC_OUT = VPORTC_OUT | 0b00000100;
 522:	89 b1       	in	r24, 0x09	; 9
 524:	84 60       	ori	r24, 0x04	; 4
 526:	89 b9       	out	0x09, r24	; 9
		VPORTA_OUT = dig4;
 528:	11 b9       	out	0x01, r17	; 1
		VPORTC_OUT = (dig4c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 52a:	89 b1       	in	r24, 0x09	; 9
 52c:	8e 7f       	andi	r24, 0xFE	; 254
 52e:	89 b9       	out	0x09, r24	; 9
		break;
 530:	08 c0       	rjmp	.+16     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>

		case 4:
		VPORTC_OUT = VPORTC_OUT | 0b00000010;
 532:	89 b1       	in	r24, 0x09	; 9
 534:	82 60       	ori	r24, 0x02	; 2
 536:	89 b9       	out	0x09, r24	; 9
		VPORTA_OUT = dig5;
 538:	01 b9       	out	0x01, r16	; 1
		VPORTC_OUT = (dig5c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 53a:	89 b1       	in	r24, 0x09	; 9
 53c:	8e 7f       	andi	r24, 0xFE	; 254
 53e:	f8 2a       	or	r15, r24
 540:	f9 b8       	out	0x09, r15	; 9
		break;

	}

	//5回に1回やること
	if ( ++sel == 5 ) {
 542:	80 91 14 38 	lds	r24, 0x3814	; 0x803814 <__data_end>
 546:	8f 5f       	subi	r24, 0xFF	; 255
 548:	80 93 14 38 	sts	0x3814, r24	; 0x803814 <__data_end>
 54c:	85 30       	cpi	r24, 0x05	; 5
 54e:	a9 f5       	brne	.+106    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
		//selの0~5トグル動作
		sel = 0;
 550:	10 92 14 38 	sts	0x3814, r1	; 0x803814 <__data_end>

		//スリープへ向けwakeupを減らす
		if(wakeup) wakeup--;
 554:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <wakeup>
 558:	90 91 1b 38 	lds	r25, 0x381B	; 0x80381b <wakeup+0x1>
 55c:	00 97       	sbiw	r24, 0x00	; 0
 55e:	29 f0       	breq	.+10     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	80 93 1a 38 	sts	0x381A, r24	; 0x80381a <wakeup>
 566:	90 93 1b 38 	sts	0x381B, r25	; 0x80381b <wakeup+0x1>

		//電圧表示時間を減らす
		if(display_v) display_v--;
 56a:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <display_v>
 56e:	88 23       	and	r24, r24
 570:	19 f0       	breq	.+6      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 572:	81 50       	subi	r24, 0x01	; 1
 574:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <display_v>

		//タクトスイッチが長押しされている場合、長押しカウントを加算
		if(VPORTB_IN & PIN1_bm) {
 578:	31 9b       	sbis	0x06, 1	; 6
 57a:	05 c0       	rjmp	.+10     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
			long_push = 0;
 57c:	10 92 18 38 	sts	0x3818, r1	; 0x803818 <long_push>
 580:	10 92 19 38 	sts	0x3819, r1	; 0x803819 <long_push+0x1>
 584:	1a c0       	rjmp	.+52     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
		}else{
			if(++long_push > 300) {
 586:	80 91 18 38 	lds	r24, 0x3818	; 0x803818 <long_push>
 58a:	90 91 19 38 	lds	r25, 0x3819	; 0x803819 <long_push+0x1>
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	80 93 18 38 	sts	0x3818, r24	; 0x803818 <long_push>
 594:	90 93 19 38 	sts	0x3819, r25	; 0x803819 <long_push+0x1>
 598:	8d 32       	cpi	r24, 0x2D	; 45
 59a:	91 40       	sbci	r25, 0x01	; 1
 59c:	70 f0       	brcs	.+28     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
				long_push = 0;
 59e:	10 92 18 38 	sts	0x3818, r1	; 0x803818 <long_push>
 5a2:	10 92 19 38 	sts	0x3819, r1	; 0x803819 <long_push+0x1>
				RTC_CNT = 0; //時刻設定をした後、秒数が0から始まるようにする
 5a6:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 5aa:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
				change_mode(0);
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	0e 94 4b 01 	call	0x296	; 0x296 <change_mode>
				change_mode_after = 1;
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <change_mode_after>
		}
	}



}
 5ba:	ff 91       	pop	r31
 5bc:	ef 91       	pop	r30
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	bf 91       	pop	r27
 5c4:	af 91       	pop	r26
 5c6:	9f 91       	pop	r25
 5c8:	8f 91       	pop	r24
 5ca:	7f 91       	pop	r23
 5cc:	6f 91       	pop	r22
 5ce:	5f 91       	pop	r21
 5d0:	4f 91       	pop	r20
 5d2:	3f 91       	pop	r19
 5d4:	2f 91       	pop	r18
 5d6:	1f 91       	pop	r17
 5d8:	0f 91       	pop	r16
 5da:	ff 90       	pop	r15
 5dc:	ef 90       	pop	r14
 5de:	0f 90       	pop	r0
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	0f 90       	pop	r0
 5e4:	1f 90       	pop	r1
 5e6:	18 95       	reti

000005e8 <__vector_4>:

//外部割り込み PB0が変化したら 両方のエッジを検出する(片方エッジにしたいがそうするとなぜかスタンバイから復帰しない)
ISR(PORTB_PORT_vect) {
 5e8:	1f 92       	push	r1
 5ea:	0f 92       	push	r0
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	0f 92       	push	r0
 5f0:	11 24       	eor	r1, r1
 5f2:	2f 93       	push	r18
 5f4:	3f 93       	push	r19
 5f6:	4f 93       	push	r20
 5f8:	5f 93       	push	r21
 5fa:	6f 93       	push	r22
 5fc:	7f 93       	push	r23
 5fe:	8f 93       	push	r24
 600:	9f 93       	push	r25
 602:	af 93       	push	r26
 604:	bf 93       	push	r27
 606:	ef 93       	push	r30
 608:	ff 93       	push	r31
	
	PORTB_INTFLAGS = PORTB_INTFLAGS | 0b00000010; //割り込み要求フラグ解除
 60a:	e9 e2       	ldi	r30, 0x29	; 41
 60c:	f4 e0       	ldi	r31, 0x04	; 4
 60e:	80 81       	ld	r24, Z
 610:	82 60       	ori	r24, 0x02	; 2
 612:	80 83       	st	Z, r24

	//赤外線センサー PB0がLowに切り替わったら何もせず返す 両方のエッジを検出するようにしているので立ち下がりエッジ割り込みはここで無効にする
	if(!(VPORTB_IN & PIN0_bm)) {
 614:	30 9b       	sbis	0x06, 0	; 6
 616:	10 c0       	rjmp	.+32     	; 0x638 <__vector_4+0x50>
		return;
	}

	//赤外線センサー PB0がHighだったら一定時間起き上がらせる
	if(VPORTB_IN & PIN0_bm) {
 618:	30 9b       	sbis	0x06, 0	; 6
 61a:	0e c0       	rjmp	.+28     	; 0x638 <__vector_4+0x50>
		wakeup = 800;
 61c:	80 e2       	ldi	r24, 0x20	; 32
 61e:	93 e0       	ldi	r25, 0x03	; 3
 620:	80 93 1a 38 	sts	0x381A, r24	; 0x80381a <wakeup>
 624:	90 93 1b 38 	sts	0x381B, r25	; 0x80381b <wakeup+0x1>

		if(yet_v) {
 628:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 62c:	88 23       	and	r24, r24
 62e:	21 f0       	breq	.+8      	; 0x638 <__vector_4+0x50>
			yet_v = 0;
 630:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__DATA_REGION_ORIGIN__>
			get_v();
 634:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
		}
		return;
	}

	return;
}
 638:	ff 91       	pop	r31
 63a:	ef 91       	pop	r30
 63c:	bf 91       	pop	r27
 63e:	af 91       	pop	r26
 640:	9f 91       	pop	r25
 642:	8f 91       	pop	r24
 644:	7f 91       	pop	r23
 646:	6f 91       	pop	r22
 648:	5f 91       	pop	r21
 64a:	4f 91       	pop	r20
 64c:	3f 91       	pop	r19
 64e:	2f 91       	pop	r18
 650:	0f 90       	pop	r0
 652:	0f be       	out	0x3f, r0	; 63
 654:	0f 90       	pop	r0
 656:	1f 90       	pop	r1
 658:	18 95       	reti

0000065a <__vector_6>:

//リアルタイムクロック 比較一致割り込み
ISR(RTC_CNT_vect) {
 65a:	1f 92       	push	r1
 65c:	0f 92       	push	r0
 65e:	0f b6       	in	r0, 0x3f	; 63
 660:	0f 92       	push	r0
 662:	11 24       	eor	r1, r1
 664:	8f 93       	push	r24
 666:	ef 93       	push	r30
 668:	ff 93       	push	r31
	RTC_CNT = 0;
 66a:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 66e:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
	RTC_INTFLAGS = RTC_INTFLAGS | 0b00000010;
 672:	e3 e4       	ldi	r30, 0x43	; 67
 674:	f1 e0       	ldi	r31, 0x01	; 1
 676:	80 81       	ld	r24, Z
 678:	82 60       	ori	r24, 0x02	; 2
 67a:	80 83       	st	Z, r24

	//時計を進める
	if (mode == MODE_CLOCK && ++min >= 60) {
 67c:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <mode>
 680:	81 30       	cpi	r24, 0x01	; 1
 682:	91 f4       	brne	.+36     	; 0x6a8 <__vector_6+0x4e>
 684:	80 91 1d 38 	lds	r24, 0x381D	; 0x80381d <min>
 688:	8f 5f       	subi	r24, 0xFF	; 255
 68a:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <min>
 68e:	8c 33       	cpi	r24, 0x3C	; 60
 690:	58 f0       	brcs	.+22     	; 0x6a8 <__vector_6+0x4e>
		min = 0;
 692:	10 92 1d 38 	sts	0x381D, r1	; 0x80381d <min>
		if(++hour >= 24) hour = 0;
 696:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <hour>
 69a:	8f 5f       	subi	r24, 0xFF	; 255
 69c:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <hour>
 6a0:	88 31       	cpi	r24, 0x18	; 24
 6a2:	10 f0       	brcs	.+4      	; 0x6a8 <__vector_6+0x4e>
 6a4:	10 92 1c 38 	sts	0x381C, r1	; 0x80381c <hour>
	}
	
	return;
}
 6a8:	ff 91       	pop	r31
 6aa:	ef 91       	pop	r30
 6ac:	8f 91       	pop	r24
 6ae:	0f 90       	pop	r0
 6b0:	0f be       	out	0x3f, r0	; 63
 6b2:	0f 90       	pop	r0
 6b4:	1f 90       	pop	r1
 6b6:	18 95       	reti

000006b8 <main>:
int main(void) {

	//■□■――――――――――――――――――――――――――――――――――――■□■
	//		□ レジスタの設定
	//■□■――――――――――――――――――――――――――――――――――――■□■
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 6b8:	88 ed       	ldi	r24, 0xD8	; 216
 6ba:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLA = 0b00000000; //16/20 MHz内部オシレータ
 6bc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RODATA_PM_OFFSET__+0x7f8060>
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 6c0:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLB = 0b00001011; //64分周
 6c2:	9b e0       	ldi	r25, 0x0B	; 11
 6c4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>

	//入出力モード設定
	VPORTA_DIR = 0b11111111; //ポートA 
 6c8:	9f ef       	ldi	r25, 0xFF	; 255
 6ca:	90 b9       	out	0x00, r25	; 0
	VPORTB_DIR = 0b11111100; //ポートB 
 6cc:	2c ef       	ldi	r18, 0xFC	; 252
 6ce:	24 b9       	out	0x04, r18	; 4
	VPORTC_DIR = 0b11111111; //ポートC
 6d0:	98 b9       	out	0x08, r25	; 8

	//出力の初期化
	VPORTA_OUT = 0b00000000; //ポートA
 6d2:	11 b8       	out	0x01, r1	; 1
	VPORTB_OUT = 0b00000000; //ポートB
 6d4:	15 b8       	out	0x05, r1	; 5
	VPORTC_OUT = 0b00000000; //ポートC
 6d6:	19 b8       	out	0x09, r1	; 9

	//焦電型赤外線センサー入力
	PORTB_PIN0CTRL = 0b00000001; //プルアップ無効 両方のエッジを検出する
 6d8:	91 e0       	ldi	r25, 0x01	; 1
 6da:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <__RODATA_PM_OFFSET__+0x7f8430>

	//タクトスイッチ入力
	PORTB_PIN1CTRL = 0b00001000; //プルアップ有効
 6de:	28 e0       	ldi	r18, 0x08	; 8
 6e0:	20 93 31 04 	sts	0x0431, r18	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>


	
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 6e4:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_XOSC32KCTRLA = 0b00000001; //外付け水晶振動子 イネーブル
 6e6:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__RODATA_PM_OFFSET__+0x7f807c>
	
	//RTC設定
	RTC_INTCTRL = 0b00000010; //比較一致割り込み許可
 6ea:	82 e0       	ldi	r24, 0x02	; 2
 6ec:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__RODATA_PM_OFFSET__+0x7f8142>
	RTC_CLKSEL  = 0b00000010; //クロック選択 XOSC32Kからの32.768 kHz
 6f0:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <__RODATA_PM_OFFSET__+0x7f8147>
	//STATUS.CTRLABUSYフラグが1の間待機
	while((RTC_STATUS & 0b00000001));
 6f4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7f8141>
 6f8:	80 fd       	sbrc	r24, 0
 6fa:	fc cf       	rjmp	.-8      	; 0x6f4 <main+0x3c>
	RTC_CTRLA   = 0b11111001; //ｽﾀﾝﾊﾞｲ休止動作でもRTC許可 32768分周 RTC許可
 6fc:	89 ef       	ldi	r24, 0xF9	; 249
 6fe:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__RODATA_PM_OFFSET__+0x7f8140>

	//割り込みたい間隔の秒数-1
	RTC_CMP = 0;
 702:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <__RODATA_PM_OFFSET__+0x7f814c>
 706:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <__RODATA_PM_OFFSET__+0x7f814d>
	// //RTC PIT 周期割り込み設定
	// RTC_PITCTRLA = 0b01110001; //16384分周 周期割り込み計時器許可
	// RTC_PITINTCTRL = 0b00000001; //周期割り込み許可

	//タイマーA
	TCA0_SINGLE_CTRLA = 0b00001101; //1024分周 動作許可
 70a:	8d e0       	ldi	r24, 0x0D	; 13
 70c:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
	TCA0_SINGLE_CTRLB = 0b00000000; //
 710:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
	TCA0_SINGLE_CMP0 = 1; // カウントがこの値に達したら割り込み(TCA0_CMP1_vect)が発生
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
 71c:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__RODATA_PM_OFFSET__+0x7f8a29>
	TCA0_SINGLE_INTCTRL = 0b00010000; //CMP0割り込み許可
 720:	80 e1       	ldi	r24, 0x10	; 16
 722:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__RODATA_PM_OFFSET__+0x7f8a0a>

	//ADC設定
	ADC0_CTRLA = 0b00000001; //ADC Enable
 726:	91 e0       	ldi	r25, 0x01	; 1
 728:	90 93 00 06 	sts	0x0600, r25	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
	ADC0_CTRLB = 0b00000000; //累積なし
 72c:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <__RODATA_PM_OFFSET__+0x7f8601>
	ADC0_CTRLC = 0b01010101; //VREF = VDD, プリスケーラ1/64
 730:	95 e5       	ldi	r25, 0x55	; 85
 732:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__RODATA_PM_OFFSET__+0x7f8602>
	VREF_CTRLA = 0b00010000; //内部基準電圧 1.1V
 736:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__RODATA_PM_OFFSET__+0x7f80a0>

	set_sleep_mode(SLEEP_MODE_STANDBY); //スリープモードを設定
 73a:	e0 e5       	ldi	r30, 0x50	; 80
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	80 81       	ld	r24, Z
 740:	89 7f       	andi	r24, 0xF9	; 249
 742:	82 60       	ori	r24, 0x02	; 2
 744:	80 83       	st	Z, r24
 746:	88 e3       	ldi	r24, 0x38	; 56
 748:	91 e0       	ldi	r25, 0x01	; 1
 74a:	01 97       	sbiw	r24, 0x01	; 1
 74c:	f1 f7       	brne	.-4      	; 0x74a <main+0x92>
 74e:	00 00       	nop

	//少し待機
	_delay_ms(5);

	sei(); //割り込み許可
 750:	78 94       	sei
	
	while (1) {

		if(!wakeup) {
 752:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <wakeup>
 756:	90 91 1b 38 	lds	r25, 0x381B	; 0x80381b <wakeup+0x1>
 75a:	89 2b       	or	r24, r25
 75c:	99 f4       	brne	.+38     	; 0x784 <main+0xcc>
			//寝る準備
			seg_all_off();
 75e:	0e 94 3e 01 	call	0x27c	; 0x27c <seg_all_off>
			change_mode(MODE_CLOCK);
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	0e 94 4b 01 	call	0x296	; 0x296 <change_mode>
			display_v = 0;
 768:	10 92 16 38 	sts	0x3816, r1	; 0x803816 <display_v>
			yet_v = 1;
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
			//寝る
			sleep_mode();
 772:	e0 e5       	ldi	r30, 0x50	; 80
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	80 81       	ld	r24, Z
 778:	81 60       	ori	r24, 0x01	; 1
 77a:	80 83       	st	Z, r24
 77c:	88 95       	sleep
 77e:	80 81       	ld	r24, Z
 780:	8e 7f       	andi	r24, 0xFE	; 254
 782:	80 83       	st	Z, r24
		}

		sens_delay_ms(5);
 784:	85 e0       	ldi	r24, 0x05	; 5
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 c8 00 	call	0x190	; 0x190 <sens_delay_ms>

	}
 78c:	e2 cf       	rjmp	.-60     	; 0x752 <main+0x9a>

0000078e <__divsf3>:
 78e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__divsf3x>
 792:	0c 94 bc 04 	jmp	0x978	; 0x978 <__fp_round>
 796:	0e 94 b5 04 	call	0x96a	; 0x96a <__fp_pscB>
 79a:	58 f0       	brcs	.+22     	; 0x7b2 <__divsf3+0x24>
 79c:	0e 94 ae 04 	call	0x95c	; 0x95c <__fp_pscA>
 7a0:	40 f0       	brcs	.+16     	; 0x7b2 <__divsf3+0x24>
 7a2:	29 f4       	brne	.+10     	; 0x7ae <__divsf3+0x20>
 7a4:	5f 3f       	cpi	r21, 0xFF	; 255
 7a6:	29 f0       	breq	.+10     	; 0x7b2 <__divsf3+0x24>
 7a8:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__fp_inf>
 7ac:	51 11       	cpse	r21, r1
 7ae:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__fp_szero>
 7b2:	0c 94 ab 04 	jmp	0x956	; 0x956 <__fp_nan>

000007b6 <__divsf3x>:
 7b6:	0e 94 cd 04 	call	0x99a	; 0x99a <__fp_split3>
 7ba:	68 f3       	brcs	.-38     	; 0x796 <__divsf3+0x8>

000007bc <__divsf3_pse>:
 7bc:	99 23       	and	r25, r25
 7be:	b1 f3       	breq	.-20     	; 0x7ac <__divsf3+0x1e>
 7c0:	55 23       	and	r21, r21
 7c2:	91 f3       	breq	.-28     	; 0x7a8 <__divsf3+0x1a>
 7c4:	95 1b       	sub	r25, r21
 7c6:	55 0b       	sbc	r21, r21
 7c8:	bb 27       	eor	r27, r27
 7ca:	aa 27       	eor	r26, r26
 7cc:	62 17       	cp	r22, r18
 7ce:	73 07       	cpc	r23, r19
 7d0:	84 07       	cpc	r24, r20
 7d2:	38 f0       	brcs	.+14     	; 0x7e2 <__divsf3_pse+0x26>
 7d4:	9f 5f       	subi	r25, 0xFF	; 255
 7d6:	5f 4f       	sbci	r21, 0xFF	; 255
 7d8:	22 0f       	add	r18, r18
 7da:	33 1f       	adc	r19, r19
 7dc:	44 1f       	adc	r20, r20
 7de:	aa 1f       	adc	r26, r26
 7e0:	a9 f3       	breq	.-22     	; 0x7cc <__divsf3_pse+0x10>
 7e2:	35 d0       	rcall	.+106    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 7e4:	0e 2e       	mov	r0, r30
 7e6:	3a f0       	brmi	.+14     	; 0x7f6 <__divsf3_pse+0x3a>
 7e8:	e0 e8       	ldi	r30, 0x80	; 128
 7ea:	32 d0       	rcall	.+100    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 7ec:	91 50       	subi	r25, 0x01	; 1
 7ee:	50 40       	sbci	r21, 0x00	; 0
 7f0:	e6 95       	lsr	r30
 7f2:	00 1c       	adc	r0, r0
 7f4:	ca f7       	brpl	.-14     	; 0x7e8 <__divsf3_pse+0x2c>
 7f6:	2b d0       	rcall	.+86     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 7f8:	fe 2f       	mov	r31, r30
 7fa:	29 d0       	rcall	.+82     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 7fc:	66 0f       	add	r22, r22
 7fe:	77 1f       	adc	r23, r23
 800:	88 1f       	adc	r24, r24
 802:	bb 1f       	adc	r27, r27
 804:	26 17       	cp	r18, r22
 806:	37 07       	cpc	r19, r23
 808:	48 07       	cpc	r20, r24
 80a:	ab 07       	cpc	r26, r27
 80c:	b0 e8       	ldi	r27, 0x80	; 128
 80e:	09 f0       	breq	.+2      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 810:	bb 0b       	sbc	r27, r27
 812:	80 2d       	mov	r24, r0
 814:	bf 01       	movw	r22, r30
 816:	ff 27       	eor	r31, r31
 818:	93 58       	subi	r25, 0x83	; 131
 81a:	5f 4f       	sbci	r21, 0xFF	; 255
 81c:	3a f0       	brmi	.+14     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 81e:	9e 3f       	cpi	r25, 0xFE	; 254
 820:	51 05       	cpc	r21, r1
 822:	78 f0       	brcs	.+30     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 824:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__fp_inf>
 828:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__fp_szero>
 82c:	5f 3f       	cpi	r21, 0xFF	; 255
 82e:	e4 f3       	brlt	.-8      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 830:	98 3e       	cpi	r25, 0xE8	; 232
 832:	d4 f3       	brlt	.-12     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 834:	86 95       	lsr	r24
 836:	77 95       	ror	r23
 838:	67 95       	ror	r22
 83a:	b7 95       	ror	r27
 83c:	f7 95       	ror	r31
 83e:	9f 5f       	subi	r25, 0xFF	; 255
 840:	c9 f7       	brne	.-14     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 842:	88 0f       	add	r24, r24
 844:	91 1d       	adc	r25, r1
 846:	96 95       	lsr	r25
 848:	87 95       	ror	r24
 84a:	97 f9       	bld	r25, 7
 84c:	08 95       	ret
 84e:	e1 e0       	ldi	r30, 0x01	; 1
 850:	66 0f       	add	r22, r22
 852:	77 1f       	adc	r23, r23
 854:	88 1f       	adc	r24, r24
 856:	bb 1f       	adc	r27, r27
 858:	62 17       	cp	r22, r18
 85a:	73 07       	cpc	r23, r19
 85c:	84 07       	cpc	r24, r20
 85e:	ba 07       	cpc	r27, r26
 860:	20 f0       	brcs	.+8      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 862:	62 1b       	sub	r22, r18
 864:	73 0b       	sbc	r23, r19
 866:	84 0b       	sbc	r24, r20
 868:	ba 0b       	sbc	r27, r26
 86a:	ee 1f       	adc	r30, r30
 86c:	88 f7       	brcc	.-30     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 86e:	e0 95       	com	r30
 870:	08 95       	ret

00000872 <__fixunssfsi>:
 872:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__fp_splitA>
 876:	88 f0       	brcs	.+34     	; 0x89a <__fixunssfsi+0x28>
 878:	9f 57       	subi	r25, 0x7F	; 127
 87a:	98 f0       	brcs	.+38     	; 0x8a2 <__fixunssfsi+0x30>
 87c:	b9 2f       	mov	r27, r25
 87e:	99 27       	eor	r25, r25
 880:	b7 51       	subi	r27, 0x17	; 23
 882:	b0 f0       	brcs	.+44     	; 0x8b0 <__fixunssfsi+0x3e>
 884:	e1 f0       	breq	.+56     	; 0x8be <__fixunssfsi+0x4c>
 886:	66 0f       	add	r22, r22
 888:	77 1f       	adc	r23, r23
 88a:	88 1f       	adc	r24, r24
 88c:	99 1f       	adc	r25, r25
 88e:	1a f0       	brmi	.+6      	; 0x896 <__fixunssfsi+0x24>
 890:	ba 95       	dec	r27
 892:	c9 f7       	brne	.-14     	; 0x886 <__fixunssfsi+0x14>
 894:	14 c0       	rjmp	.+40     	; 0x8be <__fixunssfsi+0x4c>
 896:	b1 30       	cpi	r27, 0x01	; 1
 898:	91 f0       	breq	.+36     	; 0x8be <__fixunssfsi+0x4c>
 89a:	0e 94 ef 04 	call	0x9de	; 0x9de <__fp_zero>
 89e:	b1 e0       	ldi	r27, 0x01	; 1
 8a0:	08 95       	ret
 8a2:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__fp_zero>
 8a6:	67 2f       	mov	r22, r23
 8a8:	78 2f       	mov	r23, r24
 8aa:	88 27       	eor	r24, r24
 8ac:	b8 5f       	subi	r27, 0xF8	; 248
 8ae:	39 f0       	breq	.+14     	; 0x8be <__fixunssfsi+0x4c>
 8b0:	b9 3f       	cpi	r27, 0xF9	; 249
 8b2:	cc f3       	brlt	.-14     	; 0x8a6 <__fixunssfsi+0x34>
 8b4:	86 95       	lsr	r24
 8b6:	77 95       	ror	r23
 8b8:	67 95       	ror	r22
 8ba:	b3 95       	inc	r27
 8bc:	d9 f7       	brne	.-10     	; 0x8b4 <__fixunssfsi+0x42>
 8be:	3e f4       	brtc	.+14     	; 0x8ce <__fixunssfsi+0x5c>
 8c0:	90 95       	com	r25
 8c2:	80 95       	com	r24
 8c4:	70 95       	com	r23
 8c6:	61 95       	neg	r22
 8c8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ca:	8f 4f       	sbci	r24, 0xFF	; 255
 8cc:	9f 4f       	sbci	r25, 0xFF	; 255
 8ce:	08 95       	ret

000008d0 <__floatunsisf>:
 8d0:	e8 94       	clt
 8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <__floatsisf+0x12>

000008d4 <__floatsisf>:
 8d4:	97 fb       	bst	r25, 7
 8d6:	3e f4       	brtc	.+14     	; 0x8e6 <__floatsisf+0x12>
 8d8:	90 95       	com	r25
 8da:	80 95       	com	r24
 8dc:	70 95       	com	r23
 8de:	61 95       	neg	r22
 8e0:	7f 4f       	sbci	r23, 0xFF	; 255
 8e2:	8f 4f       	sbci	r24, 0xFF	; 255
 8e4:	9f 4f       	sbci	r25, 0xFF	; 255
 8e6:	99 23       	and	r25, r25
 8e8:	a9 f0       	breq	.+42     	; 0x914 <__floatsisf+0x40>
 8ea:	f9 2f       	mov	r31, r25
 8ec:	96 e9       	ldi	r25, 0x96	; 150
 8ee:	bb 27       	eor	r27, r27
 8f0:	93 95       	inc	r25
 8f2:	f6 95       	lsr	r31
 8f4:	87 95       	ror	r24
 8f6:	77 95       	ror	r23
 8f8:	67 95       	ror	r22
 8fa:	b7 95       	ror	r27
 8fc:	f1 11       	cpse	r31, r1
 8fe:	f8 cf       	rjmp	.-16     	; 0x8f0 <__floatsisf+0x1c>
 900:	fa f4       	brpl	.+62     	; 0x940 <__floatsisf+0x6c>
 902:	bb 0f       	add	r27, r27
 904:	11 f4       	brne	.+4      	; 0x90a <__floatsisf+0x36>
 906:	60 ff       	sbrs	r22, 0
 908:	1b c0       	rjmp	.+54     	; 0x940 <__floatsisf+0x6c>
 90a:	6f 5f       	subi	r22, 0xFF	; 255
 90c:	7f 4f       	sbci	r23, 0xFF	; 255
 90e:	8f 4f       	sbci	r24, 0xFF	; 255
 910:	9f 4f       	sbci	r25, 0xFF	; 255
 912:	16 c0       	rjmp	.+44     	; 0x940 <__floatsisf+0x6c>
 914:	88 23       	and	r24, r24
 916:	11 f0       	breq	.+4      	; 0x91c <__floatsisf+0x48>
 918:	96 e9       	ldi	r25, 0x96	; 150
 91a:	11 c0       	rjmp	.+34     	; 0x93e <__floatsisf+0x6a>
 91c:	77 23       	and	r23, r23
 91e:	21 f0       	breq	.+8      	; 0x928 <__floatsisf+0x54>
 920:	9e e8       	ldi	r25, 0x8E	; 142
 922:	87 2f       	mov	r24, r23
 924:	76 2f       	mov	r23, r22
 926:	05 c0       	rjmp	.+10     	; 0x932 <__floatsisf+0x5e>
 928:	66 23       	and	r22, r22
 92a:	71 f0       	breq	.+28     	; 0x948 <__floatsisf+0x74>
 92c:	96 e8       	ldi	r25, 0x86	; 134
 92e:	86 2f       	mov	r24, r22
 930:	70 e0       	ldi	r23, 0x00	; 0
 932:	60 e0       	ldi	r22, 0x00	; 0
 934:	2a f0       	brmi	.+10     	; 0x940 <__floatsisf+0x6c>
 936:	9a 95       	dec	r25
 938:	66 0f       	add	r22, r22
 93a:	77 1f       	adc	r23, r23
 93c:	88 1f       	adc	r24, r24
 93e:	da f7       	brpl	.-10     	; 0x936 <__floatsisf+0x62>
 940:	88 0f       	add	r24, r24
 942:	96 95       	lsr	r25
 944:	87 95       	ror	r24
 946:	97 f9       	bld	r25, 7
 948:	08 95       	ret

0000094a <__fp_inf>:
 94a:	97 f9       	bld	r25, 7
 94c:	9f 67       	ori	r25, 0x7F	; 127
 94e:	80 e8       	ldi	r24, 0x80	; 128
 950:	70 e0       	ldi	r23, 0x00	; 0
 952:	60 e0       	ldi	r22, 0x00	; 0
 954:	08 95       	ret

00000956 <__fp_nan>:
 956:	9f ef       	ldi	r25, 0xFF	; 255
 958:	80 ec       	ldi	r24, 0xC0	; 192
 95a:	08 95       	ret

0000095c <__fp_pscA>:
 95c:	00 24       	eor	r0, r0
 95e:	0a 94       	dec	r0
 960:	16 16       	cp	r1, r22
 962:	17 06       	cpc	r1, r23
 964:	18 06       	cpc	r1, r24
 966:	09 06       	cpc	r0, r25
 968:	08 95       	ret

0000096a <__fp_pscB>:
 96a:	00 24       	eor	r0, r0
 96c:	0a 94       	dec	r0
 96e:	12 16       	cp	r1, r18
 970:	13 06       	cpc	r1, r19
 972:	14 06       	cpc	r1, r20
 974:	05 06       	cpc	r0, r21
 976:	08 95       	ret

00000978 <__fp_round>:
 978:	09 2e       	mov	r0, r25
 97a:	03 94       	inc	r0
 97c:	00 0c       	add	r0, r0
 97e:	11 f4       	brne	.+4      	; 0x984 <__fp_round+0xc>
 980:	88 23       	and	r24, r24
 982:	52 f0       	brmi	.+20     	; 0x998 <__fp_round+0x20>
 984:	bb 0f       	add	r27, r27
 986:	40 f4       	brcc	.+16     	; 0x998 <__fp_round+0x20>
 988:	bf 2b       	or	r27, r31
 98a:	11 f4       	brne	.+4      	; 0x990 <__fp_round+0x18>
 98c:	60 ff       	sbrs	r22, 0
 98e:	04 c0       	rjmp	.+8      	; 0x998 <__fp_round+0x20>
 990:	6f 5f       	subi	r22, 0xFF	; 255
 992:	7f 4f       	sbci	r23, 0xFF	; 255
 994:	8f 4f       	sbci	r24, 0xFF	; 255
 996:	9f 4f       	sbci	r25, 0xFF	; 255
 998:	08 95       	ret

0000099a <__fp_split3>:
 99a:	57 fd       	sbrc	r21, 7
 99c:	90 58       	subi	r25, 0x80	; 128
 99e:	44 0f       	add	r20, r20
 9a0:	55 1f       	adc	r21, r21
 9a2:	59 f0       	breq	.+22     	; 0x9ba <__fp_splitA+0x10>
 9a4:	5f 3f       	cpi	r21, 0xFF	; 255
 9a6:	71 f0       	breq	.+28     	; 0x9c4 <__fp_splitA+0x1a>
 9a8:	47 95       	ror	r20

000009aa <__fp_splitA>:
 9aa:	88 0f       	add	r24, r24
 9ac:	97 fb       	bst	r25, 7
 9ae:	99 1f       	adc	r25, r25
 9b0:	61 f0       	breq	.+24     	; 0x9ca <__fp_splitA+0x20>
 9b2:	9f 3f       	cpi	r25, 0xFF	; 255
 9b4:	79 f0       	breq	.+30     	; 0x9d4 <__fp_splitA+0x2a>
 9b6:	87 95       	ror	r24
 9b8:	08 95       	ret
 9ba:	12 16       	cp	r1, r18
 9bc:	13 06       	cpc	r1, r19
 9be:	14 06       	cpc	r1, r20
 9c0:	55 1f       	adc	r21, r21
 9c2:	f2 cf       	rjmp	.-28     	; 0x9a8 <__fp_split3+0xe>
 9c4:	46 95       	lsr	r20
 9c6:	f1 df       	rcall	.-30     	; 0x9aa <__fp_splitA>
 9c8:	08 c0       	rjmp	.+16     	; 0x9da <__fp_splitA+0x30>
 9ca:	16 16       	cp	r1, r22
 9cc:	17 06       	cpc	r1, r23
 9ce:	18 06       	cpc	r1, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	f1 cf       	rjmp	.-30     	; 0x9b6 <__fp_splitA+0xc>
 9d4:	86 95       	lsr	r24
 9d6:	71 05       	cpc	r23, r1
 9d8:	61 05       	cpc	r22, r1
 9da:	08 94       	sec
 9dc:	08 95       	ret

000009de <__fp_zero>:
 9de:	e8 94       	clt

000009e0 <__fp_szero>:
 9e0:	bb 27       	eor	r27, r27
 9e2:	66 27       	eor	r22, r22
 9e4:	77 27       	eor	r23, r23
 9e6:	cb 01       	movw	r24, r22
 9e8:	97 f9       	bld	r25, 7
 9ea:	08 95       	ret

000009ec <__mulsf3>:
 9ec:	0e 94 09 05 	call	0xa12	; 0xa12 <__mulsf3x>
 9f0:	0c 94 bc 04 	jmp	0x978	; 0x978 <__fp_round>
 9f4:	0e 94 ae 04 	call	0x95c	; 0x95c <__fp_pscA>
 9f8:	38 f0       	brcs	.+14     	; 0xa08 <__mulsf3+0x1c>
 9fa:	0e 94 b5 04 	call	0x96a	; 0x96a <__fp_pscB>
 9fe:	20 f0       	brcs	.+8      	; 0xa08 <__mulsf3+0x1c>
 a00:	95 23       	and	r25, r21
 a02:	11 f0       	breq	.+4      	; 0xa08 <__mulsf3+0x1c>
 a04:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__fp_inf>
 a08:	0c 94 ab 04 	jmp	0x956	; 0x956 <__fp_nan>
 a0c:	11 24       	eor	r1, r1
 a0e:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__fp_szero>

00000a12 <__mulsf3x>:
 a12:	0e 94 cd 04 	call	0x99a	; 0x99a <__fp_split3>
 a16:	70 f3       	brcs	.-36     	; 0x9f4 <__mulsf3+0x8>

00000a18 <__mulsf3_pse>:
 a18:	95 9f       	mul	r25, r21
 a1a:	c1 f3       	breq	.-16     	; 0xa0c <__mulsf3+0x20>
 a1c:	95 0f       	add	r25, r21
 a1e:	50 e0       	ldi	r21, 0x00	; 0
 a20:	55 1f       	adc	r21, r21
 a22:	62 9f       	mul	r22, r18
 a24:	f0 01       	movw	r30, r0
 a26:	72 9f       	mul	r23, r18
 a28:	bb 27       	eor	r27, r27
 a2a:	f0 0d       	add	r31, r0
 a2c:	b1 1d       	adc	r27, r1
 a2e:	63 9f       	mul	r22, r19
 a30:	aa 27       	eor	r26, r26
 a32:	f0 0d       	add	r31, r0
 a34:	b1 1d       	adc	r27, r1
 a36:	aa 1f       	adc	r26, r26
 a38:	64 9f       	mul	r22, r20
 a3a:	66 27       	eor	r22, r22
 a3c:	b0 0d       	add	r27, r0
 a3e:	a1 1d       	adc	r26, r1
 a40:	66 1f       	adc	r22, r22
 a42:	82 9f       	mul	r24, r18
 a44:	22 27       	eor	r18, r18
 a46:	b0 0d       	add	r27, r0
 a48:	a1 1d       	adc	r26, r1
 a4a:	62 1f       	adc	r22, r18
 a4c:	73 9f       	mul	r23, r19
 a4e:	b0 0d       	add	r27, r0
 a50:	a1 1d       	adc	r26, r1
 a52:	62 1f       	adc	r22, r18
 a54:	83 9f       	mul	r24, r19
 a56:	a0 0d       	add	r26, r0
 a58:	61 1d       	adc	r22, r1
 a5a:	22 1f       	adc	r18, r18
 a5c:	74 9f       	mul	r23, r20
 a5e:	33 27       	eor	r19, r19
 a60:	a0 0d       	add	r26, r0
 a62:	61 1d       	adc	r22, r1
 a64:	23 1f       	adc	r18, r19
 a66:	84 9f       	mul	r24, r20
 a68:	60 0d       	add	r22, r0
 a6a:	21 1d       	adc	r18, r1
 a6c:	82 2f       	mov	r24, r18
 a6e:	76 2f       	mov	r23, r22
 a70:	6a 2f       	mov	r22, r26
 a72:	11 24       	eor	r1, r1
 a74:	9f 57       	subi	r25, 0x7F	; 127
 a76:	50 40       	sbci	r21, 0x00	; 0
 a78:	9a f0       	brmi	.+38     	; 0xaa0 <__mulsf3_pse+0x88>
 a7a:	f1 f0       	breq	.+60     	; 0xab8 <__mulsf3_pse+0xa0>
 a7c:	88 23       	and	r24, r24
 a7e:	4a f0       	brmi	.+18     	; 0xa92 <__mulsf3_pse+0x7a>
 a80:	ee 0f       	add	r30, r30
 a82:	ff 1f       	adc	r31, r31
 a84:	bb 1f       	adc	r27, r27
 a86:	66 1f       	adc	r22, r22
 a88:	77 1f       	adc	r23, r23
 a8a:	88 1f       	adc	r24, r24
 a8c:	91 50       	subi	r25, 0x01	; 1
 a8e:	50 40       	sbci	r21, 0x00	; 0
 a90:	a9 f7       	brne	.-22     	; 0xa7c <__mulsf3_pse+0x64>
 a92:	9e 3f       	cpi	r25, 0xFE	; 254
 a94:	51 05       	cpc	r21, r1
 a96:	80 f0       	brcs	.+32     	; 0xab8 <__mulsf3_pse+0xa0>
 a98:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__fp_inf>
 a9c:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__fp_szero>
 aa0:	5f 3f       	cpi	r21, 0xFF	; 255
 aa2:	e4 f3       	brlt	.-8      	; 0xa9c <__mulsf3_pse+0x84>
 aa4:	98 3e       	cpi	r25, 0xE8	; 232
 aa6:	d4 f3       	brlt	.-12     	; 0xa9c <__mulsf3_pse+0x84>
 aa8:	86 95       	lsr	r24
 aaa:	77 95       	ror	r23
 aac:	67 95       	ror	r22
 aae:	b7 95       	ror	r27
 ab0:	f7 95       	ror	r31
 ab2:	e7 95       	ror	r30
 ab4:	9f 5f       	subi	r25, 0xFF	; 255
 ab6:	c1 f7       	brne	.-16     	; 0xaa8 <__mulsf3_pse+0x90>
 ab8:	fe 2b       	or	r31, r30
 aba:	88 0f       	add	r24, r24
 abc:	91 1d       	adc	r25, r1
 abe:	96 95       	lsr	r25
 ac0:	87 95       	ror	r24
 ac2:	97 f9       	bld	r25, 7
 ac4:	08 95       	ret

00000ac6 <_exit>:
 ac6:	f8 94       	cli

00000ac8 <__stop_program>:
 ac8:	ff cf       	rjmp	.-2      	; 0xac8 <__stop_program>
