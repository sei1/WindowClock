
WindowClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00803800  00000cfa  00000d8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cfa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  0080380e  0080380e  00000d9c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200e  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b01  00000000  00000000  00002e72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ca  00000000  00000000  00004973  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00005240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d71  00000000  00000000  000053fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000756  00000000  00000000  0000616d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000068c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__vector_4>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 92 03 	jmp	0x724	; 0x724 <__vector_6>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_10>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
  88:	18 e3       	ldi	r17, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	ea ef       	ldi	r30, 0xFA	; 250
  90:	fc e0       	ldi	r31, 0x0C	; 12
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ae 30       	cpi	r26, 0x0E	; 14
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	28 e3       	ldi	r18, 0x38	; 56
  a0:	ae e0       	ldi	r26, 0x0E	; 14
  a2:	b8 e3       	ldi	r27, 0x38	; 56
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a3 32       	cpi	r26, 0x23	; 35
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 1b 04 	call	0x836	; 0x836 <main>
  b2:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <get_v>:
// プログラム本文
//---------------------------------


//キャパシタに蓄えられた電源電圧と太陽電池の発電電圧を取得する関数
void get_v (void) {
  ba:	cf 92       	push	r12
  bc:	df 92       	push	r13
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
	
	uint16_t x = 0;
	uint16_t y = 0;

	//PB1をタクトスイッチ入力から一時的に太陽電池電圧の測定ピンに切り替える
	PORTB_PIN1CTRL = 0b00000000; //プルアップ無効 エッジを検出しない
  c6:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>
	VPORTB_DIR    |= 0b00000010; //出力モードに変更
  ca:	84 b1       	in	r24, 0x04	; 4
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	84 b9       	out	0x04, r24	; 4
	VPORTB_OUT    &= 0b11111101; //出力Low
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	8d 7f       	andi	r24, 0xFD	; 253
  d4:	85 b9       	out	0x05, r24	; 5

	//この状態でPB1の電圧を抜いている間に基準電圧1.1V / 電源電圧を測定しておく

	// 基準電圧1.1V / 電源電圧 を10bit(1024段階)で測定
	ADC0_MUXPOS = 0b00011101; //基準電圧
  d6:	8d e1       	ldi	r24, 0x1D	; 29
  d8:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7f8606>

	ADC0_COMMAND = 1;//AD変換開始
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
	while(ADC0_COMMAND);
  e2:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
  e6:	81 11       	cpse	r24, r1
  e8:	fc cf       	rjmp	.-8      	; 0xe2 <get_v+0x28>
	ADC0_COMMAND = 0;//AD変換終了
  ea:	c8 e0       	ldi	r28, 0x08	; 8
  ec:	d6 e0       	ldi	r29, 0x06	; 6
  ee:	18 82       	st	Y, r1

	y = ADC0_RES;
  f0:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
  f4:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
	
	//電源電圧を算出
	supply_v = 1023 * 1.1 / y;
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 57 05 	call	0xaae	; 0xaae <__floatunsisf>
 100:	6b 01       	movw	r12, r22
 102:	7c 01       	movw	r14, r24
 104:	9b 01       	movw	r18, r22
 106:	ac 01       	movw	r20, r24
 108:	6a e9       	ldi	r22, 0x9A	; 154
 10a:	79 ea       	ldi	r23, 0xA9	; 169
 10c:	8c e8       	ldi	r24, 0x8C	; 140
 10e:	94 e4       	ldi	r25, 0x44	; 68
 110:	0e 94 b6 04 	call	0x96c	; 0x96c <__divsf3>
 114:	60 93 18 38 	sts	0x3818, r22	; 0x803818 <supply_v>
 118:	70 93 19 38 	sts	0x3819, r23	; 0x803819 <supply_v+0x1>
 11c:	80 93 1a 38 	sts	0x381A, r24	; 0x80381a <supply_v+0x2>
 120:	90 93 1b 38 	sts	0x381B, r25	; 0x80381b <supply_v+0x3>


	//PB1を入力モードに戻す
	VPORTB_DIR    &= 0b11111101; 
 124:	84 b1       	in	r24, 0x04	; 4
 126:	8d 7f       	andi	r24, 0xFD	; 253
 128:	84 b9       	out	0x04, r24	; 4

	//ADC入力ピンの選択
	// PB1ピンの電圧 / 電源電圧 を10bit(1024段階)で測定
	ADC0_MUXPOS = 0b00001010; //AIN10 = PB1
 12a:	8a e0       	ldi	r24, 0x0A	; 10
 12c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7f8606>

	ADC0_COMMAND = 1;//AD変換開始
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	88 83       	st	Y, r24
	while(ADC0_COMMAND);
 134:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
 138:	81 11       	cpse	r24, r1
 13a:	fc cf       	rjmp	.-8      	; 0x134 <__EEPROM_REGION_LENGTH__+0x34>
	ADC0_COMMAND = 0;//AD変換終了
 13c:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>

	x = ADC0_RES;
 140:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
 144:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>

	//PB1のプルアップを有効に戻す
	PORTB_PIN1CTRL = 0b00001001; //プルアップ有効 両方のエッジを検出する
 148:	89 e0       	ldi	r24, 0x09	; 9
 14a:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>

	//太陽電池電圧を算出
	solar_v = x * 1.1 / y;
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 57 05 	call	0xaae	; 0xaae <__floatunsisf>
 156:	2d ec       	ldi	r18, 0xCD	; 205
 158:	3c ec       	ldi	r19, 0xCC	; 204
 15a:	4c e8       	ldi	r20, 0x8C	; 140
 15c:	5f e3       	ldi	r21, 0x3F	; 63
 15e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__mulsf3>
 162:	a7 01       	movw	r20, r14
 164:	96 01       	movw	r18, r12
 166:	0e 94 b6 04 	call	0x96c	; 0x96c <__divsf3>
 16a:	6b 01       	movw	r12, r22
 16c:	7c 01       	movw	r14, r24
 16e:	60 93 14 38 	sts	0x3814, r22	; 0x803814 <solar_v>
 172:	70 93 15 38 	sts	0x3815, r23	; 0x803815 <solar_v+0x1>
 176:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <solar_v+0x2>
 17a:	90 93 17 38 	sts	0x3817, r25	; 0x803817 <solar_v+0x3>

	//7セグの明るさ設定
	//太陽電池の電圧によって周囲の明るさを判定し7セグの明るさを変化させる
	if(solar_v > 1.2 || discharge) {
 17e:	2a e9       	ldi	r18, 0x9A	; 154
 180:	39 e9       	ldi	r19, 0x99	; 153
 182:	49 e9       	ldi	r20, 0x99	; 153
 184:	5f e3       	ldi	r21, 0x3F	; 63
 186:	0e 94 09 06 	call	0xc12	; 0xc12 <__gesf2>
 18a:	18 16       	cp	r1, r24
 18c:	24 f0       	brlt	.+8      	; 0x196 <__EEPROM_REGION_LENGTH__+0x96>
 18e:	80 91 12 38 	lds	r24, 0x3812	; 0x803812 <discharge>
 192:	88 23       	and	r24, r24
 194:	21 f0       	breq	.+8      	; 0x19e <__EEPROM_REGION_LENGTH__+0x9e>
		brightness = 3;
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 19c:	11 c0       	rjmp	.+34     	; 0x1c0 <__EEPROM_REGION_LENGTH__+0xc0>
	}else if(solar_v > 0.5) {
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	5f e3       	ldi	r21, 0x3F	; 63
 1a6:	c7 01       	movw	r24, r14
 1a8:	b6 01       	movw	r22, r12
 1aa:	0e 94 09 06 	call	0xc12	; 0xc12 <__gesf2>
 1ae:	18 16       	cp	r1, r24
 1b0:	24 f4       	brge	.+8      	; 0x1ba <__EEPROM_REGION_LENGTH__+0xba>
		brightness = 2;
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <__EEPROM_REGION_LENGTH__+0xc0>
	}else{
		brightness = 1;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
	}
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	df 90       	pop	r13
 1ca:	cf 90       	pop	r12
 1cc:	08 95       	ret

000001ce <sens_delay_ms>:

//ボタン操作を受け付けながら待機する関数
void sens_delay_ms (uint16_t num) {
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	8c 01       	movw	r16, r24

	for (unsigned int i = 0; i < num; i++){
 1d8:	c0 e0       	ldi	r28, 0x00	; 0
 1da:	d0 e0       	ldi	r29, 0x00	; 0
 1dc:	67 c0       	rjmp	.+206    	; 0x2ac <sens_delay_ms+0xde>
		if(!(VPORTB_IN & PIN1_bm)) {
 1de:	31 99       	sbic	0x06, 1	; 6
 1e0:	5e c0       	rjmp	.+188    	; 0x29e <sens_delay_ms+0xd0>

			//ここにタクトスイッチが押された時の動作を記述
			wakeup = 3200;
 1e2:	80 e8       	ldi	r24, 0x80	; 128
 1e4:	9c e0       	ldi	r25, 0x0C	; 12
 1e6:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 1ea:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>
		
			switch (mode) {
 1ee:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <mode>
 1f2:	82 30       	cpi	r24, 0x02	; 2
 1f4:	d1 f0       	breq	.+52     	; 0x22a <sens_delay_ms+0x5c>
 1f6:	83 30       	cpi	r24, 0x03	; 3
 1f8:	89 f1       	breq	.+98     	; 0x25c <sens_delay_ms+0x8e>
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	09 f0       	breq	.+2      	; 0x200 <sens_delay_ms+0x32>
 1fe:	4f c0       	rjmp	.+158    	; 0x29e <sens_delay_ms+0xd0>
				case MODE_CLOCK:
					while(!(VPORTB_IN & PIN1_bm));
 200:	31 9b       	sbis	0x06, 1	; 6
 202:	fe cf       	rjmp	.-4      	; 0x200 <sens_delay_ms+0x32>
					if(change_mode_after) {
 204:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <change_mode_after>
 208:	88 23       	and	r24, r24
 20a:	19 f0       	breq	.+6      	; 0x212 <sens_delay_ms+0x44>
						change_mode_after = 0;
 20c:	10 92 1c 38 	sts	0x381C, r1	; 0x80381c <change_mode_after>
 210:	46 c0       	rjmp	.+140    	; 0x29e <sens_delay_ms+0xd0>
					}else{
						//電圧の取得
						get_v();
 212:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
						display_v = 200;
 216:	88 ec       	ldi	r24, 0xC8	; 200
 218:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <display_v>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21c:	87 ea       	ldi	r24, 0xA7	; 167
 21e:	91 e6       	ldi	r25, 0x61	; 97
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <sens_delay_ms+0x52>
 224:	00 c0       	rjmp	.+0      	; 0x226 <sens_delay_ms+0x58>
 226:	00 00       	nop
 228:	3a c0       	rjmp	.+116    	; 0x29e <sens_delay_ms+0xd0>
						_delay_ms(100);
					}
				break;

				case MODE_HOUR_SET:
					while(!(VPORTB_IN & PIN1_bm));
 22a:	31 9b       	sbis	0x06, 1	; 6
 22c:	fe cf       	rjmp	.-4      	; 0x22a <sens_delay_ms+0x5c>
					if(change_mode_after) {
 22e:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <change_mode_after>
 232:	88 23       	and	r24, r24
 234:	19 f0       	breq	.+6      	; 0x23c <sens_delay_ms+0x6e>
						change_mode_after = 0;
 236:	10 92 1c 38 	sts	0x381C, r1	; 0x80381c <change_mode_after>
 23a:	31 c0       	rjmp	.+98     	; 0x29e <sens_delay_ms+0xd0>
					}else{
						if(++hour >= 24) hour = 0;
 23c:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <hour>
 240:	8f 5f       	subi	r24, 0xFF	; 255
 242:	80 93 21 38 	sts	0x3821, r24	; 0x803821 <hour>
 246:	88 31       	cpi	r24, 0x18	; 24
 248:	10 f0       	brcs	.+4      	; 0x24e <sens_delay_ms+0x80>
 24a:	10 92 21 38 	sts	0x3821, r1	; 0x803821 <hour>
 24e:	87 ea       	ldi	r24, 0xA7	; 167
 250:	91 e6       	ldi	r25, 0x61	; 97
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <sens_delay_ms+0x84>
 256:	00 c0       	rjmp	.+0      	; 0x258 <sens_delay_ms+0x8a>
 258:	00 00       	nop
 25a:	21 c0       	rjmp	.+66     	; 0x29e <sens_delay_ms+0xd0>
						_delay_ms(100);
					}
				break;

				case MODE_MIN_SET:
					while(!(VPORTB_IN & PIN1_bm));
 25c:	31 9b       	sbis	0x06, 1	; 6
 25e:	fe cf       	rjmp	.-4      	; 0x25c <sens_delay_ms+0x8e>
					if(change_mode_after) {
 260:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <change_mode_after>
 264:	88 23       	and	r24, r24
 266:	19 f0       	breq	.+6      	; 0x26e <sens_delay_ms+0xa0>
						change_mode_after = 0;
 268:	10 92 1c 38 	sts	0x381C, r1	; 0x80381c <change_mode_after>
 26c:	18 c0       	rjmp	.+48     	; 0x29e <sens_delay_ms+0xd0>
					}else{
						if(++min >= 60) {
 26e:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <min>
 272:	8f 5f       	subi	r24, 0xFF	; 255
 274:	80 93 22 38 	sts	0x3822, r24	; 0x803822 <min>
 278:	8c 33       	cpi	r24, 0x3C	; 60
 27a:	88 f0       	brcs	.+34     	; 0x29e <sens_delay_ms+0xd0>
							min = 0;
 27c:	10 92 22 38 	sts	0x3822, r1	; 0x803822 <min>
							if(++hour >= 24) hour = 0;
 280:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <hour>
 284:	8f 5f       	subi	r24, 0xFF	; 255
 286:	80 93 21 38 	sts	0x3821, r24	; 0x803821 <hour>
 28a:	88 31       	cpi	r24, 0x18	; 24
 28c:	10 f0       	brcs	.+4      	; 0x292 <sens_delay_ms+0xc4>
 28e:	10 92 21 38 	sts	0x3821, r1	; 0x803821 <hour>
 292:	87 ea       	ldi	r24, 0xA7	; 167
 294:	91 e6       	ldi	r25, 0x61	; 97
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <sens_delay_ms+0xc8>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <sens_delay_ms+0xce>
 29c:	00 00       	nop
 29e:	89 ef       	ldi	r24, 0xF9	; 249
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <sens_delay_ms+0xd4>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <sens_delay_ms+0xda>
 2a8:	00 00       	nop
}

//ボタン操作を受け付けながら待機する関数
void sens_delay_ms (uint16_t num) {

	for (unsigned int i = 0; i < num; i++){
 2aa:	21 96       	adiw	r28, 0x01	; 1
 2ac:	c0 17       	cp	r28, r16
 2ae:	d1 07       	cpc	r29, r17
 2b0:	08 f4       	brcc	.+2      	; 0x2b4 <sens_delay_ms+0xe6>
 2b2:	95 cf       	rjmp	.-214    	; 0x1de <sens_delay_ms+0x10>
				break;
			}
		}
		_delay_ms(1);
	}
}
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	08 95       	ret

000002be <seg_all_off>:

//7セグをすべて消灯する関数
void seg_all_off (void) {

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	VPORTA_OUT = VPORTA_OUT & 0b00000001;
 2be:	81 b1       	in	r24, 0x01	; 1
 2c0:	81 70       	andi	r24, 0x01	; 1
 2c2:	81 b9       	out	0x01, r24	; 1
	VPORTC_OUT = VPORTC_OUT & 0b11111110;
 2c4:	89 b1       	in	r24, 0x09	; 9
 2c6:	8e 7f       	andi	r24, 0xFE	; 254
 2c8:	89 b9       	out	0x09, r24	; 9
	//ダイナミック点灯用トランジスタも全てOFF
	VPORTB_OUT = VPORTB_OUT & 0b11001111;
 2ca:	85 b1       	in	r24, 0x05	; 5
 2cc:	8f 7c       	andi	r24, 0xCF	; 207
 2ce:	85 b9       	out	0x05, r24	; 5
	VPORTC_OUT = VPORTC_OUT & 0b11110001;
 2d0:	89 b1       	in	r24, 0x09	; 9
 2d2:	81 7f       	andi	r24, 0xF1	; 241
 2d4:	89 b9       	out	0x09, r24	; 9
 2d6:	08 95       	ret

000002d8 <change_mode>:
}

//モードを切り替える関数
//引数に0を指定した場合は次の定数のモードへ 定数を指定した場合はそのモードへ
void change_mode (uint8_t cmode) {
	if(cmode) {
 2d8:	88 23       	and	r24, r24
 2da:	19 f0       	breq	.+6      	; 0x2e2 <change_mode+0xa>
		mode = cmode;
 2dc:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <mode>
 2e0:	08 95       	ret
	}else if(mode == MODE_MIN_SET) {
 2e2:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <mode>
 2e6:	83 30       	cpi	r24, 0x03	; 3
 2e8:	21 f4       	brne	.+8      	; 0x2f2 <change_mode+0x1a>
		mode = MODE_CLOCK;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <mode>
 2f0:	08 95       	ret
	}else{
		mode++;
 2f2:	8f 5f       	subi	r24, 0xFF	; 255
 2f4:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <mode>
 2f8:	08 95       	ret

000002fa <__vector_10>:
	}
}

//TCA割り込み
ISR (TCA0_CMP0_vect) {
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	ef 92       	push	r14
 306:	ff 92       	push	r15
 308:	0f 93       	push	r16
 30a:	1f 93       	push	r17
 30c:	2f 93       	push	r18
 30e:	3f 93       	push	r19
 310:	4f 93       	push	r20
 312:	5f 93       	push	r21
 314:	6f 93       	push	r22
 316:	7f 93       	push	r23
 318:	8f 93       	push	r24
 31a:	9f 93       	push	r25
 31c:	af 93       	push	r26
 31e:	bf 93       	push	r27
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	ef 93       	push	r30
 326:	ff 93       	push	r31

	TCA0_SINGLE_CNT = 0;//カウントリセット
 328:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__RODATA_PM_OFFSET__+0x7f8a20>
 32c:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__RODATA_PM_OFFSET__+0x7f8a21>
	TCA0_SINGLE_INTFLAGS = 0b00010000; //割り込み要求フラグを解除
 330:	80 e1       	ldi	r24, 0x10	; 16
 332:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>

	//wakeupが0ならセグをすべて消灯してそれ以外を実行しない
	//メインループのseg_all_off関数とsleep_mode関数の間にこの割り込みが入り中途半端に7セグが点灯した状態でスリープするのを防ぐ記述
	if(!wakeup) {
 336:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <wakeup>
 33a:	90 91 20 38 	lds	r25, 0x3820	; 0x803820 <wakeup+0x1>
 33e:	89 2b       	or	r24, r25
 340:	19 f4       	brne	.+6      	; 0x348 <__vector_10+0x4e>
		seg_all_off();
 342:	0e 94 5f 01 	call	0x2be	; 0x2be <seg_all_off>
		return;
 346:	9e c1       	rjmp	.+828    	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
	//現状このドットは使用していないのでコメントアウト 使うときは有効化してください
	//uint8_t dig1c, dig4c,;
	//dig1c = di45c = 0;

	//太陽電池の発電電圧とキャパシタの電圧を表示
	if(display_v && mode == MODE_CLOCK) {
 348:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <display_v>
 34c:	88 23       	and	r24, r24
 34e:	09 f4       	brne	.+2      	; 0x352 <__vector_10+0x58>
 350:	6f c0       	rjmp	.+222    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 352:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <mode>
 356:	81 30       	cpi	r24, 0x01	; 1
 358:	09 f0       	breq	.+2      	; 0x35c <__vector_10+0x62>
 35a:	6a c0       	rjmp	.+212    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		uint8_t spv = supply_v * 10;
 35c:	20 e0       	ldi	r18, 0x00	; 0
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	40 e2       	ldi	r20, 0x20	; 32
 362:	51 e4       	ldi	r21, 0x41	; 65
 364:	60 91 18 38 	lds	r22, 0x3818	; 0x803818 <supply_v>
 368:	70 91 19 38 	lds	r23, 0x3819	; 0x803819 <supply_v+0x1>
 36c:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <supply_v+0x2>
 370:	90 91 1b 38 	lds	r25, 0x381B	; 0x80381b <supply_v+0x3>
 374:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__mulsf3>
 378:	0e 94 28 05 	call	0xa50	; 0xa50 <__fixunssfsi>
 37c:	c6 2f       	mov	r28, r22
		uint8_t slv =  solar_v * 10;
 37e:	20 e0       	ldi	r18, 0x00	; 0
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	40 e2       	ldi	r20, 0x20	; 32
 384:	51 e4       	ldi	r21, 0x41	; 65
 386:	60 91 14 38 	lds	r22, 0x3814	; 0x803814 <solar_v>
 38a:	70 91 15 38 	lds	r23, 0x3815	; 0x803815 <solar_v+0x1>
 38e:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <solar_v+0x2>
 392:	90 91 17 38 	lds	r25, 0x3817	; 0x803817 <solar_v+0x3>
 396:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__mulsf3>
 39a:	0e 94 28 05 	call	0xa50	; 0xa50 <__fixunssfsi>
		dig1  = seg[spv % 10];
 39e:	8d ec       	ldi	r24, 0xCD	; 205
 3a0:	c8 9f       	mul	r28, r24
 3a2:	e1 2d       	mov	r30, r1
 3a4:	11 24       	eor	r1, r1
 3a6:	e6 95       	lsr	r30
 3a8:	e6 95       	lsr	r30
 3aa:	e6 95       	lsr	r30
 3ac:	2e 2f       	mov	r18, r30
 3ae:	22 0f       	add	r18, r18
 3b0:	92 2f       	mov	r25, r18
 3b2:	99 0f       	add	r25, r25
 3b4:	99 0f       	add	r25, r25
 3b6:	92 0f       	add	r25, r18
 3b8:	c9 1b       	sub	r28, r25
 3ba:	ac 2f       	mov	r26, r28
 3bc:	b0 e0       	ldi	r27, 0x00	; 0
 3be:	ad 5f       	subi	r26, 0xFD	; 253
 3c0:	b7 4c       	sbci	r27, 0xC7	; 199
 3c2:	cc 91       	ld	r28, X
		dig2  = seg[(spv / 10) % 10];
 3c4:	e8 9f       	mul	r30, r24
 3c6:	91 2d       	mov	r25, r1
 3c8:	11 24       	eor	r1, r1
 3ca:	96 95       	lsr	r25
 3cc:	96 95       	lsr	r25
 3ce:	96 95       	lsr	r25
 3d0:	99 0f       	add	r25, r25
 3d2:	29 2f       	mov	r18, r25
 3d4:	22 0f       	add	r18, r18
 3d6:	22 0f       	add	r18, r18
 3d8:	92 0f       	add	r25, r18
 3da:	e9 1b       	sub	r30, r25
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	ed 5f       	subi	r30, 0xFD	; 253
 3e0:	f7 4c       	sbci	r31, 0xC7	; 199
 3e2:	d0 81       	ld	r29, Z
		dig3  = 0b00000000;
		dig4  = seg[slv % 10];
 3e4:	68 9f       	mul	r22, r24
 3e6:	e1 2d       	mov	r30, r1
 3e8:	11 24       	eor	r1, r1
 3ea:	e6 95       	lsr	r30
 3ec:	e6 95       	lsr	r30
 3ee:	e6 95       	lsr	r30
 3f0:	2e 2f       	mov	r18, r30
 3f2:	22 0f       	add	r18, r18
 3f4:	92 2f       	mov	r25, r18
 3f6:	99 0f       	add	r25, r25
 3f8:	99 0f       	add	r25, r25
 3fa:	92 0f       	add	r25, r18
 3fc:	69 1b       	sub	r22, r25
 3fe:	a6 2f       	mov	r26, r22
 400:	b0 e0       	ldi	r27, 0x00	; 0
 402:	ad 5f       	subi	r26, 0xFD	; 253
 404:	b7 4c       	sbci	r27, 0xC7	; 199
 406:	0c 91       	ld	r16, X
		dig5  = seg[(slv / 10) % 10];
 408:	e8 9f       	mul	r30, r24
 40a:	81 2d       	mov	r24, r1
 40c:	11 24       	eor	r1, r1
 40e:	86 95       	lsr	r24
 410:	86 95       	lsr	r24
 412:	86 95       	lsr	r24
 414:	88 0f       	add	r24, r24
 416:	98 2f       	mov	r25, r24
 418:	99 0f       	add	r25, r25
 41a:	99 0f       	add	r25, r25
 41c:	89 0f       	add	r24, r25
 41e:	e8 1b       	sub	r30, r24
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	ed 5f       	subi	r30, 0xFD	; 253
 424:	f7 4c       	sbci	r31, 0xC7	; 199
 426:	f0 80       	ld	r15, Z
		dig2c = dig5c = 0b00000001;//ドット(小数点)
 428:	ee 24       	eor	r14, r14
 42a:	e3 94       	inc	r14
	if(display_v && mode == MODE_CLOCK) {
		uint8_t spv = supply_v * 10;
		uint8_t slv =  solar_v * 10;
		dig1  = seg[spv % 10];
		dig2  = seg[(spv / 10) % 10];
		dig3  = 0b00000000;
 42c:	10 e0       	ldi	r17, 0x00	; 0
	//現状このドットは使用していないのでコメントアウト 使うときは有効化してください
	//uint8_t dig1c, dig4c,;
	//dig1c = di45c = 0;

	//太陽電池の発電電圧とキャパシタの電圧を表示
	if(display_v && mode == MODE_CLOCK) {
 42e:	5d c0       	rjmp	.+186    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
		dig4  = seg[slv % 10];
		dig5  = seg[(slv / 10) % 10];
		dig2c = dig5c = 0b00000001;//ドット(小数点)

	}else{//時刻を表示
		dig1  = seg[min % 10];
 430:	a0 91 22 38 	lds	r26, 0x3822	; 0x803822 <min>
 434:	8d ec       	ldi	r24, 0xCD	; 205
 436:	a8 9f       	mul	r26, r24
 438:	e1 2d       	mov	r30, r1
 43a:	11 24       	eor	r1, r1
 43c:	e6 95       	lsr	r30
 43e:	e6 95       	lsr	r30
 440:	e6 95       	lsr	r30
 442:	2e 2f       	mov	r18, r30
 444:	22 0f       	add	r18, r18
 446:	92 2f       	mov	r25, r18
 448:	99 0f       	add	r25, r25
 44a:	99 0f       	add	r25, r25
 44c:	92 0f       	add	r25, r18
 44e:	a9 1b       	sub	r26, r25
 450:	b0 e0       	ldi	r27, 0x00	; 0
 452:	ad 5f       	subi	r26, 0xFD	; 253
 454:	b7 4c       	sbci	r27, 0xC7	; 199
 456:	cc 91       	ld	r28, X
		dig2  = seg[(min / 10) % 10];
 458:	e8 9f       	mul	r30, r24
 45a:	81 2d       	mov	r24, r1
 45c:	11 24       	eor	r1, r1
 45e:	86 95       	lsr	r24
 460:	86 95       	lsr	r24
 462:	86 95       	lsr	r24
 464:	88 0f       	add	r24, r24
 466:	98 2f       	mov	r25, r24
 468:	99 0f       	add	r25, r25
 46a:	99 0f       	add	r25, r25
 46c:	89 0f       	add	r24, r25
 46e:	e8 1b       	sub	r30, r24
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	ed 5f       	subi	r30, 0xFD	; 253
 474:	f7 4c       	sbci	r31, 0xC7	; 199
 476:	d0 81       	ld	r29, Z
		if(!(RTC_CNT % 2) || mode != MODE_CLOCK) { //コロンの点滅
 478:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 47c:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
 480:	80 ff       	sbrs	r24, 0
 482:	06 c0       	rjmp	.+12     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 484:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <mode>
 488:	81 30       	cpi	r24, 0x01	; 1
 48a:	21 f0       	breq	.+8      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
			dig3  = 0b00000110;
 48c:	16 e0       	ldi	r17, 0x06	; 6
 48e:	03 c0       	rjmp	.+6      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 490:	16 e0       	ldi	r17, 0x06	; 6
 492:	01 c0       	rjmp	.+2      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		}else{
			dig3  = 0b00000000;
 494:	10 e0       	ldi	r17, 0x00	; 0
		}
		dig4  = seg[hour % 10];
 496:	a0 91 21 38 	lds	r26, 0x3821	; 0x803821 <hour>
 49a:	ed ec       	ldi	r30, 0xCD	; 205
 49c:	ae 9f       	mul	r26, r30
 49e:	81 2d       	mov	r24, r1
 4a0:	11 24       	eor	r1, r1
 4a2:	86 95       	lsr	r24
 4a4:	86 95       	lsr	r24
 4a6:	86 95       	lsr	r24
 4a8:	28 2f       	mov	r18, r24
 4aa:	22 0f       	add	r18, r18
 4ac:	92 2f       	mov	r25, r18
 4ae:	99 0f       	add	r25, r25
 4b0:	99 0f       	add	r25, r25
 4b2:	92 0f       	add	r25, r18
 4b4:	a9 1b       	sub	r26, r25
 4b6:	b0 e0       	ldi	r27, 0x00	; 0
 4b8:	ad 5f       	subi	r26, 0xFD	; 253
 4ba:	b7 4c       	sbci	r27, 0xC7	; 199
 4bc:	0c 91       	ld	r16, X

		//dig5のみ0なら不点灯にする(ゼロサプレス)
		uint8_t zerocheck = (hour / 10) % 10;
 4be:	8e 9f       	mul	r24, r30
 4c0:	e1 2d       	mov	r30, r1
 4c2:	11 24       	eor	r1, r1
 4c4:	e6 95       	lsr	r30
 4c6:	e6 95       	lsr	r30
 4c8:	e6 95       	lsr	r30
 4ca:	ee 0f       	add	r30, r30
 4cc:	9e 2f       	mov	r25, r30
 4ce:	99 0f       	add	r25, r25
 4d0:	99 0f       	add	r25, r25
 4d2:	e9 0f       	add	r30, r25
 4d4:	8e 1b       	sub	r24, r30
		if(zerocheck == 0) {
 4d6:	39 f0       	breq	.+14     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
			dig5 = 0b00000000;
		}else{
			dig5   = seg[zerocheck];
 4d8:	e8 2f       	mov	r30, r24
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	ed 5f       	subi	r30, 0xFD	; 253
 4de:	f7 4c       	sbci	r31, 0xC7	; 199
 4e0:	f0 80       	ld	r15, Z
	}

	static uint8_t sel = 0;
	uint8_t dig1, dig2, dig3, dig4, dig5 = 0;
	uint8_t dig2c, dig5c;
	dig2c = dig5c = 0;
 4e2:	e1 2c       	mov	r14, r1
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4e6:	e1 2c       	mov	r14, r1
		dig4  = seg[hour % 10];

		//dig5のみ0なら不点灯にする(ゼロサプレス)
		uint8_t zerocheck = (hour / 10) % 10;
		if(zerocheck == 0) {
			dig5 = 0b00000000;
 4e8:	f1 2c       	mov	r15, r1
	}

	//時刻設定時の点滅演出
	//点滅カウンター
	static uint16_t wink = 0;
	if(mode == MODE_HOUR_SET) {
 4ea:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <mode>
 4ee:	82 30       	cpi	r24, 0x02	; 2
 4f0:	a9 f4       	brne	.+42     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
		if(++wink < 512) dig4 = dig5 = 0b00000000;
 4f2:	80 91 10 38 	lds	r24, 0x3810	; 0x803810 <wink.3358>
 4f6:	90 91 11 38 	lds	r25, 0x3811	; 0x803811 <wink.3358+0x1>
 4fa:	01 96       	adiw	r24, 0x01	; 1
 4fc:	80 93 10 38 	sts	0x3810, r24	; 0x803810 <wink.3358>
 500:	90 93 11 38 	sts	0x3811, r25	; 0x803811 <wink.3358+0x1>
 504:	81 15       	cp	r24, r1
 506:	22 e0       	ldi	r18, 0x02	; 2
 508:	92 07       	cpc	r25, r18
 50a:	20 f1       	brcs	.+72     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
		else if (wink > 1023) wink = 0;
 50c:	81 15       	cp	r24, r1
 50e:	94 40       	sbci	r25, 0x04	; 4
 510:	30 f1       	brcs	.+76     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 512:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <wink.3358>
 516:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <wink.3358+0x1>
 51a:	21 c0       	rjmp	.+66     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
	}else if(mode == MODE_MIN_SET) {
 51c:	83 30       	cpi	r24, 0x03	; 3
 51e:	a9 f4       	brne	.+42     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
		if(++wink < 512) dig1 = dig2 = 0b00000000;
 520:	80 91 10 38 	lds	r24, 0x3810	; 0x803810 <wink.3358>
 524:	90 91 11 38 	lds	r25, 0x3811	; 0x803811 <wink.3358+0x1>
 528:	01 96       	adiw	r24, 0x01	; 1
 52a:	80 93 10 38 	sts	0x3810, r24	; 0x803810 <wink.3358>
 52e:	90 93 11 38 	sts	0x3811, r25	; 0x803811 <wink.3358+0x1>
 532:	81 15       	cp	r24, r1
 534:	22 e0       	ldi	r18, 0x02	; 2
 536:	92 07       	cpc	r25, r18
 538:	80 f0       	brcs	.+32     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
		else if (wink > 1023) wink = 0;
 53a:	81 15       	cp	r24, r1
 53c:	94 40       	sbci	r25, 0x04	; 4
 53e:	78 f0       	brcs	.+30     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 540:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <wink.3358>
 544:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <wink.3358+0x1>
 548:	0a c0       	rjmp	.+20     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
	}else{
		wink = 0;
 54a:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <wink.3358>
 54e:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <wink.3358+0x1>
 552:	05 c0       	rjmp	.+10     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>

	//時刻設定時の点滅演出
	//点滅カウンター
	static uint16_t wink = 0;
	if(mode == MODE_HOUR_SET) {
		if(++wink < 512) dig4 = dig5 = 0b00000000;
 554:	f1 2c       	mov	r15, r1
 556:	00 e0       	ldi	r16, 0x00	; 0
 558:	02 c0       	rjmp	.+4      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
		else if (wink > 1023) wink = 0;
	}else if(mode == MODE_MIN_SET) {
		if(++wink < 512) dig1 = dig2 = 0b00000000;
 55a:	d0 e0       	ldi	r29, 0x00	; 0
 55c:	c0 e0       	ldi	r28, 0x00	; 0
		wink = 0;
	}


	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();
 55e:	0e 94 5f 01 	call	0x2be	; 0x2be <seg_all_off>

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
	static uint8_t bn_pwm_count = 0; //7セグを間欠で点灯させるために0～7までを繰り返し数えるカウンター

	if(++bn_pwm_count > 7) bn_pwm_count = 0;
 562:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <bn_pwm_count.3360>
 566:	8f 5f       	subi	r24, 0xFF	; 255
 568:	80 93 0f 38 	sts	0x380F, r24	; 0x80380f <bn_pwm_count.3360>
 56c:	88 30       	cpi	r24, 0x08	; 8
 56e:	10 f0       	brcs	.+4      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 570:	10 92 0f 38 	sts	0x380F, r1	; 0x80380f <bn_pwm_count.3360>

	if(brightness == 1) {
 574:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 578:	81 30       	cpi	r24, 0x01	; 1
 57a:	31 f4       	brne	.+12     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
		if(!(bn_pwm_count % 4)) { //bn_pwm_countが0、4のタイミングで点灯
 57c:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <bn_pwm_count.3360>
 580:	83 70       	andi	r24, 0x03	; 3
 582:	71 f0       	breq	.+28     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	11 c0       	rjmp	.+34     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>

	if(brightness == 1) {
		if(!(bn_pwm_count % 4)) { //bn_pwm_countが0、4のタイミングで点灯
			seg_on = 1;
		}
	}else if(brightness == 2) {
 588:	82 30       	cpi	r24, 0x02	; 2
 58a:	31 f4       	brne	.+12     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
		if(bn_pwm_count % 2) { //bn_pwm_countが1、3、5、7のタイミングで点灯
 58c:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <bn_pwm_count.3360>
 590:	80 fd       	sbrc	r24, 0
 592:	08 c0       	rjmp	.+16     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	09 c0       	rjmp	.+18     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
		}
	}else if(brightness == 2) {
		if(bn_pwm_count % 2) { //bn_pwm_countが1、3、5、7のタイミングで点灯
			seg_on = 1;
		}
	}else if(brightness == 3) { //bn_pwm_countがいくつでも全てのタイミングで点灯
 598:	83 30       	cpi	r24, 0x03	; 3
 59a:	31 f0       	breq	.+12     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	05 c0       	rjmp	.+10     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>

	if(++bn_pwm_count > 7) bn_pwm_count = 0;

	if(brightness == 1) {
		if(!(bn_pwm_count % 4)) { //bn_pwm_countが0、4のタイミングで点灯
			seg_on = 1;
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	03 c0       	rjmp	.+6      	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
		}
	}else if(brightness == 2) {
		if(bn_pwm_count % 2) { //bn_pwm_countが1、3、5、7のタイミングで点灯
			seg_on = 1;
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	01 c0       	rjmp	.+2      	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
		}
	}else if(brightness == 3) { //bn_pwm_countがいくつでも全てのタイミングで点灯
		seg_on = 1;
 5a8:	81 e0       	ldi	r24, 0x01	; 1
	}

	//点灯実行
	if(seg_on) {
 5aa:	88 23       	and	r24, r24
 5ac:	79 f1       	breq	.+94     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
		switch ( sel ) {
 5ae:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <__data_end>
 5b2:	82 30       	cpi	r24, 0x02	; 2
 5b4:	c9 f0       	breq	.+50     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5b6:	28 f4       	brcc	.+10     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5b8:	88 23       	and	r24, r24
 5ba:	41 f0       	breq	.+16     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5bc:	81 30       	cpi	r24, 0x01	; 1
 5be:	59 f0       	breq	.+22     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5c0:	25 c0       	rjmp	.+74     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
 5c2:	83 30       	cpi	r24, 0x03	; 3
 5c4:	b1 f0       	breq	.+44     	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
 5c6:	84 30       	cpi	r24, 0x04	; 4
 5c8:	c9 f0       	breq	.+50     	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 5ca:	20 c0       	rjmp	.+64     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>

			case 0:
			VPORTB_OUT = VPORTB_OUT | 0b00010000;
 5cc:	85 b1       	in	r24, 0x05	; 5
 5ce:	80 61       	ori	r24, 0x10	; 16
 5d0:	85 b9       	out	0x05, r24	; 5
			VPORTA_OUT = dig1;
 5d2:	c1 b9       	out	0x01, r28	; 1
			//現状このドットは使用していないのでコメントアウト 使うときは有効化してください
			//VPORTC_OUT = (dig1c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
			break;
 5d4:	1b c0       	rjmp	.+54     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>

			case 1:
			VPORTC_OUT = VPORTC_OUT | 0b00001000;
 5d6:	89 b1       	in	r24, 0x09	; 9
 5d8:	88 60       	ori	r24, 0x08	; 8
 5da:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig2;
 5dc:	d1 b9       	out	0x01, r29	; 1
			VPORTC_OUT = (dig2c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 5de:	89 b1       	in	r24, 0x09	; 9
 5e0:	8e 7f       	andi	r24, 0xFE	; 254
 5e2:	e8 2a       	or	r14, r24
 5e4:	e9 b8       	out	0x09, r14	; 9
			break;
 5e6:	12 c0       	rjmp	.+36     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>

			case 2:
			VPORTB_OUT = VPORTB_OUT | 0b00100000;
 5e8:	85 b1       	in	r24, 0x05	; 5
 5ea:	80 62       	ori	r24, 0x20	; 32
 5ec:	85 b9       	out	0x05, r24	; 5
			VPORTA_OUT = dig3;
 5ee:	11 b9       	out	0x01, r17	; 1
			break;
 5f0:	0d c0       	rjmp	.+26     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>

			case 3:
			VPORTC_OUT = VPORTC_OUT | 0b00000100;
 5f2:	89 b1       	in	r24, 0x09	; 9
 5f4:	84 60       	ori	r24, 0x04	; 4
 5f6:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig4;
 5f8:	01 b9       	out	0x01, r16	; 1
			//現状このドットは使用していないのでコメントアウト 使うときは有効化してください
			//VPORTC_OUT = (dig4c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
			break;
 5fa:	08 c0       	rjmp	.+16     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>

			case 4:
			VPORTC_OUT = VPORTC_OUT | 0b00000010;
 5fc:	89 b1       	in	r24, 0x09	; 9
 5fe:	82 60       	ori	r24, 0x02	; 2
 600:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig5;
 602:	f1 b8       	out	0x01, r15	; 1
			VPORTC_OUT = (dig5c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 604:	89 b1       	in	r24, 0x09	; 9
 606:	8e 7f       	andi	r24, 0xFE	; 254
 608:	e8 2a       	or	r14, r24
 60a:	e9 b8       	out	0x09, r14	; 9
		}
	}


	//5回に1回やること
	if ( ++sel == 5 ) {
 60c:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <__data_end>
 610:	8f 5f       	subi	r24, 0xFF	; 255
 612:	80 93 0e 38 	sts	0x380E, r24	; 0x80380e <__data_end>
 616:	85 30       	cpi	r24, 0x05	; 5
 618:	a9 f5       	brne	.+106    	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
		//selの0~5トグル動作
		sel = 0;
 61a:	10 92 0e 38 	sts	0x380E, r1	; 0x80380e <__data_end>

		//スリープへ向けwakeupを減らす
		if(wakeup) wakeup--;
 61e:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <wakeup>
 622:	90 91 20 38 	lds	r25, 0x3820	; 0x803820 <wakeup+0x1>
 626:	00 97       	sbiw	r24, 0x00	; 0
 628:	29 f0       	breq	.+10     	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
 62a:	01 97       	sbiw	r24, 0x01	; 1
 62c:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 630:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>

		//電圧表示時間を減らす
		if(display_v) display_v--;
 634:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <display_v>
 638:	88 23       	and	r24, r24
 63a:	19 f0       	breq	.+6      	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 63c:	81 50       	subi	r24, 0x01	; 1
 63e:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <display_v>

		//タクトスイッチが長押しされている場合、長押しカウントを加算
		if(VPORTB_IN & PIN1_bm) {
 642:	31 9b       	sbis	0x06, 1	; 6
 644:	05 c0       	rjmp	.+10     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
			long_push = 0;
 646:	10 92 1d 38 	sts	0x381D, r1	; 0x80381d <long_push>
 64a:	10 92 1e 38 	sts	0x381E, r1	; 0x80381e <long_push+0x1>
 64e:	1a c0       	rjmp	.+52     	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
		}else{
			if(++long_push > 1200) {
 650:	80 91 1d 38 	lds	r24, 0x381D	; 0x80381d <long_push>
 654:	90 91 1e 38 	lds	r25, 0x381E	; 0x80381e <long_push+0x1>
 658:	01 96       	adiw	r24, 0x01	; 1
 65a:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <long_push>
 65e:	90 93 1e 38 	sts	0x381E, r25	; 0x80381e <long_push+0x1>
 662:	81 3b       	cpi	r24, 0xB1	; 177
 664:	94 40       	sbci	r25, 0x04	; 4
 666:	70 f0       	brcs	.+28     	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
				long_push = 0;
 668:	10 92 1d 38 	sts	0x381D, r1	; 0x80381d <long_push>
 66c:	10 92 1e 38 	sts	0x381E, r1	; 0x80381e <long_push+0x1>
				RTC_CNT = 0; //時刻設定をした後、秒数が0から始まるようにする
 670:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 674:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
				change_mode(0);
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <change_mode>
				change_mode_after = 1;
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <change_mode_after>
			}
		}
	}

}
 684:	ff 91       	pop	r31
 686:	ef 91       	pop	r30
 688:	df 91       	pop	r29
 68a:	cf 91       	pop	r28
 68c:	bf 91       	pop	r27
 68e:	af 91       	pop	r26
 690:	9f 91       	pop	r25
 692:	8f 91       	pop	r24
 694:	7f 91       	pop	r23
 696:	6f 91       	pop	r22
 698:	5f 91       	pop	r21
 69a:	4f 91       	pop	r20
 69c:	3f 91       	pop	r19
 69e:	2f 91       	pop	r18
 6a0:	1f 91       	pop	r17
 6a2:	0f 91       	pop	r16
 6a4:	ff 90       	pop	r15
 6a6:	ef 90       	pop	r14
 6a8:	0f 90       	pop	r0
 6aa:	0f be       	out	0x3f, r0	; 63
 6ac:	0f 90       	pop	r0
 6ae:	1f 90       	pop	r1
 6b0:	18 95       	reti

000006b2 <__vector_4>:

//外部割り込み PB0が変化したら 両方のエッジを検出する(片方エッジにしたいがそうするとなぜかスタンバイから復帰しない)
ISR(PORTB_PORT_vect) {
 6b2:	1f 92       	push	r1
 6b4:	0f 92       	push	r0
 6b6:	0f b6       	in	r0, 0x3f	; 63
 6b8:	0f 92       	push	r0
 6ba:	11 24       	eor	r1, r1
 6bc:	2f 93       	push	r18
 6be:	3f 93       	push	r19
 6c0:	4f 93       	push	r20
 6c2:	5f 93       	push	r21
 6c4:	6f 93       	push	r22
 6c6:	7f 93       	push	r23
 6c8:	8f 93       	push	r24
 6ca:	9f 93       	push	r25
 6cc:	af 93       	push	r26
 6ce:	bf 93       	push	r27
 6d0:	ef 93       	push	r30
 6d2:	ff 93       	push	r31
	
	PORTB_INTFLAGS = PORTB_INTFLAGS | 0b00000010; //割り込み要求フラグ解除
 6d4:	e9 e2       	ldi	r30, 0x29	; 41
 6d6:	f4 e0       	ldi	r31, 0x04	; 4
 6d8:	80 81       	ld	r24, Z
 6da:	82 60       	ori	r24, 0x02	; 2
 6dc:	80 83       	st	Z, r24

	//赤外線センサー PB0がLowに切り替わったら何もせず返す 両方のエッジを検出するようにしているので立ち下がりエッジ割り込みはここで無効にする
	if(!(VPORTB_IN & PIN0_bm)) {
 6de:	30 9b       	sbis	0x06, 0	; 6
 6e0:	10 c0       	rjmp	.+32     	; 0x702 <__vector_4+0x50>
		return;
	}

	//赤外線センサー PB0がHighだったら一定時間起き上がらせる
	if(VPORTB_IN & PIN0_bm) {
 6e2:	30 9b       	sbis	0x06, 0	; 6
 6e4:	0e c0       	rjmp	.+28     	; 0x702 <__vector_4+0x50>

		//まず電圧測定する
		if(yet_v) {
 6e6:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <yet_v>
 6ea:	88 23       	and	r24, r24
 6ec:	21 f0       	breq	.+8      	; 0x6f6 <__vector_4+0x44>
			yet_v = 0; //電圧測定をしたことをyet_vに記録
 6ee:	10 92 01 38 	sts	0x3801, r1	; 0x803801 <yet_v>
			get_v();
 6f2:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
		}

		//一定時間起き上がらせる
		wakeup = 800;
 6f6:	80 e2       	ldi	r24, 0x20	; 32
 6f8:	93 e0       	ldi	r25, 0x03	; 3
 6fa:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 6fe:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>
		return;
	}

	return;
}
 702:	ff 91       	pop	r31
 704:	ef 91       	pop	r30
 706:	bf 91       	pop	r27
 708:	af 91       	pop	r26
 70a:	9f 91       	pop	r25
 70c:	8f 91       	pop	r24
 70e:	7f 91       	pop	r23
 710:	6f 91       	pop	r22
 712:	5f 91       	pop	r21
 714:	4f 91       	pop	r20
 716:	3f 91       	pop	r19
 718:	2f 91       	pop	r18
 71a:	0f 90       	pop	r0
 71c:	0f be       	out	0x3f, r0	; 63
 71e:	0f 90       	pop	r0
 720:	1f 90       	pop	r1
 722:	18 95       	reti

00000724 <__vector_6>:

//リアルタイムクロック 比較一致割り込み
ISR(RTC_CNT_vect) {
 724:	1f 92       	push	r1
 726:	0f 92       	push	r0
 728:	0f b6       	in	r0, 0x3f	; 63
 72a:	0f 92       	push	r0
 72c:	11 24       	eor	r1, r1
 72e:	2f 93       	push	r18
 730:	3f 93       	push	r19
 732:	4f 93       	push	r20
 734:	5f 93       	push	r21
 736:	6f 93       	push	r22
 738:	7f 93       	push	r23
 73a:	8f 93       	push	r24
 73c:	9f 93       	push	r25
 73e:	af 93       	push	r26
 740:	bf 93       	push	r27
 742:	ef 93       	push	r30
 744:	ff 93       	push	r31
	RTC_CNT = 0;
 746:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 74a:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
	RTC_INTFLAGS = RTC_INTFLAGS | 0b00000010;
 74e:	e3 e4       	ldi	r30, 0x43	; 67
 750:	f1 e0       	ldi	r31, 0x01	; 1
 752:	80 81       	ld	r24, Z
 754:	82 60       	ori	r24, 0x02	; 2
 756:	80 83       	st	Z, r24

	//時計を進める
	if (mode == MODE_CLOCK && ++min >= 60) {
 758:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <mode>
 75c:	81 30       	cpi	r24, 0x01	; 1
 75e:	91 f4       	brne	.+36     	; 0x784 <__vector_6+0x60>
 760:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <min>
 764:	8f 5f       	subi	r24, 0xFF	; 255
 766:	80 93 22 38 	sts	0x3822, r24	; 0x803822 <min>
 76a:	8c 33       	cpi	r24, 0x3C	; 60
 76c:	58 f0       	brcs	.+22     	; 0x784 <__vector_6+0x60>
		min = 0;
 76e:	10 92 22 38 	sts	0x3822, r1	; 0x803822 <min>
		if(++hour >= 24) hour = 0;
 772:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <hour>
 776:	8f 5f       	subi	r24, 0xFF	; 255
 778:	80 93 21 38 	sts	0x3821, r24	; 0x803821 <hour>
 77c:	88 31       	cpi	r24, 0x18	; 24
 77e:	10 f0       	brcs	.+4      	; 0x784 <__vector_6+0x60>
 780:	10 92 21 38 	sts	0x3821, r1	; 0x803821 <hour>
	}
	
	//1時間に1回やる処理
	if(!min) {
 784:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <min>
 788:	81 11       	cpse	r24, r1
 78a:	44 c0       	rjmp	.+136    	; 0x814 <__DATA_REGION_LENGTH__+0x14>

		if(!wakeup){
 78c:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <wakeup>
 790:	90 91 20 38 	lds	r25, 0x3820	; 0x803820 <wakeup+0x1>
 794:	89 2b       	or	r24, r25
 796:	09 f0       	breq	.+2      	; 0x79a <__vector_6+0x76>
 798:	3d c0       	rjmp	.+122    	; 0x814 <__DATA_REGION_LENGTH__+0x14>
			get_v();
 79a:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
			//低電圧再起動処理 起きてる時にやると一瞬7セグがちらつくので起きてない時(厳密には起きてるカウントがされていない時)にやる
			if(supply_v <= MIN_SUPPLY_V) {
 79e:	60 91 18 38 	lds	r22, 0x3818	; 0x803818 <supply_v>
 7a2:	70 91 19 38 	lds	r23, 0x3819	; 0x803819 <supply_v+0x1>
 7a6:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <supply_v+0x2>
 7aa:	90 91 1b 38 	lds	r25, 0x381B	; 0x80381b <supply_v+0x3>
 7ae:	2a e9       	ldi	r18, 0x9A	; 154
 7b0:	39 e9       	ldi	r19, 0x99	; 153
 7b2:	49 ed       	ldi	r20, 0xD9	; 217
 7b4:	5f e3       	ldi	r21, 0x3F	; 63
 7b6:	0e 94 b1 04 	call	0x962	; 0x962 <__cmpsf2>
 7ba:	18 16       	cp	r1, r24
 7bc:	94 f0       	brlt	.+36     	; 0x7e2 <__vector_6+0xbe>
				//停止処理
				//ウォッチドッグタイマを0.008秒で起動
				wdt_enable(0b00000001);//0.008秒の場合、右4桁をデータシート上の8CLKのレジスタ設定値にする
 7be:	88 ed       	ldi	r24, 0xD8	; 216
 7c0:	a8 95       	wdr
 7c2:	84 bf       	out	0x34, r24	; 52
 7c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
 7c8:	81 60       	ori	r24, 0x01	; 1
 7ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
 7ce:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__RODATA_PM_OFFSET__+0x7f8101>
 7d2:	81 fd       	sbrc	r24, 1
 7d4:	fc cf       	rjmp	.-8      	; 0x7ce <__vector_6+0xaa>
 7d6:	87 ea       	ldi	r24, 0xA7	; 167
 7d8:	91 e6       	ldi	r25, 0x61	; 97
 7da:	01 97       	sbiw	r24, 0x01	; 1
 7dc:	f1 f7       	brne	.-4      	; 0x7da <__vector_6+0xb6>
 7de:	00 c0       	rjmp	.+0      	; 0x7e0 <__vector_6+0xbc>
 7e0:	00 00       	nop
				//待機(しているあいだにウォッチドッグリセットがかかる)
				_delay_ms(100);
			}
			//高電圧放電処理
			if(supply_v >= MAX_SUPPLY_V) {
 7e2:	60 91 18 38 	lds	r22, 0x3818	; 0x803818 <supply_v>
 7e6:	70 91 19 38 	lds	r23, 0x3819	; 0x803819 <supply_v+0x1>
 7ea:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <supply_v+0x2>
 7ee:	90 91 1b 38 	lds	r25, 0x381B	; 0x80381b <supply_v+0x3>
 7f2:	26 e6       	ldi	r18, 0x66	; 102
 7f4:	36 e6       	ldi	r19, 0x66	; 102
 7f6:	46 ea       	ldi	r20, 0xA6	; 166
 7f8:	50 e4       	ldi	r21, 0x40	; 64
 7fa:	0e 94 09 06 	call	0xc12	; 0xc12 <__gesf2>
 7fe:	88 23       	and	r24, r24
 800:	4c f0       	brlt	.+18     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
				wakeup = 5200;
 802:	80 e5       	ldi	r24, 0x50	; 80
 804:	94 e1       	ldi	r25, 0x14	; 20
 806:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 80a:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>
				discharge = 1;
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	80 93 12 38 	sts	0x3812, r24	; 0x803812 <discharge>
		}

	}

	return;
}
 814:	ff 91       	pop	r31
 816:	ef 91       	pop	r30
 818:	bf 91       	pop	r27
 81a:	af 91       	pop	r26
 81c:	9f 91       	pop	r25
 81e:	8f 91       	pop	r24
 820:	7f 91       	pop	r23
 822:	6f 91       	pop	r22
 824:	5f 91       	pop	r21
 826:	4f 91       	pop	r20
 828:	3f 91       	pop	r19
 82a:	2f 91       	pop	r18
 82c:	0f 90       	pop	r0
 82e:	0f be       	out	0x3f, r0	; 63
 830:	0f 90       	pop	r0
 832:	1f 90       	pop	r1
 834:	18 95       	reti

00000836 <main>:
int main(void) {

	//■□■――――――――――――――――――――――――――――――――――――■□■
	//		□ レジスタの設定
	//■□■――――――――――――――――――――――――――――――――――――■□■
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 836:	88 ed       	ldi	r24, 0xD8	; 216
 838:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLA = 0b00000000; //16/20 MHz内部オシレータ
 83a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RODATA_PM_OFFSET__+0x7f8060>
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 83e:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLB = 0b00000111; //16分周
 840:	97 e0       	ldi	r25, 0x07	; 7
 842:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>

	//入出力モード設定
	VPORTA_DIR = 0b11111111; //ポートA 
 846:	9f ef       	ldi	r25, 0xFF	; 255
 848:	90 b9       	out	0x00, r25	; 0
	VPORTB_DIR = 0b11111100; //ポートB 
 84a:	2c ef       	ldi	r18, 0xFC	; 252
 84c:	24 b9       	out	0x04, r18	; 4
	VPORTC_DIR = 0b11111111; //ポートC
 84e:	98 b9       	out	0x08, r25	; 8

	//出力の初期化
	VPORTA_OUT = 0b00000000; //ポートA
 850:	11 b8       	out	0x01, r1	; 1
	VPORTB_OUT = 0b00000000; //ポートB
 852:	15 b8       	out	0x05, r1	; 5
	VPORTC_OUT = 0b00000000; //ポートC
 854:	19 b8       	out	0x09, r1	; 9

	//焦電型赤外線センサー入力
	PORTB_PIN0CTRL = 0b00000001; //プルアップ無効 両方のエッジを検出する
 856:	91 e0       	ldi	r25, 0x01	; 1
 858:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <__RODATA_PM_OFFSET__+0x7f8430>
	//タクトスイッチ入力
	PORTB_PIN1CTRL = 0b00001000; //プルアップ有効
 85c:	28 e0       	ldi	r18, 0x08	; 8
 85e:	20 93 31 04 	sts	0x0431, r18	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>

	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 862:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_XOSC32KCTRLA = 0b00000001; //外付け水晶振動子 イネーブル
 864:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__RODATA_PM_OFFSET__+0x7f807c>
	
	//RTC設定
	RTC_INTCTRL = 0b00000010; //比較一致割り込み許可
 868:	82 e0       	ldi	r24, 0x02	; 2
 86a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__RODATA_PM_OFFSET__+0x7f8142>
	RTC_CLKSEL  = 0b00000010; //クロック選択 XOSC32Kからの32.768 kHz
 86e:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <__RODATA_PM_OFFSET__+0x7f8147>
	//STATUS.CTRLABUSYフラグが1の間待機
	while((RTC_STATUS & 0b00000001));
 872:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7f8141>
 876:	80 fd       	sbrc	r24, 0
 878:	fc cf       	rjmp	.-8      	; 0x872 <main+0x3c>
	RTC_CTRLA   = 0b11110001; //ｽﾀﾝﾊﾞｲ休止動作でもRTC許可 16384分周=0.5秒カウント RTC許可
 87a:	81 ef       	ldi	r24, 0xF1	; 241
 87c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__RODATA_PM_OFFSET__+0x7f8140>

	//割り込みたい間隔の秒数をx2-1して代入
	RTC_CMP = 60 * 2 - 1;
 880:	87 e7       	ldi	r24, 0x77	; 119
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__RODATA_PM_OFFSET__+0x7f814c>
 888:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__RODATA_PM_OFFSET__+0x7f814d>

	//タイマーA
	TCA0_SINGLE_CTRLA = 0b00001101; //1024分周 動作許可
 88c:	8d e0       	ldi	r24, 0x0D	; 13
 88e:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
	TCA0_SINGLE_CTRLB = 0b00000000; //
 892:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
	TCA0_SINGLE_CMP0 = 1; // カウントがこの値に達したら割り込み(TCA0_CMP1_vect)が発生
 896:	81 e0       	ldi	r24, 0x01	; 1
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
 89e:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__RODATA_PM_OFFSET__+0x7f8a29>
	TCA0_SINGLE_INTCTRL = 0b00010000; //CMP0割り込み許可
 8a2:	80 e1       	ldi	r24, 0x10	; 16
 8a4:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__RODATA_PM_OFFSET__+0x7f8a0a>

	//ADC設定
	ADC0_CTRLA = 0b00000001; //ADC Enable
 8a8:	91 e0       	ldi	r25, 0x01	; 1
 8aa:	90 93 00 06 	sts	0x0600, r25	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
	ADC0_CTRLB = 0b00000000; //累積なし
 8ae:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <__RODATA_PM_OFFSET__+0x7f8601>
	ADC0_CTRLC = 0b01010101; //VREF = VDD, プリスケーラ1/64
 8b2:	95 e5       	ldi	r25, 0x55	; 85
 8b4:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__RODATA_PM_OFFSET__+0x7f8602>
	VREF_CTRLA = 0b00010000; //内部基準電圧 1.1V
 8b8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__RODATA_PM_OFFSET__+0x7f80a0>

	set_sleep_mode(SLEEP_MODE_STANDBY); //スリープモードを設定
 8bc:	e0 e5       	ldi	r30, 0x50	; 80
 8be:	f0 e0       	ldi	r31, 0x00	; 0
 8c0:	80 81       	ld	r24, Z
 8c2:	89 7f       	andi	r24, 0xF9	; 249
 8c4:	82 60       	ori	r24, 0x02	; 2
 8c6:	80 83       	st	Z, r24
 8c8:	81 ee       	ldi	r24, 0xE1	; 225
 8ca:	94 e0       	ldi	r25, 0x04	; 4
 8cc:	01 97       	sbiw	r24, 0x01	; 1
 8ce:	f1 f7       	brne	.-4      	; 0x8cc <main+0x96>
 8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <main+0x9c>
 8d2:	00 00       	nop

	//少し待機
	_delay_ms(5);

	sei(); //割り込み許可
 8d4:	78 94       	sei
 8d6:	23 c0       	rjmp	.+70     	; 0x91e <main+0xe8>
	
	while (1) {

		//放電中ループ 起き続け3秒毎に電圧を計り下がっていたらブレイク
		while (discharge) {
			get_v();
 8d8:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
			if(supply_v < (MAX_SUPPLY_V - 0.1)) {
 8dc:	60 91 18 38 	lds	r22, 0x3818	; 0x803818 <supply_v>
 8e0:	70 91 19 38 	lds	r23, 0x3819	; 0x803819 <supply_v+0x1>
 8e4:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <supply_v+0x2>
 8e8:	90 91 1b 38 	lds	r25, 0x381B	; 0x80381b <supply_v+0x3>
 8ec:	23 e3       	ldi	r18, 0x33	; 51
 8ee:	33 e3       	ldi	r19, 0x33	; 51
 8f0:	43 ea       	ldi	r20, 0xA3	; 163
 8f2:	50 e4       	ldi	r21, 0x40	; 64
 8f4:	0e 94 b1 04 	call	0x962	; 0x962 <__cmpsf2>
 8f8:	88 23       	and	r24, r24
 8fa:	3c f4       	brge	.+14     	; 0x90a <main+0xd4>
				discharge = 0;
 8fc:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <discharge>
				wakeup = 0;
 900:	10 92 1f 38 	sts	0x381F, r1	; 0x80381f <wakeup>
 904:	10 92 20 38 	sts	0x3820, r1	; 0x803820 <wakeup+0x1>
				break;
 908:	0e c0       	rjmp	.+28     	; 0x926 <main+0xf0>
			}
			sens_delay_ms(3000);
 90a:	88 eb       	ldi	r24, 0xB8	; 184
 90c:	9b e0       	ldi	r25, 0x0B	; 11
 90e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <sens_delay_ms>
			wakeup = 5200;
 912:	80 e5       	ldi	r24, 0x50	; 80
 914:	94 e1       	ldi	r25, 0x14	; 20
 916:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 91a:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>
	sei(); //割り込み許可
	
	while (1) {

		//放電中ループ 起き続け3秒毎に電圧を計り下がっていたらブレイク
		while (discharge) {
 91e:	80 91 12 38 	lds	r24, 0x3812	; 0x803812 <discharge>
 922:	81 11       	cpse	r24, r1
 924:	d9 cf       	rjmp	.-78     	; 0x8d8 <main+0xa2>
			}
			sens_delay_ms(3000);
			wakeup = 5200;
		}

		if(!wakeup) {
 926:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <wakeup>
 92a:	90 91 20 38 	lds	r25, 0x3820	; 0x803820 <wakeup+0x1>
 92e:	89 2b       	or	r24, r25
 930:	99 f4       	brne	.+38     	; 0x958 <main+0x122>
			//寝る準備
			seg_all_off();
 932:	0e 94 5f 01 	call	0x2be	; 0x2be <seg_all_off>
			change_mode(MODE_CLOCK);
 936:	81 e0       	ldi	r24, 0x01	; 1
 938:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <change_mode>
			display_v = 0;
 93c:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <display_v>
			yet_v = 1;
 940:	81 e0       	ldi	r24, 0x01	; 1
 942:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <yet_v>
			//寝る
			sleep_mode();
 946:	e0 e5       	ldi	r30, 0x50	; 80
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	81 60       	ori	r24, 0x01	; 1
 94e:	80 83       	st	Z, r24
 950:	88 95       	sleep
 952:	80 81       	ld	r24, Z
 954:	8e 7f       	andi	r24, 0xFE	; 254
 956:	80 83       	st	Z, r24
		}
		
		sens_delay_ms(5);
 958:	85 e0       	ldi	r24, 0x05	; 5
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <sens_delay_ms>

	}
 960:	de cf       	rjmp	.-68     	; 0x91e <main+0xe8>

00000962 <__cmpsf2>:
 962:	0e 94 94 05 	call	0xb28	; 0xb28 <__fp_cmp>
 966:	08 f4       	brcc	.+2      	; 0x96a <__cmpsf2+0x8>
 968:	81 e0       	ldi	r24, 0x01	; 1
 96a:	08 95       	ret

0000096c <__divsf3>:
 96c:	0e 94 ca 04 	call	0x994	; 0x994 <__divsf3x>
 970:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__fp_round>
 974:	0e 94 c8 05 	call	0xb90	; 0xb90 <__fp_pscB>
 978:	58 f0       	brcs	.+22     	; 0x990 <__divsf3+0x24>
 97a:	0e 94 c1 05 	call	0xb82	; 0xb82 <__fp_pscA>
 97e:	40 f0       	brcs	.+16     	; 0x990 <__divsf3+0x24>
 980:	29 f4       	brne	.+10     	; 0x98c <__divsf3+0x20>
 982:	5f 3f       	cpi	r21, 0xFF	; 255
 984:	29 f0       	breq	.+10     	; 0x990 <__divsf3+0x24>
 986:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__fp_inf>
 98a:	51 11       	cpse	r21, r1
 98c:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__fp_szero>
 990:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__fp_nan>

00000994 <__divsf3x>:
 994:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__fp_split3>
 998:	68 f3       	brcs	.-38     	; 0x974 <__divsf3+0x8>

0000099a <__divsf3_pse>:
 99a:	99 23       	and	r25, r25
 99c:	b1 f3       	breq	.-20     	; 0x98a <__divsf3+0x1e>
 99e:	55 23       	and	r21, r21
 9a0:	91 f3       	breq	.-28     	; 0x986 <__divsf3+0x1a>
 9a2:	95 1b       	sub	r25, r21
 9a4:	55 0b       	sbc	r21, r21
 9a6:	bb 27       	eor	r27, r27
 9a8:	aa 27       	eor	r26, r26
 9aa:	62 17       	cp	r22, r18
 9ac:	73 07       	cpc	r23, r19
 9ae:	84 07       	cpc	r24, r20
 9b0:	38 f0       	brcs	.+14     	; 0x9c0 <__divsf3_pse+0x26>
 9b2:	9f 5f       	subi	r25, 0xFF	; 255
 9b4:	5f 4f       	sbci	r21, 0xFF	; 255
 9b6:	22 0f       	add	r18, r18
 9b8:	33 1f       	adc	r19, r19
 9ba:	44 1f       	adc	r20, r20
 9bc:	aa 1f       	adc	r26, r26
 9be:	a9 f3       	breq	.-22     	; 0x9aa <__divsf3_pse+0x10>
 9c0:	35 d0       	rcall	.+106    	; 0xa2c <__divsf3_pse+0x92>
 9c2:	0e 2e       	mov	r0, r30
 9c4:	3a f0       	brmi	.+14     	; 0x9d4 <__divsf3_pse+0x3a>
 9c6:	e0 e8       	ldi	r30, 0x80	; 128
 9c8:	32 d0       	rcall	.+100    	; 0xa2e <__divsf3_pse+0x94>
 9ca:	91 50       	subi	r25, 0x01	; 1
 9cc:	50 40       	sbci	r21, 0x00	; 0
 9ce:	e6 95       	lsr	r30
 9d0:	00 1c       	adc	r0, r0
 9d2:	ca f7       	brpl	.-14     	; 0x9c6 <__divsf3_pse+0x2c>
 9d4:	2b d0       	rcall	.+86     	; 0xa2c <__divsf3_pse+0x92>
 9d6:	fe 2f       	mov	r31, r30
 9d8:	29 d0       	rcall	.+82     	; 0xa2c <__divsf3_pse+0x92>
 9da:	66 0f       	add	r22, r22
 9dc:	77 1f       	adc	r23, r23
 9de:	88 1f       	adc	r24, r24
 9e0:	bb 1f       	adc	r27, r27
 9e2:	26 17       	cp	r18, r22
 9e4:	37 07       	cpc	r19, r23
 9e6:	48 07       	cpc	r20, r24
 9e8:	ab 07       	cpc	r26, r27
 9ea:	b0 e8       	ldi	r27, 0x80	; 128
 9ec:	09 f0       	breq	.+2      	; 0x9f0 <__divsf3_pse+0x56>
 9ee:	bb 0b       	sbc	r27, r27
 9f0:	80 2d       	mov	r24, r0
 9f2:	bf 01       	movw	r22, r30
 9f4:	ff 27       	eor	r31, r31
 9f6:	93 58       	subi	r25, 0x83	; 131
 9f8:	5f 4f       	sbci	r21, 0xFF	; 255
 9fa:	3a f0       	brmi	.+14     	; 0xa0a <__divsf3_pse+0x70>
 9fc:	9e 3f       	cpi	r25, 0xFE	; 254
 9fe:	51 05       	cpc	r21, r1
 a00:	78 f0       	brcs	.+30     	; 0xa20 <__divsf3_pse+0x86>
 a02:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__fp_inf>
 a06:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__fp_szero>
 a0a:	5f 3f       	cpi	r21, 0xFF	; 255
 a0c:	e4 f3       	brlt	.-8      	; 0xa06 <__divsf3_pse+0x6c>
 a0e:	98 3e       	cpi	r25, 0xE8	; 232
 a10:	d4 f3       	brlt	.-12     	; 0xa06 <__divsf3_pse+0x6c>
 a12:	86 95       	lsr	r24
 a14:	77 95       	ror	r23
 a16:	67 95       	ror	r22
 a18:	b7 95       	ror	r27
 a1a:	f7 95       	ror	r31
 a1c:	9f 5f       	subi	r25, 0xFF	; 255
 a1e:	c9 f7       	brne	.-14     	; 0xa12 <__divsf3_pse+0x78>
 a20:	88 0f       	add	r24, r24
 a22:	91 1d       	adc	r25, r1
 a24:	96 95       	lsr	r25
 a26:	87 95       	ror	r24
 a28:	97 f9       	bld	r25, 7
 a2a:	08 95       	ret
 a2c:	e1 e0       	ldi	r30, 0x01	; 1
 a2e:	66 0f       	add	r22, r22
 a30:	77 1f       	adc	r23, r23
 a32:	88 1f       	adc	r24, r24
 a34:	bb 1f       	adc	r27, r27
 a36:	62 17       	cp	r22, r18
 a38:	73 07       	cpc	r23, r19
 a3a:	84 07       	cpc	r24, r20
 a3c:	ba 07       	cpc	r27, r26
 a3e:	20 f0       	brcs	.+8      	; 0xa48 <__divsf3_pse+0xae>
 a40:	62 1b       	sub	r22, r18
 a42:	73 0b       	sbc	r23, r19
 a44:	84 0b       	sbc	r24, r20
 a46:	ba 0b       	sbc	r27, r26
 a48:	ee 1f       	adc	r30, r30
 a4a:	88 f7       	brcc	.-30     	; 0xa2e <__divsf3_pse+0x94>
 a4c:	e0 95       	com	r30
 a4e:	08 95       	ret

00000a50 <__fixunssfsi>:
 a50:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__fp_splitA>
 a54:	88 f0       	brcs	.+34     	; 0xa78 <__fixunssfsi+0x28>
 a56:	9f 57       	subi	r25, 0x7F	; 127
 a58:	98 f0       	brcs	.+38     	; 0xa80 <__fixunssfsi+0x30>
 a5a:	b9 2f       	mov	r27, r25
 a5c:	99 27       	eor	r25, r25
 a5e:	b7 51       	subi	r27, 0x17	; 23
 a60:	b0 f0       	brcs	.+44     	; 0xa8e <__fixunssfsi+0x3e>
 a62:	e1 f0       	breq	.+56     	; 0xa9c <__fixunssfsi+0x4c>
 a64:	66 0f       	add	r22, r22
 a66:	77 1f       	adc	r23, r23
 a68:	88 1f       	adc	r24, r24
 a6a:	99 1f       	adc	r25, r25
 a6c:	1a f0       	brmi	.+6      	; 0xa74 <__fixunssfsi+0x24>
 a6e:	ba 95       	dec	r27
 a70:	c9 f7       	brne	.-14     	; 0xa64 <__fixunssfsi+0x14>
 a72:	14 c0       	rjmp	.+40     	; 0xa9c <__fixunssfsi+0x4c>
 a74:	b1 30       	cpi	r27, 0x01	; 1
 a76:	91 f0       	breq	.+36     	; 0xa9c <__fixunssfsi+0x4c>
 a78:	0e 94 02 06 	call	0xc04	; 0xc04 <__fp_zero>
 a7c:	b1 e0       	ldi	r27, 0x01	; 1
 a7e:	08 95       	ret
 a80:	0c 94 02 06 	jmp	0xc04	; 0xc04 <__fp_zero>
 a84:	67 2f       	mov	r22, r23
 a86:	78 2f       	mov	r23, r24
 a88:	88 27       	eor	r24, r24
 a8a:	b8 5f       	subi	r27, 0xF8	; 248
 a8c:	39 f0       	breq	.+14     	; 0xa9c <__fixunssfsi+0x4c>
 a8e:	b9 3f       	cpi	r27, 0xF9	; 249
 a90:	cc f3       	brlt	.-14     	; 0xa84 <__fixunssfsi+0x34>
 a92:	86 95       	lsr	r24
 a94:	77 95       	ror	r23
 a96:	67 95       	ror	r22
 a98:	b3 95       	inc	r27
 a9a:	d9 f7       	brne	.-10     	; 0xa92 <__fixunssfsi+0x42>
 a9c:	3e f4       	brtc	.+14     	; 0xaac <__fixunssfsi+0x5c>
 a9e:	90 95       	com	r25
 aa0:	80 95       	com	r24
 aa2:	70 95       	com	r23
 aa4:	61 95       	neg	r22
 aa6:	7f 4f       	sbci	r23, 0xFF	; 255
 aa8:	8f 4f       	sbci	r24, 0xFF	; 255
 aaa:	9f 4f       	sbci	r25, 0xFF	; 255
 aac:	08 95       	ret

00000aae <__floatunsisf>:
 aae:	e8 94       	clt
 ab0:	09 c0       	rjmp	.+18     	; 0xac4 <__floatsisf+0x12>

00000ab2 <__floatsisf>:
 ab2:	97 fb       	bst	r25, 7
 ab4:	3e f4       	brtc	.+14     	; 0xac4 <__floatsisf+0x12>
 ab6:	90 95       	com	r25
 ab8:	80 95       	com	r24
 aba:	70 95       	com	r23
 abc:	61 95       	neg	r22
 abe:	7f 4f       	sbci	r23, 0xFF	; 255
 ac0:	8f 4f       	sbci	r24, 0xFF	; 255
 ac2:	9f 4f       	sbci	r25, 0xFF	; 255
 ac4:	99 23       	and	r25, r25
 ac6:	a9 f0       	breq	.+42     	; 0xaf2 <__floatsisf+0x40>
 ac8:	f9 2f       	mov	r31, r25
 aca:	96 e9       	ldi	r25, 0x96	; 150
 acc:	bb 27       	eor	r27, r27
 ace:	93 95       	inc	r25
 ad0:	f6 95       	lsr	r31
 ad2:	87 95       	ror	r24
 ad4:	77 95       	ror	r23
 ad6:	67 95       	ror	r22
 ad8:	b7 95       	ror	r27
 ada:	f1 11       	cpse	r31, r1
 adc:	f8 cf       	rjmp	.-16     	; 0xace <__floatsisf+0x1c>
 ade:	fa f4       	brpl	.+62     	; 0xb1e <__floatsisf+0x6c>
 ae0:	bb 0f       	add	r27, r27
 ae2:	11 f4       	brne	.+4      	; 0xae8 <__floatsisf+0x36>
 ae4:	60 ff       	sbrs	r22, 0
 ae6:	1b c0       	rjmp	.+54     	; 0xb1e <__floatsisf+0x6c>
 ae8:	6f 5f       	subi	r22, 0xFF	; 255
 aea:	7f 4f       	sbci	r23, 0xFF	; 255
 aec:	8f 4f       	sbci	r24, 0xFF	; 255
 aee:	9f 4f       	sbci	r25, 0xFF	; 255
 af0:	16 c0       	rjmp	.+44     	; 0xb1e <__floatsisf+0x6c>
 af2:	88 23       	and	r24, r24
 af4:	11 f0       	breq	.+4      	; 0xafa <__floatsisf+0x48>
 af6:	96 e9       	ldi	r25, 0x96	; 150
 af8:	11 c0       	rjmp	.+34     	; 0xb1c <__floatsisf+0x6a>
 afa:	77 23       	and	r23, r23
 afc:	21 f0       	breq	.+8      	; 0xb06 <__floatsisf+0x54>
 afe:	9e e8       	ldi	r25, 0x8E	; 142
 b00:	87 2f       	mov	r24, r23
 b02:	76 2f       	mov	r23, r22
 b04:	05 c0       	rjmp	.+10     	; 0xb10 <__floatsisf+0x5e>
 b06:	66 23       	and	r22, r22
 b08:	71 f0       	breq	.+28     	; 0xb26 <__floatsisf+0x74>
 b0a:	96 e8       	ldi	r25, 0x86	; 134
 b0c:	86 2f       	mov	r24, r22
 b0e:	70 e0       	ldi	r23, 0x00	; 0
 b10:	60 e0       	ldi	r22, 0x00	; 0
 b12:	2a f0       	brmi	.+10     	; 0xb1e <__floatsisf+0x6c>
 b14:	9a 95       	dec	r25
 b16:	66 0f       	add	r22, r22
 b18:	77 1f       	adc	r23, r23
 b1a:	88 1f       	adc	r24, r24
 b1c:	da f7       	brpl	.-10     	; 0xb14 <__floatsisf+0x62>
 b1e:	88 0f       	add	r24, r24
 b20:	96 95       	lsr	r25
 b22:	87 95       	ror	r24
 b24:	97 f9       	bld	r25, 7
 b26:	08 95       	ret

00000b28 <__fp_cmp>:
 b28:	99 0f       	add	r25, r25
 b2a:	00 08       	sbc	r0, r0
 b2c:	55 0f       	add	r21, r21
 b2e:	aa 0b       	sbc	r26, r26
 b30:	e0 e8       	ldi	r30, 0x80	; 128
 b32:	fe ef       	ldi	r31, 0xFE	; 254
 b34:	16 16       	cp	r1, r22
 b36:	17 06       	cpc	r1, r23
 b38:	e8 07       	cpc	r30, r24
 b3a:	f9 07       	cpc	r31, r25
 b3c:	c0 f0       	brcs	.+48     	; 0xb6e <__fp_cmp+0x46>
 b3e:	12 16       	cp	r1, r18
 b40:	13 06       	cpc	r1, r19
 b42:	e4 07       	cpc	r30, r20
 b44:	f5 07       	cpc	r31, r21
 b46:	98 f0       	brcs	.+38     	; 0xb6e <__fp_cmp+0x46>
 b48:	62 1b       	sub	r22, r18
 b4a:	73 0b       	sbc	r23, r19
 b4c:	84 0b       	sbc	r24, r20
 b4e:	95 0b       	sbc	r25, r21
 b50:	39 f4       	brne	.+14     	; 0xb60 <__fp_cmp+0x38>
 b52:	0a 26       	eor	r0, r26
 b54:	61 f0       	breq	.+24     	; 0xb6e <__fp_cmp+0x46>
 b56:	23 2b       	or	r18, r19
 b58:	24 2b       	or	r18, r20
 b5a:	25 2b       	or	r18, r21
 b5c:	21 f4       	brne	.+8      	; 0xb66 <__fp_cmp+0x3e>
 b5e:	08 95       	ret
 b60:	0a 26       	eor	r0, r26
 b62:	09 f4       	brne	.+2      	; 0xb66 <__fp_cmp+0x3e>
 b64:	a1 40       	sbci	r26, 0x01	; 1
 b66:	a6 95       	lsr	r26
 b68:	8f ef       	ldi	r24, 0xFF	; 255
 b6a:	81 1d       	adc	r24, r1
 b6c:	81 1d       	adc	r24, r1
 b6e:	08 95       	ret

00000b70 <__fp_inf>:
 b70:	97 f9       	bld	r25, 7
 b72:	9f 67       	ori	r25, 0x7F	; 127
 b74:	80 e8       	ldi	r24, 0x80	; 128
 b76:	70 e0       	ldi	r23, 0x00	; 0
 b78:	60 e0       	ldi	r22, 0x00	; 0
 b7a:	08 95       	ret

00000b7c <__fp_nan>:
 b7c:	9f ef       	ldi	r25, 0xFF	; 255
 b7e:	80 ec       	ldi	r24, 0xC0	; 192
 b80:	08 95       	ret

00000b82 <__fp_pscA>:
 b82:	00 24       	eor	r0, r0
 b84:	0a 94       	dec	r0
 b86:	16 16       	cp	r1, r22
 b88:	17 06       	cpc	r1, r23
 b8a:	18 06       	cpc	r1, r24
 b8c:	09 06       	cpc	r0, r25
 b8e:	08 95       	ret

00000b90 <__fp_pscB>:
 b90:	00 24       	eor	r0, r0
 b92:	0a 94       	dec	r0
 b94:	12 16       	cp	r1, r18
 b96:	13 06       	cpc	r1, r19
 b98:	14 06       	cpc	r1, r20
 b9a:	05 06       	cpc	r0, r21
 b9c:	08 95       	ret

00000b9e <__fp_round>:
 b9e:	09 2e       	mov	r0, r25
 ba0:	03 94       	inc	r0
 ba2:	00 0c       	add	r0, r0
 ba4:	11 f4       	brne	.+4      	; 0xbaa <__fp_round+0xc>
 ba6:	88 23       	and	r24, r24
 ba8:	52 f0       	brmi	.+20     	; 0xbbe <__fp_round+0x20>
 baa:	bb 0f       	add	r27, r27
 bac:	40 f4       	brcc	.+16     	; 0xbbe <__fp_round+0x20>
 bae:	bf 2b       	or	r27, r31
 bb0:	11 f4       	brne	.+4      	; 0xbb6 <__fp_round+0x18>
 bb2:	60 ff       	sbrs	r22, 0
 bb4:	04 c0       	rjmp	.+8      	; 0xbbe <__fp_round+0x20>
 bb6:	6f 5f       	subi	r22, 0xFF	; 255
 bb8:	7f 4f       	sbci	r23, 0xFF	; 255
 bba:	8f 4f       	sbci	r24, 0xFF	; 255
 bbc:	9f 4f       	sbci	r25, 0xFF	; 255
 bbe:	08 95       	ret

00000bc0 <__fp_split3>:
 bc0:	57 fd       	sbrc	r21, 7
 bc2:	90 58       	subi	r25, 0x80	; 128
 bc4:	44 0f       	add	r20, r20
 bc6:	55 1f       	adc	r21, r21
 bc8:	59 f0       	breq	.+22     	; 0xbe0 <__fp_splitA+0x10>
 bca:	5f 3f       	cpi	r21, 0xFF	; 255
 bcc:	71 f0       	breq	.+28     	; 0xbea <__fp_splitA+0x1a>
 bce:	47 95       	ror	r20

00000bd0 <__fp_splitA>:
 bd0:	88 0f       	add	r24, r24
 bd2:	97 fb       	bst	r25, 7
 bd4:	99 1f       	adc	r25, r25
 bd6:	61 f0       	breq	.+24     	; 0xbf0 <__fp_splitA+0x20>
 bd8:	9f 3f       	cpi	r25, 0xFF	; 255
 bda:	79 f0       	breq	.+30     	; 0xbfa <__fp_splitA+0x2a>
 bdc:	87 95       	ror	r24
 bde:	08 95       	ret
 be0:	12 16       	cp	r1, r18
 be2:	13 06       	cpc	r1, r19
 be4:	14 06       	cpc	r1, r20
 be6:	55 1f       	adc	r21, r21
 be8:	f2 cf       	rjmp	.-28     	; 0xbce <__fp_split3+0xe>
 bea:	46 95       	lsr	r20
 bec:	f1 df       	rcall	.-30     	; 0xbd0 <__fp_splitA>
 bee:	08 c0       	rjmp	.+16     	; 0xc00 <__fp_splitA+0x30>
 bf0:	16 16       	cp	r1, r22
 bf2:	17 06       	cpc	r1, r23
 bf4:	18 06       	cpc	r1, r24
 bf6:	99 1f       	adc	r25, r25
 bf8:	f1 cf       	rjmp	.-30     	; 0xbdc <__fp_splitA+0xc>
 bfa:	86 95       	lsr	r24
 bfc:	71 05       	cpc	r23, r1
 bfe:	61 05       	cpc	r22, r1
 c00:	08 94       	sec
 c02:	08 95       	ret

00000c04 <__fp_zero>:
 c04:	e8 94       	clt

00000c06 <__fp_szero>:
 c06:	bb 27       	eor	r27, r27
 c08:	66 27       	eor	r22, r22
 c0a:	77 27       	eor	r23, r23
 c0c:	cb 01       	movw	r24, r22
 c0e:	97 f9       	bld	r25, 7
 c10:	08 95       	ret

00000c12 <__gesf2>:
 c12:	0e 94 94 05 	call	0xb28	; 0xb28 <__fp_cmp>
 c16:	08 f4       	brcc	.+2      	; 0xc1a <__gesf2+0x8>
 c18:	8f ef       	ldi	r24, 0xFF	; 255
 c1a:	08 95       	ret

00000c1c <__mulsf3>:
 c1c:	0e 94 21 06 	call	0xc42	; 0xc42 <__mulsf3x>
 c20:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__fp_round>
 c24:	0e 94 c1 05 	call	0xb82	; 0xb82 <__fp_pscA>
 c28:	38 f0       	brcs	.+14     	; 0xc38 <__mulsf3+0x1c>
 c2a:	0e 94 c8 05 	call	0xb90	; 0xb90 <__fp_pscB>
 c2e:	20 f0       	brcs	.+8      	; 0xc38 <__mulsf3+0x1c>
 c30:	95 23       	and	r25, r21
 c32:	11 f0       	breq	.+4      	; 0xc38 <__mulsf3+0x1c>
 c34:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__fp_inf>
 c38:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__fp_nan>
 c3c:	11 24       	eor	r1, r1
 c3e:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__fp_szero>

00000c42 <__mulsf3x>:
 c42:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__fp_split3>
 c46:	70 f3       	brcs	.-36     	; 0xc24 <__mulsf3+0x8>

00000c48 <__mulsf3_pse>:
 c48:	95 9f       	mul	r25, r21
 c4a:	c1 f3       	breq	.-16     	; 0xc3c <__mulsf3+0x20>
 c4c:	95 0f       	add	r25, r21
 c4e:	50 e0       	ldi	r21, 0x00	; 0
 c50:	55 1f       	adc	r21, r21
 c52:	62 9f       	mul	r22, r18
 c54:	f0 01       	movw	r30, r0
 c56:	72 9f       	mul	r23, r18
 c58:	bb 27       	eor	r27, r27
 c5a:	f0 0d       	add	r31, r0
 c5c:	b1 1d       	adc	r27, r1
 c5e:	63 9f       	mul	r22, r19
 c60:	aa 27       	eor	r26, r26
 c62:	f0 0d       	add	r31, r0
 c64:	b1 1d       	adc	r27, r1
 c66:	aa 1f       	adc	r26, r26
 c68:	64 9f       	mul	r22, r20
 c6a:	66 27       	eor	r22, r22
 c6c:	b0 0d       	add	r27, r0
 c6e:	a1 1d       	adc	r26, r1
 c70:	66 1f       	adc	r22, r22
 c72:	82 9f       	mul	r24, r18
 c74:	22 27       	eor	r18, r18
 c76:	b0 0d       	add	r27, r0
 c78:	a1 1d       	adc	r26, r1
 c7a:	62 1f       	adc	r22, r18
 c7c:	73 9f       	mul	r23, r19
 c7e:	b0 0d       	add	r27, r0
 c80:	a1 1d       	adc	r26, r1
 c82:	62 1f       	adc	r22, r18
 c84:	83 9f       	mul	r24, r19
 c86:	a0 0d       	add	r26, r0
 c88:	61 1d       	adc	r22, r1
 c8a:	22 1f       	adc	r18, r18
 c8c:	74 9f       	mul	r23, r20
 c8e:	33 27       	eor	r19, r19
 c90:	a0 0d       	add	r26, r0
 c92:	61 1d       	adc	r22, r1
 c94:	23 1f       	adc	r18, r19
 c96:	84 9f       	mul	r24, r20
 c98:	60 0d       	add	r22, r0
 c9a:	21 1d       	adc	r18, r1
 c9c:	82 2f       	mov	r24, r18
 c9e:	76 2f       	mov	r23, r22
 ca0:	6a 2f       	mov	r22, r26
 ca2:	11 24       	eor	r1, r1
 ca4:	9f 57       	subi	r25, 0x7F	; 127
 ca6:	50 40       	sbci	r21, 0x00	; 0
 ca8:	9a f0       	brmi	.+38     	; 0xcd0 <__mulsf3_pse+0x88>
 caa:	f1 f0       	breq	.+60     	; 0xce8 <__mulsf3_pse+0xa0>
 cac:	88 23       	and	r24, r24
 cae:	4a f0       	brmi	.+18     	; 0xcc2 <__mulsf3_pse+0x7a>
 cb0:	ee 0f       	add	r30, r30
 cb2:	ff 1f       	adc	r31, r31
 cb4:	bb 1f       	adc	r27, r27
 cb6:	66 1f       	adc	r22, r22
 cb8:	77 1f       	adc	r23, r23
 cba:	88 1f       	adc	r24, r24
 cbc:	91 50       	subi	r25, 0x01	; 1
 cbe:	50 40       	sbci	r21, 0x00	; 0
 cc0:	a9 f7       	brne	.-22     	; 0xcac <__mulsf3_pse+0x64>
 cc2:	9e 3f       	cpi	r25, 0xFE	; 254
 cc4:	51 05       	cpc	r21, r1
 cc6:	80 f0       	brcs	.+32     	; 0xce8 <__mulsf3_pse+0xa0>
 cc8:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__fp_inf>
 ccc:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__fp_szero>
 cd0:	5f 3f       	cpi	r21, 0xFF	; 255
 cd2:	e4 f3       	brlt	.-8      	; 0xccc <__mulsf3_pse+0x84>
 cd4:	98 3e       	cpi	r25, 0xE8	; 232
 cd6:	d4 f3       	brlt	.-12     	; 0xccc <__mulsf3_pse+0x84>
 cd8:	86 95       	lsr	r24
 cda:	77 95       	ror	r23
 cdc:	67 95       	ror	r22
 cde:	b7 95       	ror	r27
 ce0:	f7 95       	ror	r31
 ce2:	e7 95       	ror	r30
 ce4:	9f 5f       	subi	r25, 0xFF	; 255
 ce6:	c1 f7       	brne	.-16     	; 0xcd8 <__mulsf3_pse+0x90>
 ce8:	fe 2b       	or	r31, r30
 cea:	88 0f       	add	r24, r24
 cec:	91 1d       	adc	r25, r1
 cee:	96 95       	lsr	r25
 cf0:	87 95       	ror	r24
 cf2:	97 f9       	bld	r25, 7
 cf4:	08 95       	ret

00000cf6 <_exit>:
 cf6:	f8 94       	cli

00000cf8 <__stop_program>:
 cf8:	ff cf       	rjmp	.-2      	; 0xcf8 <__stop_program>
