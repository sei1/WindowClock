
WindowClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00803800  0000107e  00001112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000107e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00803814  00803814  00001126  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001126  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021a9  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001acd  00000000  00000000  000033a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b03  00000000  00000000  00004e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00005974  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e32  00000000  00000000  00005b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000822  00000000  00000000  0000697a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000719c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 a1 04 	jmp	0x942	; 0x942 <__vector_4>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__vector_6>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 3b 02 	jmp	0x476	; 0x476 <__vector_10>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	18 e3       	ldi	r17, 0x38	; 56
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	ee e7       	ldi	r30, 0x7E	; 126
      90:	f0 e1       	ldi	r31, 0x10	; 16
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a4 31       	cpi	r26, 0x14	; 20
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	28 e3       	ldi	r18, 0x38	; 56
      a0:	a4 e1       	ldi	r26, 0x14	; 20
      a2:	b8 e3       	ldi	r27, 0x38	; 56
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a6 33       	cpi	r26, 0x36	; 54
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 af 05 	call	0xb5e	; 0xb5e <main>
      b2:	0c 94 3d 08 	jmp	0x107a	; 0x107a <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <get_v>:
// プログラム本文
//---------------------------------


//キャパシタに蓄えられた電源電圧と太陽電池の発電電圧を取得する関数
void get_v (void) {
      ba:	cf 92       	push	r12
      bc:	df 92       	push	r13
      be:	ef 92       	push	r14
      c0:	ff 92       	push	r15
      c2:	cf 93       	push	r28
      c4:	df 93       	push	r29
	
	uint16_t x = 0;
	uint16_t y = 0;

	//PB1をタクトスイッチ入力から一時的に太陽電池電圧の測定ピンに切り替える
	PORTB_PIN1CTRL = 0b00000000; //プルアップ無効 エッジを検出しない
      c6:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>
	VPORTB_DIR    |= 0b00000010; //出力モードに変更
      ca:	84 b1       	in	r24, 0x04	; 4
      cc:	82 60       	ori	r24, 0x02	; 2
      ce:	84 b9       	out	0x04, r24	; 4
	VPORTB_OUT    &= 0b11111101; //出力Low
      d0:	85 b1       	in	r24, 0x05	; 5
      d2:	8d 7f       	andi	r24, 0xFD	; 253
      d4:	85 b9       	out	0x05, r24	; 5

	//この状態でPB1の電圧を抜いている間に基準電圧1.1V / 電源電圧を測定しておく

	// 基準電圧1.1V / 電源電圧 を10bit(1024段階)で測定
	ADC0_MUXPOS = 0b00011101; //基準電圧
      d6:	8d e1       	ldi	r24, 0x1D	; 29
      d8:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7f8606>

	ADC0_COMMAND = 1;//AD変換開始
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
	while(ADC0_COMMAND);
      e2:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
      e6:	81 11       	cpse	r24, r1
      e8:	fc cf       	rjmp	.-8      	; 0xe2 <get_v+0x28>
	ADC0_COMMAND = 0;//AD変換終了
      ea:	c8 e0       	ldi	r28, 0x08	; 8
      ec:	d6 e0       	ldi	r29, 0x06	; 6
      ee:	18 82       	st	Y, r1

	y = ADC0_RES;
      f0:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
      f4:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
	
	//電源電圧を算出
	supply_v = 1023 * 1.1 / y;
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 f6 06 	call	0xdec	; 0xdec <__floatunsisf>
     100:	6b 01       	movw	r12, r22
     102:	7c 01       	movw	r14, r24
     104:	9b 01       	movw	r18, r22
     106:	ac 01       	movw	r20, r24
     108:	6a e9       	ldi	r22, 0x9A	; 154
     10a:	79 ea       	ldi	r23, 0xA9	; 169
     10c:	8c e8       	ldi	r24, 0x8C	; 140
     10e:	94 e4       	ldi	r25, 0x44	; 68
     110:	0e 94 55 06 	call	0xcaa	; 0xcaa <__divsf3>
     114:	60 93 29 38 	sts	0x3829, r22	; 0x803829 <supply_v>
     118:	70 93 2a 38 	sts	0x382A, r23	; 0x80382a <supply_v+0x1>
     11c:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <supply_v+0x2>
     120:	90 93 2c 38 	sts	0x382C, r25	; 0x80382c <supply_v+0x3>


	//PB1を入力モードに戻す
	VPORTB_DIR    &= 0b11111101; 
     124:	84 b1       	in	r24, 0x04	; 4
     126:	8d 7f       	andi	r24, 0xFD	; 253
     128:	84 b9       	out	0x04, r24	; 4

	//ADC入力ピンの選択
	// PB1ピンの電圧 / 電源電圧 を10bit(1024段階)で測定
	ADC0_MUXPOS = 0b00001010; //AIN10 = PB1
     12a:	8a e0       	ldi	r24, 0x0A	; 10
     12c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7f8606>

	ADC0_COMMAND = 1;//AD変換開始
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	88 83       	st	Y, r24
	while(ADC0_COMMAND);
     134:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
     138:	81 11       	cpse	r24, r1
     13a:	fc cf       	rjmp	.-8      	; 0x134 <__EEPROM_REGION_LENGTH__+0x34>
	ADC0_COMMAND = 0;//AD変換終了
     13c:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>

	x = ADC0_RES;
     140:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
     144:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>

	//PB1のプルアップを有効に戻す
	PORTB_PIN1CTRL = 0b00001001; //プルアップ有効 両方のエッジを検出する
     148:	89 e0       	ldi	r24, 0x09	; 9
     14a:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>

	//太陽電池電圧を算出
	solar_v = x * 1.1 / y;
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	0e 94 f6 06 	call	0xdec	; 0xdec <__floatunsisf>
     156:	2d ec       	ldi	r18, 0xCD	; 205
     158:	3c ec       	ldi	r19, 0xCC	; 204
     15a:	4c e8       	ldi	r20, 0x8C	; 140
     15c:	5f e3       	ldi	r21, 0x3F	; 63
     15e:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__mulsf3>
     162:	a7 01       	movw	r20, r14
     164:	96 01       	movw	r18, r12
     166:	0e 94 55 06 	call	0xcaa	; 0xcaa <__divsf3>
     16a:	6b 01       	movw	r12, r22
     16c:	7c 01       	movw	r14, r24
     16e:	60 93 25 38 	sts	0x3825, r22	; 0x803825 <solar_v>
     172:	70 93 26 38 	sts	0x3826, r23	; 0x803826 <solar_v+0x1>
     176:	80 93 27 38 	sts	0x3827, r24	; 0x803827 <solar_v+0x2>
     17a:	90 93 28 38 	sts	0x3828, r25	; 0x803828 <solar_v+0x3>



	//7セグの明るさ設定
	//太陽電池の電圧によって周囲の明るさを判定し7セグの明るさを変化させる
	if(solar_v > 1.8 || discharge) {
     17e:	26 e6       	ldi	r18, 0x66	; 102
     180:	36 e6       	ldi	r19, 0x66	; 102
     182:	46 ee       	ldi	r20, 0xE6	; 230
     184:	5f e3       	ldi	r21, 0x3F	; 63
     186:	0e 94 a8 07 	call	0xf50	; 0xf50 <__gesf2>
     18a:	18 16       	cp	r1, r24
     18c:	24 f0       	brlt	.+8      	; 0x196 <__EEPROM_REGION_LENGTH__+0x96>
     18e:	80 91 23 38 	lds	r24, 0x3823	; 0x803823 <discharge>
     192:	88 23       	and	r24, r24
     194:	21 f0       	breq	.+8      	; 0x19e <__EEPROM_REGION_LENGTH__+0x9e>
		brightness = 6;
     196:	86 e0       	ldi	r24, 0x06	; 6
     198:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <brightness>
     19c:	3b c0       	rjmp	.+118    	; 0x214 <__EEPROM_REGION_LENGTH__+0x114>
	}else if(solar_v > 1.2) {
     19e:	2a e9       	ldi	r18, 0x9A	; 154
     1a0:	39 e9       	ldi	r19, 0x99	; 153
     1a2:	49 e9       	ldi	r20, 0x99	; 153
     1a4:	5f e3       	ldi	r21, 0x3F	; 63
     1a6:	c7 01       	movw	r24, r14
     1a8:	b6 01       	movw	r22, r12
     1aa:	0e 94 a8 07 	call	0xf50	; 0xf50 <__gesf2>
     1ae:	18 16       	cp	r1, r24
     1b0:	24 f4       	brge	.+8      	; 0x1ba <__EEPROM_REGION_LENGTH__+0xba>
		brightness = 5;
     1b2:	85 e0       	ldi	r24, 0x05	; 5
     1b4:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <brightness>
     1b8:	2d c0       	rjmp	.+90     	; 0x214 <__EEPROM_REGION_LENGTH__+0x114>
	}else if(solar_v > 0.8) {
     1ba:	2d ec       	ldi	r18, 0xCD	; 205
     1bc:	3c ec       	ldi	r19, 0xCC	; 204
     1be:	4c e4       	ldi	r20, 0x4C	; 76
     1c0:	5f e3       	ldi	r21, 0x3F	; 63
     1c2:	c7 01       	movw	r24, r14
     1c4:	b6 01       	movw	r22, r12
     1c6:	0e 94 a8 07 	call	0xf50	; 0xf50 <__gesf2>
     1ca:	18 16       	cp	r1, r24
     1cc:	24 f4       	brge	.+8      	; 0x1d6 <__EEPROM_REGION_LENGTH__+0xd6>
		brightness = 4;
     1ce:	84 e0       	ldi	r24, 0x04	; 4
     1d0:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <brightness>
     1d4:	1f c0       	rjmp	.+62     	; 0x214 <__EEPROM_REGION_LENGTH__+0x114>
	}else if(solar_v > 0.5) {
     1d6:	20 e0       	ldi	r18, 0x00	; 0
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	40 e0       	ldi	r20, 0x00	; 0
     1dc:	5f e3       	ldi	r21, 0x3F	; 63
     1de:	c7 01       	movw	r24, r14
     1e0:	b6 01       	movw	r22, r12
     1e2:	0e 94 a8 07 	call	0xf50	; 0xf50 <__gesf2>
     1e6:	18 16       	cp	r1, r24
     1e8:	24 f4       	brge	.+8      	; 0x1f2 <__EEPROM_REGION_LENGTH__+0xf2>
		brightness = 3;
     1ea:	83 e0       	ldi	r24, 0x03	; 3
     1ec:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <brightness>
     1f0:	11 c0       	rjmp	.+34     	; 0x214 <__EEPROM_REGION_LENGTH__+0x114>
	}else if(solar_v > 0.3) {
     1f2:	2a e9       	ldi	r18, 0x9A	; 154
     1f4:	39 e9       	ldi	r19, 0x99	; 153
     1f6:	49 e9       	ldi	r20, 0x99	; 153
     1f8:	5e e3       	ldi	r21, 0x3E	; 62
     1fa:	c7 01       	movw	r24, r14
     1fc:	b6 01       	movw	r22, r12
     1fe:	0e 94 a8 07 	call	0xf50	; 0xf50 <__gesf2>
     202:	18 16       	cp	r1, r24
     204:	24 f4       	brge	.+8      	; 0x20e <__EEPROM_REGION_LENGTH__+0x10e>
		brightness = 2;
     206:	82 e0       	ldi	r24, 0x02	; 2
     208:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <brightness>
     20c:	03 c0       	rjmp	.+6      	; 0x214 <__EEPROM_REGION_LENGTH__+0x114>
	}else{
		brightness = 1;
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <brightness>
	}

	//電圧を7セグに表示する準備 ここで行っておくことで計算が1回で済みTCA割り込みの動作が軽快になる
	uint8_t spv = supply_v * 10;
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	40 e2       	ldi	r20, 0x20	; 32
     21a:	51 e4       	ldi	r21, 0x41	; 65
     21c:	60 91 29 38 	lds	r22, 0x3829	; 0x803829 <supply_v>
     220:	70 91 2a 38 	lds	r23, 0x382A	; 0x80382a <supply_v+0x1>
     224:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <supply_v+0x2>
     228:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <supply_v+0x3>
     22c:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__mulsf3>
     230:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__fixunssfsi>
     234:	c6 2f       	mov	r28, r22
	uint8_t slv =  solar_v * 10;
     236:	20 e0       	ldi	r18, 0x00	; 0
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	40 e2       	ldi	r20, 0x20	; 32
     23c:	51 e4       	ldi	r21, 0x41	; 65
     23e:	c7 01       	movw	r24, r14
     240:	b6 01       	movw	r22, r12
     242:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__mulsf3>
     246:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__fixunssfsi>
	v_dig1  = seg[spv % 10];
     24a:	8d ec       	ldi	r24, 0xCD	; 205
     24c:	c8 9f       	mul	r28, r24
     24e:	e1 2d       	mov	r30, r1
     250:	11 24       	eor	r1, r1
     252:	e6 95       	lsr	r30
     254:	e6 95       	lsr	r30
     256:	e6 95       	lsr	r30
     258:	2e 2f       	mov	r18, r30
     25a:	22 0f       	add	r18, r18
     25c:	92 2f       	mov	r25, r18
     25e:	99 0f       	add	r25, r25
     260:	99 0f       	add	r25, r25
     262:	92 0f       	add	r25, r18
     264:	c9 1b       	sub	r28, r25
     266:	ac 2f       	mov	r26, r28
     268:	b0 e0       	ldi	r27, 0x00	; 0
     26a:	a7 5f       	subi	r26, 0xF7	; 247
     26c:	b7 4c       	sbci	r27, 0xC7	; 199
     26e:	9c 91       	ld	r25, X
     270:	90 93 21 38 	sts	0x3821, r25	; 0x803821 <v_dig1>
	v_dig2  = seg[(spv / 10) % 10];
     274:	e8 9f       	mul	r30, r24
     276:	91 2d       	mov	r25, r1
     278:	11 24       	eor	r1, r1
     27a:	96 95       	lsr	r25
     27c:	96 95       	lsr	r25
     27e:	96 95       	lsr	r25
     280:	99 0f       	add	r25, r25
     282:	29 2f       	mov	r18, r25
     284:	22 0f       	add	r18, r18
     286:	22 0f       	add	r18, r18
     288:	92 0f       	add	r25, r18
     28a:	e9 1b       	sub	r30, r25
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	e7 5f       	subi	r30, 0xF7	; 247
     290:	f7 4c       	sbci	r31, 0xC7	; 199
     292:	90 81       	ld	r25, Z
     294:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <v_dig2>
	v_dig4  = seg[slv % 10];
     298:	68 9f       	mul	r22, r24
     29a:	e1 2d       	mov	r30, r1
     29c:	11 24       	eor	r1, r1
     29e:	e6 95       	lsr	r30
     2a0:	e6 95       	lsr	r30
     2a2:	e6 95       	lsr	r30
     2a4:	2e 2f       	mov	r18, r30
     2a6:	22 0f       	add	r18, r18
     2a8:	92 2f       	mov	r25, r18
     2aa:	99 0f       	add	r25, r25
     2ac:	99 0f       	add	r25, r25
     2ae:	92 0f       	add	r25, r18
     2b0:	69 1b       	sub	r22, r25
     2b2:	a6 2f       	mov	r26, r22
     2b4:	b0 e0       	ldi	r27, 0x00	; 0
     2b6:	a7 5f       	subi	r26, 0xF7	; 247
     2b8:	b7 4c       	sbci	r27, 0xC7	; 199
     2ba:	9c 91       	ld	r25, X
     2bc:	90 93 1f 38 	sts	0x381F, r25	; 0x80381f <v_dig4>
	v_dig5  = seg[(slv / 10) % 10];
     2c0:	e8 9f       	mul	r30, r24
     2c2:	81 2d       	mov	r24, r1
     2c4:	11 24       	eor	r1, r1
     2c6:	86 95       	lsr	r24
     2c8:	86 95       	lsr	r24
     2ca:	86 95       	lsr	r24
     2cc:	88 0f       	add	r24, r24
     2ce:	98 2f       	mov	r25, r24
     2d0:	99 0f       	add	r25, r25
     2d2:	99 0f       	add	r25, r25
     2d4:	89 0f       	add	r24, r25
     2d6:	e8 1b       	sub	r30, r24
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	e7 5f       	subi	r30, 0xF7	; 247
     2dc:	f7 4c       	sbci	r31, 0xC7	; 199
     2de:	80 81       	ld	r24, Z
     2e0:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <v_dig5>
}
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	ff 90       	pop	r15
     2ea:	ef 90       	pop	r14
     2ec:	df 90       	pop	r13
     2ee:	cf 90       	pop	r12
     2f0:	08 95       	ret

000002f2 <sens_delay_ms>:

//ボタン操作を受け付けながら待機する関数
void sens_delay_ms (uint16_t num) {
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	8c 01       	movw	r16, r24

	for (unsigned int i = 0; i < num; i++){
     2fc:	c0 e0       	ldi	r28, 0x00	; 0
     2fe:	d0 e0       	ldi	r29, 0x00	; 0
     300:	79 c0       	rjmp	.+242    	; 0x3f4 <sens_delay_ms+0x102>
		if(!(VPORTB_IN & PIN1_bm)) {
     302:	31 99       	sbic	0x06, 1	; 6
     304:	70 c0       	rjmp	.+224    	; 0x3e6 <sens_delay_ms+0xf4>

			//ここにタクトスイッチが押された時の動作を記述
			wakeup = 5000;
     306:	88 e8       	ldi	r24, 0x88	; 136
     308:	93 e1       	ldi	r25, 0x13	; 19
     30a:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <wakeup>
     30e:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <wakeup+0x1>
		
			switch (mode) {
     312:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <mode>
     316:	82 30       	cpi	r24, 0x02	; 2
     318:	01 f1       	breq	.+64     	; 0x35a <sens_delay_ms+0x68>
     31a:	83 30       	cpi	r24, 0x03	; 3
     31c:	d9 f1       	breq	.+118    	; 0x394 <sens_delay_ms+0xa2>
     31e:	81 30       	cpi	r24, 0x01	; 1
     320:	09 f0       	breq	.+2      	; 0x324 <sens_delay_ms+0x32>
     322:	61 c0       	rjmp	.+194    	; 0x3e6 <sens_delay_ms+0xf4>
				case MODE_CLOCK:
					while(!(VPORTB_IN & PIN1_bm));
     324:	31 9b       	sbis	0x06, 1	; 6
     326:	fe cf       	rjmp	.-4      	; 0x324 <sens_delay_ms+0x32>
					if(change_mode_after) {
     328:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <change_mode_after>
     32c:	88 23       	and	r24, r24
     32e:	19 f0       	breq	.+6      	; 0x336 <sens_delay_ms+0x44>
						change_mode_after = 0;
     330:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <change_mode_after>
     334:	58 c0       	rjmp	.+176    	; 0x3e6 <sens_delay_ms+0xf4>
					}else{
						//電圧の取得
						get_v();
     336:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
						display_v = 255;
     33a:	8f ef       	ldi	r24, 0xFF	; 255
     33c:	80 93 24 38 	sts	0x3824, r24	; 0x803824 <display_v>
						wakeup = 1000; //電圧表示だけなら長く表示する必要ないのでwakeup値上書き
     340:	88 ee       	ldi	r24, 0xE8	; 232
     342:	93 e0       	ldi	r25, 0x03	; 3
     344:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <wakeup>
     348:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <wakeup+0x1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     34c:	87 ea       	ldi	r24, 0xA7	; 167
     34e:	91 e6       	ldi	r25, 0x61	; 97
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	f1 f7       	brne	.-4      	; 0x350 <sens_delay_ms+0x5e>
     354:	00 c0       	rjmp	.+0      	; 0x356 <sens_delay_ms+0x64>
     356:	00 00       	nop
     358:	46 c0       	rjmp	.+140    	; 0x3e6 <sens_delay_ms+0xf4>
						_delay_ms(100);
					}
				break;

				case MODE_HOUR_SET:
					while(!(VPORTB_IN & PIN1_bm));
     35a:	31 9b       	sbis	0x06, 1	; 6
     35c:	fe cf       	rjmp	.-4      	; 0x35a <sens_delay_ms+0x68>
					if(change_mode_after) {
     35e:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <change_mode_after>
     362:	88 23       	and	r24, r24
     364:	19 f0       	breq	.+6      	; 0x36c <sens_delay_ms+0x7a>
						change_mode_after = 0;
     366:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <change_mode_after>
     36a:	3d c0       	rjmp	.+122    	; 0x3e6 <sens_delay_ms+0xf4>
					}else{
						if(++memory_hour >= 24) memory_hour = 0;
     36c:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <memory_hour>
     370:	8f 5f       	subi	r24, 0xFF	; 255
     372:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <memory_hour>
     376:	88 31       	cpi	r24, 0x18	; 24
     378:	10 f0       	brcs	.+4      	; 0x37e <sens_delay_ms+0x8c>
     37a:	10 92 34 38 	sts	0x3834, r1	; 0x803834 <memory_hour>
						calc_hour = memory_hour;
     37e:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <memory_hour>
     382:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <calc_hour>
     386:	87 ea       	ldi	r24, 0xA7	; 167
     388:	91 e6       	ldi	r25, 0x61	; 97
     38a:	01 97       	sbiw	r24, 0x01	; 1
     38c:	f1 f7       	brne	.-4      	; 0x38a <sens_delay_ms+0x98>
     38e:	00 c0       	rjmp	.+0      	; 0x390 <sens_delay_ms+0x9e>
     390:	00 00       	nop
     392:	29 c0       	rjmp	.+82     	; 0x3e6 <sens_delay_ms+0xf4>
						_delay_ms(100);
					}
				break;

				case MODE_MIN_SET:
					while(!(VPORTB_IN & PIN1_bm));
     394:	31 9b       	sbis	0x06, 1	; 6
     396:	fe cf       	rjmp	.-4      	; 0x394 <sens_delay_ms+0xa2>
					if(change_mode_after) {
     398:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <change_mode_after>
     39c:	88 23       	and	r24, r24
     39e:	19 f0       	breq	.+6      	; 0x3a6 <sens_delay_ms+0xb4>
						change_mode_after = 0;
     3a0:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <change_mode_after>
     3a4:	20 c0       	rjmp	.+64     	; 0x3e6 <sens_delay_ms+0xf4>
					}else{
						if(++memory_min >= 60) {
     3a6:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <memory_min>
     3aa:	8f 5f       	subi	r24, 0xFF	; 255
     3ac:	80 93 35 38 	sts	0x3835, r24	; 0x803835 <memory_min>
     3b0:	8c 33       	cpi	r24, 0x3C	; 60
     3b2:	58 f0       	brcs	.+22     	; 0x3ca <sens_delay_ms+0xd8>
							memory_min = 0;
     3b4:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <memory_min>
							if(++memory_hour >= 24) memory_hour = 0;
     3b8:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <memory_hour>
     3bc:	8f 5f       	subi	r24, 0xFF	; 255
     3be:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <memory_hour>
     3c2:	88 31       	cpi	r24, 0x18	; 24
     3c4:	10 f0       	brcs	.+4      	; 0x3ca <sens_delay_ms+0xd8>
     3c6:	10 92 34 38 	sts	0x3834, r1	; 0x803834 <memory_hour>
						}
						calc_hour = memory_hour;
     3ca:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <memory_hour>
     3ce:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <calc_hour>
						calc_min = memory_min;
     3d2:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <memory_min>
     3d6:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <calc_min>
     3da:	87 ea       	ldi	r24, 0xA7	; 167
     3dc:	91 e6       	ldi	r25, 0x61	; 97
     3de:	01 97       	sbiw	r24, 0x01	; 1
     3e0:	f1 f7       	brne	.-4      	; 0x3de <sens_delay_ms+0xec>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <sens_delay_ms+0xf2>
     3e4:	00 00       	nop
     3e6:	89 ef       	ldi	r24, 0xF9	; 249
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <sens_delay_ms+0xf8>
     3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <sens_delay_ms+0xfe>
     3f0:	00 00       	nop
}

//ボタン操作を受け付けながら待機する関数
void sens_delay_ms (uint16_t num) {

	for (unsigned int i = 0; i < num; i++){
     3f2:	21 96       	adiw	r28, 0x01	; 1
     3f4:	c0 17       	cp	r28, r16
     3f6:	d1 07       	cpc	r29, r17
     3f8:	08 f4       	brcc	.+2      	; 0x3fc <sens_delay_ms+0x10a>
     3fa:	83 cf       	rjmp	.-250    	; 0x302 <sens_delay_ms+0x10>
				break;
			}
		}
		_delay_ms(1);
	}
}
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	08 95       	ret

00000406 <seg_all_off>:

//7セグをすべて消灯する関数
void seg_all_off (void) {

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	VPORTA_OUT &= 0b00000001;
     406:	81 b1       	in	r24, 0x01	; 1
     408:	81 70       	andi	r24, 0x01	; 1
     40a:	81 b9       	out	0x01, r24	; 1
	VPORTC_OUT &= 0b11110000; //PC1～3はダイナミック点灯用トランジスタ。これらもOFF
     40c:	89 b1       	in	r24, 0x09	; 9
     40e:	80 7f       	andi	r24, 0xF0	; 240
     410:	89 b9       	out	0x09, r24	; 9
	//ダイナミック点灯用トランジスタも全てOFF
	VPORTB_OUT &= 0b11001111;
     412:	85 b1       	in	r24, 0x05	; 5
     414:	8f 7c       	andi	r24, 0xCF	; 207
     416:	85 b9       	out	0x05, r24	; 5
     418:	08 95       	ret

0000041a <change_mode>:
}

//モードを切り替える関数
//引数に0を指定した場合は次の定数のモードへ 定数を指定した場合はそのモードへ
void change_mode (uint8_t cmode) {
	if(cmode) {
     41a:	88 23       	and	r24, r24
     41c:	19 f0       	breq	.+6      	; 0x424 <change_mode+0xa>
		mode = cmode;
     41e:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <mode>
     422:	08 95       	ret
	}else if(mode == MODE_MIN_SET) {
     424:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <mode>
     428:	83 30       	cpi	r24, 0x03	; 3
     42a:	21 f4       	brne	.+8      	; 0x434 <change_mode+0x1a>
		mode = MODE_CLOCK;
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <mode>
     432:	08 95       	ret
	}else{
		mode++;
     434:	8f 5f       	subi	r24, 0xFF	; 255
     436:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <mode>
     43a:	08 95       	ret

0000043c <init_memory_clock>:
	}
}

//保存時刻を初期化
void init_memory_clock (void) {
	if(unset) { //未設定なら00:00で初期化
     43c:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <unset>
     440:	88 23       	and	r24, r24
     442:	49 f0       	breq	.+18     	; 0x456 <init_memory_clock+0x1a>
		memory_hour = calc_hour = 0;
     444:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <calc_hour>
     448:	10 92 34 38 	sts	0x3834, r1	; 0x803834 <memory_hour>
		memory_min = calc_min = 0;
     44c:	10 92 33 38 	sts	0x3833, r1	; 0x803833 <calc_min>
     450:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <memory_min>
     454:	08 c0       	rjmp	.+16     	; 0x466 <init_memory_clock+0x2a>
	}else{
		memory_hour = calc_hour;
     456:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <calc_hour>
     45a:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <memory_hour>
		memory_min = calc_min;
     45e:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <calc_min>
     462:	80 93 35 38 	sts	0x3835, r24	; 0x803835 <memory_min>
	}
	RTC_CNT = 0;
     466:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
     46a:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
	calc_updated = 1;
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <calc_updated>
     474:	08 95       	ret

00000476 <__vector_10>:
}

//TCA割り込み
ISR (TCA0_CMP0_vect) {
     476:	1f 92       	push	r1
     478:	0f 92       	push	r0
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	0f 92       	push	r0
     47e:	11 24       	eor	r1, r1
     480:	ef 92       	push	r14
     482:	ff 92       	push	r15
     484:	0f 93       	push	r16
     486:	1f 93       	push	r17
     488:	2f 93       	push	r18
     48a:	3f 93       	push	r19
     48c:	4f 93       	push	r20
     48e:	5f 93       	push	r21
     490:	6f 93       	push	r22
     492:	7f 93       	push	r23
     494:	8f 93       	push	r24
     496:	9f 93       	push	r25
     498:	af 93       	push	r26
     49a:	bf 93       	push	r27
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	ef 93       	push	r30
     4a2:	ff 93       	push	r31

	TCA0_SINGLE_CNT = 0;//カウントリセット
     4a4:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__RODATA_PM_OFFSET__+0x7f8a20>
     4a8:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__RODATA_PM_OFFSET__+0x7f8a21>
	TCA0_SINGLE_INTFLAGS |= 0b00010000; //割り込み要求フラグを解除
     4ac:	eb e0       	ldi	r30, 0x0B	; 11
     4ae:	fa e0       	ldi	r31, 0x0A	; 10
     4b0:	80 81       	ld	r24, Z
     4b2:	80 61       	ori	r24, 0x10	; 16
     4b4:	80 83       	st	Z, r24

	//wakeupが0ならセグをすべて消灯してそれ以外を実行しない
	//メインループのseg_all_off関数とsleep_mode関数の間にこの割り込みが入り中途半端に7セグが点灯した状態でスリープするのを防ぐ記述
	if(!wakeup) {
     4b6:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <wakeup>
     4ba:	90 91 31 38 	lds	r25, 0x3831	; 0x803831 <wakeup+0x1>
     4be:	89 2b       	or	r24, r25
     4c0:	19 f4       	brne	.+6      	; 0x4c8 <__vector_10+0x52>
		seg_all_off();
     4c2:	0e 94 03 02 	call	0x406	; 0x406 <seg_all_off>
		return;
     4c6:	26 c2       	rjmp	.+1100   	; 0x914 <__DATA_REGION_LENGTH__+0x114>
	//現状このドットは使用していないのでコメントアウト 使うときは有効化してください
	//uint8_t dig1c, dig4c,;
	//dig1c = di45c = 0;

	//太陽電池の発電電圧とキャパシタの電圧を表示
	if(display_v && mode == MODE_CLOCK) {
     4c8:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <display_v>
     4cc:	88 23       	and	r24, r24
     4ce:	81 f0       	breq	.+32     	; 0x4f0 <__vector_10+0x7a>
     4d0:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <mode>
     4d4:	81 30       	cpi	r24, 0x01	; 1
     4d6:	61 f4       	brne	.+24     	; 0x4f0 <__vector_10+0x7a>
		dig1  = v_dig1;
     4d8:	c0 91 21 38 	lds	r28, 0x3821	; 0x803821 <v_dig1>
		dig2  = v_dig2;
     4dc:	d0 91 20 38 	lds	r29, 0x3820	; 0x803820 <v_dig2>
		dig3  = 0b00000000;
		dig4  = v_dig4;
     4e0:	10 91 1f 38 	lds	r17, 0x381F	; 0x80381f <v_dig4>
		dig5  = v_dig5;
     4e4:	00 91 1e 38 	lds	r16, 0x381E	; 0x80381e <v_dig5>
		dig2c = dig5c = 0b00000001;//ドット(小数点)
     4e8:	ee 24       	eor	r14, r14
     4ea:	e3 94       	inc	r14

	//太陽電池の発電電圧とキャパシタの電圧を表示
	if(display_v && mode == MODE_CLOCK) {
		dig1  = v_dig1;
		dig2  = v_dig2;
		dig3  = 0b00000000;
     4ec:	f1 2c       	mov	r15, r1
		dig4  = v_dig4;
		dig5  = v_dig5;
		dig2c = dig5c = 0b00000001;//ドット(小数点)
     4ee:	8f c0       	rjmp	.+286    	; 0x60e <__vector_10+0x198>

	}else if(unset && mode == MODE_CLOCK) {//時計未設定なら全てハイフンで上書き
     4f0:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <unset>
     4f4:	88 23       	and	r24, r24
     4f6:	29 f0       	breq	.+10     	; 0x502 <__vector_10+0x8c>
     4f8:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <mode>
     4fc:	81 30       	cpi	r24, 0x01	; 1
     4fe:	09 f4       	brne	.+2      	; 0x502 <__vector_10+0x8c>
     500:	7d c0       	rjmp	.+250    	; 0x5fc <__vector_10+0x186>
		dig3 = 0b00000110;

	}else{//時刻を表示

		//時刻が更新されていれば表示を刷新するための計算を行う。更新されていなければ前回表示したものをそのまま表示
		if(old_calc_min != calc_min || old_calc_hour != calc_hour) {
     502:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <old_calc_min>
     506:	c0 91 33 38 	lds	r28, 0x3833	; 0x803833 <calc_min>
     50a:	8c 13       	cpse	r24, r28
     50c:	07 c0       	rjmp	.+14     	; 0x51c <__vector_10+0xa6>
     50e:	90 91 01 38 	lds	r25, 0x3801	; 0x803801 <old_calc_hour>
     512:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <calc_hour>
     516:	98 17       	cp	r25, r24
     518:	09 f4       	brne	.+2      	; 0x51c <__vector_10+0xa6>
     51a:	64 c0       	rjmp	.+200    	; 0x5e4 <__vector_10+0x16e>
			//これまでの値を古い値を格納する変数に移し替える
			old_calc_min = calc_min;
     51c:	c0 93 02 38 	sts	0x3802, r28	; 0x803802 <old_calc_min>
			old_calc_hour = calc_hour;
     520:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <calc_hour>
     524:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <old_calc_hour>

			//12時間表記設定と24時間表記設定で表示を切り替える
			uint8_t display_hour = 0;
			if(system12) {
     528:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <system12>
     52c:	99 23       	and	r25, r25
     52e:	39 f0       	breq	.+14     	; 0x53e <__vector_10+0xc8>
				if(!calc_hour) display_hour = 12; //0時を12時と表記
     530:	88 23       	and	r24, r24
     532:	21 f0       	breq	.+8      	; 0x53c <__vector_10+0xc6>
				else if (calc_hour > 12) display_hour = calc_hour - 12; //13時以降を1時、2時…と表す
     534:	8d 30       	cpi	r24, 0x0D	; 13
     536:	18 f0       	brcs	.+6      	; 0x53e <__vector_10+0xc8>
     538:	8c 50       	subi	r24, 0x0C	; 12
     53a:	01 c0       	rjmp	.+2      	; 0x53e <__vector_10+0xc8>
			old_calc_hour = calc_hour;

			//12時間表記設定と24時間表記設定で表示を切り替える
			uint8_t display_hour = 0;
			if(system12) {
				if(!calc_hour) display_hour = 12; //0時を12時と表記
     53c:	8c e0       	ldi	r24, 0x0C	; 12
				else display_hour = calc_hour;
			}else{
				display_hour = calc_hour;
			}

			old_dig1 = dig1  = seg[calc_min % 10];
     53e:	ed ec       	ldi	r30, 0xCD	; 205
     540:	ce 9f       	mul	r28, r30
     542:	a1 2d       	mov	r26, r1
     544:	11 24       	eor	r1, r1
     546:	a6 95       	lsr	r26
     548:	a6 95       	lsr	r26
     54a:	a6 95       	lsr	r26
     54c:	2a 2f       	mov	r18, r26
     54e:	22 0f       	add	r18, r18
     550:	92 2f       	mov	r25, r18
     552:	99 0f       	add	r25, r25
     554:	99 0f       	add	r25, r25
     556:	92 0f       	add	r25, r18
     558:	c9 1b       	sub	r28, r25
     55a:	d0 e0       	ldi	r29, 0x00	; 0
     55c:	c7 5f       	subi	r28, 0xF7	; 247
     55e:	d7 4c       	sbci	r29, 0xC7	; 199
     560:	c8 81       	ld	r28, Y
     562:	c0 93 1d 38 	sts	0x381D, r28	; 0x80381d <old_dig1>
			old_dig2 = dig2  = seg[(calc_min / 10) % 10];
     566:	ae 9f       	mul	r26, r30
     568:	91 2d       	mov	r25, r1
     56a:	11 24       	eor	r1, r1
     56c:	96 95       	lsr	r25
     56e:	96 95       	lsr	r25
     570:	96 95       	lsr	r25
     572:	99 0f       	add	r25, r25
     574:	29 2f       	mov	r18, r25
     576:	22 0f       	add	r18, r18
     578:	22 0f       	add	r18, r18
     57a:	92 0f       	add	r25, r18
     57c:	a9 1b       	sub	r26, r25
     57e:	b0 e0       	ldi	r27, 0x00	; 0
     580:	a7 5f       	subi	r26, 0xF7	; 247
     582:	b7 4c       	sbci	r27, 0xC7	; 199
     584:	dc 91       	ld	r29, X
     586:	d0 93 1c 38 	sts	0x381C, r29	; 0x80381c <old_dig2>
			old_dig4 = dig4  = seg[display_hour % 10];
     58a:	8e 9f       	mul	r24, r30
     58c:	91 2d       	mov	r25, r1
     58e:	11 24       	eor	r1, r1
     590:	96 95       	lsr	r25
     592:	96 95       	lsr	r25
     594:	96 95       	lsr	r25
     596:	39 2f       	mov	r19, r25
     598:	33 0f       	add	r19, r19
     59a:	23 2f       	mov	r18, r19
     59c:	22 0f       	add	r18, r18
     59e:	22 0f       	add	r18, r18
     5a0:	23 0f       	add	r18, r19
     5a2:	82 1b       	sub	r24, r18
     5a4:	a8 2f       	mov	r26, r24
     5a6:	b0 e0       	ldi	r27, 0x00	; 0
     5a8:	a7 5f       	subi	r26, 0xF7	; 247
     5aa:	b7 4c       	sbci	r27, 0xC7	; 199
     5ac:	1c 91       	ld	r17, X
     5ae:	10 93 1b 38 	sts	0x381B, r17	; 0x80381b <old_dig4>

			//dig5のみ0なら不点灯にする(ゼロサプレス)
			uint8_t zerocheck = (display_hour / 10) % 10;
     5b2:	9e 9f       	mul	r25, r30
     5b4:	e1 2d       	mov	r30, r1
     5b6:	11 24       	eor	r1, r1
     5b8:	e6 95       	lsr	r30
     5ba:	e6 95       	lsr	r30
     5bc:	e6 95       	lsr	r30
     5be:	ee 0f       	add	r30, r30
     5c0:	8e 2f       	mov	r24, r30
     5c2:	88 0f       	add	r24, r24
     5c4:	88 0f       	add	r24, r24
     5c6:	e8 0f       	add	r30, r24
     5c8:	9e 1b       	sub	r25, r30
			if(zerocheck == 0) {
     5ca:	21 f4       	brne	.+8      	; 0x5d4 <__vector_10+0x15e>
				old_dig5 = dig5 = 0b00000000;
     5cc:	10 92 1a 38 	sts	0x381A, r1	; 0x80381a <old_dig5>
     5d0:	00 e0       	ldi	r16, 0x00	; 0
     5d2:	10 c0       	rjmp	.+32     	; 0x5f4 <__vector_10+0x17e>
			}else{
				old_dig5 = dig5   = seg[zerocheck];
     5d4:	e9 2f       	mov	r30, r25
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	e7 5f       	subi	r30, 0xF7	; 247
     5da:	f7 4c       	sbci	r31, 0xC7	; 199
     5dc:	00 81       	ld	r16, Z
     5de:	00 93 1a 38 	sts	0x381A, r16	; 0x80381a <old_dig5>
     5e2:	08 c0       	rjmp	.+16     	; 0x5f4 <__vector_10+0x17e>
			}

		}else{
			dig1 = old_dig1;
     5e4:	c0 91 1d 38 	lds	r28, 0x381D	; 0x80381d <old_dig1>
			dig2 = old_dig2;
     5e8:	d0 91 1c 38 	lds	r29, 0x381C	; 0x80381c <old_dig2>
			dig4 = old_dig4;
     5ec:	10 91 1b 38 	lds	r17, 0x381B	; 0x80381b <old_dig4>
			dig5 = old_dig5;
     5f0:	00 91 1a 38 	lds	r16, 0x381A	; 0x80381a <old_dig5>
		}

		dig3  = colon;
     5f4:	f0 90 19 38 	lds	r15, 0x3819	; 0x803819 <colon.3369>

	static uint8_t out_dig = 0;//発光させる桁
	static uint8_t colon = 0;//点滅コロン
	uint8_t dig1, dig2, dig3, dig4, dig5 = 0;
	uint8_t dig2c, dig5c;
	dig2c = dig5c = 0;
     5f8:	e1 2c       	mov	r14, r1
     5fa:	09 c0       	rjmp	.+18     	; 0x60e <__vector_10+0x198>
     5fc:	e1 2c       	mov	r14, r1
		dig4  = v_dig4;
		dig5  = v_dig5;
		dig2c = dig5c = 0b00000001;//ドット(小数点)

	}else if(unset && mode == MODE_CLOCK) {//時計未設定なら全てハイフンで上書き
		dig1 = dig2 = dig4 = dig5 = 0b10000000;
     5fe:	00 e8       	ldi	r16, 0x80	; 128
     600:	10 e8       	ldi	r17, 0x80	; 128
		dig3 = 0b00000110;
     602:	0f 2e       	mov	r0, r31
     604:	f6 e0       	ldi	r31, 0x06	; 6
     606:	ff 2e       	mov	r15, r31
     608:	f0 2d       	mov	r31, r0
		dig4  = v_dig4;
		dig5  = v_dig5;
		dig2c = dig5c = 0b00000001;//ドット(小数点)

	}else if(unset && mode == MODE_CLOCK) {//時計未設定なら全てハイフンで上書き
		dig1 = dig2 = dig4 = dig5 = 0b10000000;
     60a:	d0 e8       	ldi	r29, 0x80	; 128
     60c:	c0 e8       	ldi	r28, 0x80	; 128
	}

	//時刻設定時の点滅演出
	//点滅カウンター
	static uint16_t wink = 0;
	if(mode == MODE_HOUR_SET) {
     60e:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <mode>
     612:	82 30       	cpi	r24, 0x02	; 2
     614:	a9 f4       	brne	.+42     	; 0x640 <__vector_10+0x1ca>
		if(++wink < 512) dig4 = dig5 = 0b00000000;
     616:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <wink.3379>
     61a:	90 91 18 38 	lds	r25, 0x3818	; 0x803818 <wink.3379+0x1>
     61e:	01 96       	adiw	r24, 0x01	; 1
     620:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <wink.3379>
     624:	90 93 18 38 	sts	0x3818, r25	; 0x803818 <wink.3379+0x1>
     628:	81 15       	cp	r24, r1
     62a:	22 e0       	ldi	r18, 0x02	; 2
     62c:	92 07       	cpc	r25, r18
     62e:	20 f1       	brcs	.+72     	; 0x678 <__vector_10+0x202>
		else if (wink > 1023) wink = 0;
     630:	81 15       	cp	r24, r1
     632:	94 40       	sbci	r25, 0x04	; 4
     634:	30 f1       	brcs	.+76     	; 0x682 <__vector_10+0x20c>
     636:	10 92 17 38 	sts	0x3817, r1	; 0x803817 <wink.3379>
     63a:	10 92 18 38 	sts	0x3818, r1	; 0x803818 <wink.3379+0x1>
     63e:	21 c0       	rjmp	.+66     	; 0x682 <__vector_10+0x20c>
	}else if(mode == MODE_MIN_SET) {
     640:	83 30       	cpi	r24, 0x03	; 3
     642:	a9 f4       	brne	.+42     	; 0x66e <__vector_10+0x1f8>
		if(++wink < 512) dig1 = dig2 = 0b00000000;
     644:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <wink.3379>
     648:	90 91 18 38 	lds	r25, 0x3818	; 0x803818 <wink.3379+0x1>
     64c:	01 96       	adiw	r24, 0x01	; 1
     64e:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <wink.3379>
     652:	90 93 18 38 	sts	0x3818, r25	; 0x803818 <wink.3379+0x1>
     656:	81 15       	cp	r24, r1
     658:	22 e0       	ldi	r18, 0x02	; 2
     65a:	92 07       	cpc	r25, r18
     65c:	80 f0       	brcs	.+32     	; 0x67e <__vector_10+0x208>
		else if (wink > 1023) wink = 0;
     65e:	81 15       	cp	r24, r1
     660:	94 40       	sbci	r25, 0x04	; 4
     662:	78 f0       	brcs	.+30     	; 0x682 <__vector_10+0x20c>
     664:	10 92 17 38 	sts	0x3817, r1	; 0x803817 <wink.3379>
     668:	10 92 18 38 	sts	0x3818, r1	; 0x803818 <wink.3379+0x1>
     66c:	0a c0       	rjmp	.+20     	; 0x682 <__vector_10+0x20c>
	}else{
		wink = 0;
     66e:	10 92 17 38 	sts	0x3817, r1	; 0x803817 <wink.3379>
     672:	10 92 18 38 	sts	0x3818, r1	; 0x803818 <wink.3379+0x1>
     676:	05 c0       	rjmp	.+10     	; 0x682 <__vector_10+0x20c>

	//時刻設定時の点滅演出
	//点滅カウンター
	static uint16_t wink = 0;
	if(mode == MODE_HOUR_SET) {
		if(++wink < 512) dig4 = dig5 = 0b00000000;
     678:	00 e0       	ldi	r16, 0x00	; 0
     67a:	10 e0       	ldi	r17, 0x00	; 0
     67c:	02 c0       	rjmp	.+4      	; 0x682 <__vector_10+0x20c>
		else if (wink > 1023) wink = 0;
	}else if(mode == MODE_MIN_SET) {
		if(++wink < 512) dig1 = dig2 = 0b00000000;
     67e:	d0 e0       	ldi	r29, 0x00	; 0
     680:	c0 e0       	ldi	r28, 0x00	; 0
		wink = 0;
	}


	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();
     682:	0e 94 03 02 	call	0x406	; 0x406 <seg_all_off>

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
	static uint8_t bn_pwm_count = 1; //7セグを間欠で点灯させるために0～12までを繰り返し数えるカウンター

	if(++bn_pwm_count > 24) bn_pwm_count = 1;
     686:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     68a:	8f 5f       	subi	r24, 0xFF	; 255
     68c:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
     690:	89 31       	cpi	r24, 0x19	; 25
     692:	18 f0       	brcs	.+6      	; 0x69a <__vector_10+0x224>
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>

	//間欠点灯で明るさを調整
	switch (brightness) {
     69a:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <brightness>
     69e:	83 30       	cpi	r24, 0x03	; 3
     6a0:	19 f1       	breq	.+70     	; 0x6e8 <__vector_10+0x272>
     6a2:	28 f4       	brcc	.+10     	; 0x6ae <__vector_10+0x238>
     6a4:	81 30       	cpi	r24, 0x01	; 1
     6a6:	51 f0       	breq	.+20     	; 0x6bc <__vector_10+0x246>
     6a8:	82 30       	cpi	r24, 0x02	; 2
     6aa:	91 f0       	breq	.+36     	; 0x6d0 <__vector_10+0x25a>
     6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <__vector_10+0x242>
     6ae:	85 30       	cpi	r24, 0x05	; 5
     6b0:	71 f1       	breq	.+92     	; 0x70e <__vector_10+0x298>
     6b2:	f8 f0       	brcs	.+62     	; 0x6f2 <__vector_10+0x27c>
     6b4:	86 30       	cpi	r24, 0x06	; 6
     6b6:	89 f1       	breq	.+98     	; 0x71a <__vector_10+0x2a4>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	44 c0       	rjmp	.+136    	; 0x744 <__vector_10+0x2ce>
	//間欠点灯で明るさを調整
	switch (brightness) {

		case 1: //12.5% bn_pwm_countが8,16,24のタイミングで点灯
			if(
				bn_pwm_count == 8  ||
     6bc:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>

	//間欠点灯で明るさを調整
	switch (brightness) {

		case 1: //12.5% bn_pwm_countが8,16,24のタイミングで点灯
			if(
     6c0:	88 30       	cpi	r24, 0x08	; 8
     6c2:	69 f1       	breq	.+90     	; 0x71e <__vector_10+0x2a8>
				bn_pwm_count == 8  ||
     6c4:	80 31       	cpi	r24, 0x10	; 16
     6c6:	69 f1       	breq	.+90     	; 0x722 <__vector_10+0x2ac>
				bn_pwm_count == 16 ||
     6c8:	88 31       	cpi	r24, 0x18	; 24
     6ca:	69 f1       	breq	.+90     	; 0x726 <__vector_10+0x2b0>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	3a c0       	rjmp	.+116    	; 0x744 <__vector_10+0x2ce>
			}
		break;

		case 2: //16.67% bn_pwm_countが6,12,18,24のタイミングで点灯
			if(
				bn_pwm_count == 6  ||
     6d0:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
				seg_on = 1;
			}
		break;

		case 2: //16.67% bn_pwm_countが6,12,18,24のタイミングで点灯
			if(
     6d4:	86 30       	cpi	r24, 0x06	; 6
     6d6:	49 f1       	breq	.+82     	; 0x72a <__vector_10+0x2b4>
				bn_pwm_count == 6  ||
     6d8:	8c 30       	cpi	r24, 0x0C	; 12
     6da:	49 f1       	breq	.+82     	; 0x72e <__vector_10+0x2b8>
				bn_pwm_count == 12 ||
     6dc:	82 31       	cpi	r24, 0x12	; 18
     6de:	49 f1       	breq	.+82     	; 0x732 <__vector_10+0x2bc>
				bn_pwm_count == 18 ||
     6e0:	88 31       	cpi	r24, 0x18	; 24
     6e2:	49 f1       	breq	.+82     	; 0x736 <__vector_10+0x2c0>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	2e c0       	rjmp	.+92     	; 0x744 <__vector_10+0x2ce>
				seg_on = 1;
			}
		break;

		case 3: //25% bn_pwm_countが4,8,12,16,20,24のタイミングで点灯
			if(bn_pwm_count % 4) {
     6e8:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     6ec:	83 70       	andi	r24, 0x03	; 3
     6ee:	29 f5       	brne	.+74     	; 0x73a <__vector_10+0x2c4>
     6f0:	29 c0       	rjmp	.+82     	; 0x744 <__vector_10+0x2ce>
				seg_on = 1;
			}
		break;

		case 4: //33.33% bn_pwm_countが3,6,9,12,15,18,21,24のタイミングで点灯
			if(bn_pwm_count % 3) {
     6f2:	90 91 00 38 	lds	r25, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     6f6:	8b ea       	ldi	r24, 0xAB	; 171
     6f8:	98 9f       	mul	r25, r24
     6fa:	81 2d       	mov	r24, r1
     6fc:	11 24       	eor	r1, r1
     6fe:	86 95       	lsr	r24
     700:	28 2f       	mov	r18, r24
     702:	22 0f       	add	r18, r18
     704:	82 0f       	add	r24, r18
     706:	98 13       	cpse	r25, r24
     708:	1a c0       	rjmp	.+52     	; 0x73e <__vector_10+0x2c8>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	1b c0       	rjmp	.+54     	; 0x744 <__vector_10+0x2ce>
				seg_on = 1;
			}
		break;

		case 5: //50% bn_pwm_countが2,4,6,8,10,12,14,16,18,20,22,24のタイミングで点灯
			if(bn_pwm_count % 2) {
     70e:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     712:	80 fd       	sbrc	r24, 0
     714:	16 c0       	rjmp	.+44     	; 0x742 <__vector_10+0x2cc>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	15 c0       	rjmp	.+42     	; 0x744 <__vector_10+0x2ce>
				seg_on = 1;
			}
		break;

		case 6: //100% bn_pwm_countがいくつでも全てのタイミングで点灯
			seg_on = 1;
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	13 c0       	rjmp	.+38     	; 0x744 <__vector_10+0x2ce>
			if(
				bn_pwm_count == 8  ||
				bn_pwm_count == 16 ||
				bn_pwm_count == 24
			) {
				seg_on = 1;
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	11 c0       	rjmp	.+34     	; 0x744 <__vector_10+0x2ce>
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	0f c0       	rjmp	.+30     	; 0x744 <__vector_10+0x2ce>
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	0d c0       	rjmp	.+26     	; 0x744 <__vector_10+0x2ce>
				bn_pwm_count == 6  ||
				bn_pwm_count == 12 ||
				bn_pwm_count == 18 ||
				bn_pwm_count == 24
			) {
				seg_on = 1;
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	0b c0       	rjmp	.+22     	; 0x744 <__vector_10+0x2ce>
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	09 c0       	rjmp	.+18     	; 0x744 <__vector_10+0x2ce>
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	07 c0       	rjmp	.+14     	; 0x744 <__vector_10+0x2ce>
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	05 c0       	rjmp	.+10     	; 0x744 <__vector_10+0x2ce>
			}
		break;

		case 3: //25% bn_pwm_countが4,8,12,16,20,24のタイミングで点灯
			if(bn_pwm_count % 4) {
				seg_on = 1;
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	03 c0       	rjmp	.+6      	; 0x744 <__vector_10+0x2ce>
			}
		break;

		case 4: //33.33% bn_pwm_countが3,6,9,12,15,18,21,24のタイミングで点灯
			if(bn_pwm_count % 3) {
				seg_on = 1;
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	01 c0       	rjmp	.+2      	; 0x744 <__vector_10+0x2ce>
			}
		break;

		case 5: //50% bn_pwm_countが2,4,6,8,10,12,14,16,18,20,22,24のタイミングで点灯
			if(bn_pwm_count % 2) {
				seg_on = 1;
     742:	81 e0       	ldi	r24, 0x01	; 1
			seg_on = 1;
		break;
	}

	//点灯実行
	if(seg_on) {
     744:	88 23       	and	r24, r24
     746:	d9 f1       	breq	.+118    	; 0x7be <__vector_10+0x348>
		switch (out_dig) {
     748:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <out_dig.3368>
     74c:	82 30       	cpi	r24, 0x02	; 2
     74e:	e9 f0       	breq	.+58     	; 0x78a <__vector_10+0x314>
     750:	28 f4       	brcc	.+10     	; 0x75c <__vector_10+0x2e6>
     752:	88 23       	and	r24, r24
     754:	41 f0       	breq	.+16     	; 0x766 <__vector_10+0x2f0>
     756:	81 30       	cpi	r24, 0x01	; 1
     758:	59 f0       	breq	.+22     	; 0x770 <__vector_10+0x2fa>
     75a:	31 c0       	rjmp	.+98     	; 0x7be <__vector_10+0x348>
     75c:	83 30       	cpi	r24, 0x03	; 3
     75e:	e1 f0       	breq	.+56     	; 0x798 <__vector_10+0x322>
     760:	84 30       	cpi	r24, 0x04	; 4
     762:	f9 f0       	breq	.+62     	; 0x7a2 <__vector_10+0x32c>
     764:	2c c0       	rjmp	.+88     	; 0x7be <__vector_10+0x348>

			case 0:
			VPORTB_OUT |= 0b00010000;
     766:	85 b1       	in	r24, 0x05	; 5
     768:	80 61       	ori	r24, 0x10	; 16
     76a:	85 b9       	out	0x05, r24	; 5
			VPORTA_OUT = dig1;
     76c:	c1 b9       	out	0x01, r28	; 1
			//現状このドットは使用していないのでコメントアウト 使うときは有効化してください
			//VPORTC_OUT = (dig1c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
			break;
     76e:	27 c0       	rjmp	.+78     	; 0x7be <__vector_10+0x348>

			case 1:
			VPORTC_OUT |= 0b00001000;
     770:	89 b1       	in	r24, 0x09	; 9
     772:	88 60       	ori	r24, 0x08	; 8
     774:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig2;
     776:	d1 b9       	out	0x01, r29	; 1
			if(display_v) VPORTC_OUT = (dig2c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
     778:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <display_v>
     77c:	88 23       	and	r24, r24
     77e:	f9 f0       	breq	.+62     	; 0x7be <__vector_10+0x348>
     780:	89 b1       	in	r24, 0x09	; 9
     782:	8e 7f       	andi	r24, 0xFE	; 254
     784:	e8 2a       	or	r14, r24
     786:	e9 b8       	out	0x09, r14	; 9
     788:	1a c0       	rjmp	.+52     	; 0x7be <__vector_10+0x348>
			break;

			case 2:
			if(dig3) { //電力消費削減のため、コロンが消灯している時はカソード側トランジスタも開けない
     78a:	ff 20       	and	r15, r15
     78c:	c1 f0       	breq	.+48     	; 0x7be <__vector_10+0x348>
				VPORTB_OUT |= 0b00100000;
     78e:	85 b1       	in	r24, 0x05	; 5
     790:	80 62       	ori	r24, 0x20	; 32
     792:	85 b9       	out	0x05, r24	; 5
				VPORTA_OUT = dig3;
     794:	f1 b8       	out	0x01, r15	; 1
     796:	13 c0       	rjmp	.+38     	; 0x7be <__vector_10+0x348>
			}
			break;

			case 3:
			VPORTC_OUT |= 0b00000100;
     798:	89 b1       	in	r24, 0x09	; 9
     79a:	84 60       	ori	r24, 0x04	; 4
     79c:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig4;
     79e:	11 b9       	out	0x01, r17	; 1
			//現状このドットは使用していないのでコメントアウト 使うときは有効化してください
			//VPORTC_OUT = (dig4c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
			break;
     7a0:	0e c0       	rjmp	.+28     	; 0x7be <__vector_10+0x348>

			case 4:
			if(dig5) { //電力消費削減のため、dig5がゼロサプレスされていればカソード側トランジスタも開けない
     7a2:	00 23       	and	r16, r16
     7a4:	61 f0       	breq	.+24     	; 0x7be <__vector_10+0x348>
				VPORTC_OUT |= 0b00000010;
     7a6:	89 b1       	in	r24, 0x09	; 9
     7a8:	82 60       	ori	r24, 0x02	; 2
     7aa:	89 b9       	out	0x09, r24	; 9
				VPORTA_OUT = dig5;
     7ac:	01 b9       	out	0x01, r16	; 1
				if(display_v) VPORTC_OUT = (dig5c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
     7ae:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <display_v>
     7b2:	88 23       	and	r24, r24
     7b4:	21 f0       	breq	.+8      	; 0x7be <__vector_10+0x348>
     7b6:	89 b1       	in	r24, 0x09	; 9
     7b8:	8e 7f       	andi	r24, 0xFE	; 254
     7ba:	e8 2a       	or	r14, r24
     7bc:	e9 b8       	out	0x09, r14	; 9
		}
	}


	//5回に1回やること
	if (++out_dig == 5) {
     7be:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <out_dig.3368>
     7c2:	8f 5f       	subi	r24, 0xFF	; 255
     7c4:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <out_dig.3368>
     7c8:	85 30       	cpi	r24, 0x05	; 5
     7ca:	09 f0       	breq	.+2      	; 0x7ce <__vector_10+0x358>
     7cc:	a3 c0       	rjmp	.+326    	; 0x914 <__DATA_REGION_LENGTH__+0x114>
		//out_digの0~5トグル動作
		out_dig = 0;
     7ce:	10 92 16 38 	sts	0x3816, r1	; 0x803816 <out_dig.3368>

		//コロンの点滅動作
		if(!(RTC_CNTL & 0b00000001) || mode != MODE_CLOCK) { //コロンの点滅
     7d2:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
     7d6:	80 ff       	sbrs	r24, 0
     7d8:	04 c0       	rjmp	.+8      	; 0x7e2 <__vector_10+0x36c>
     7da:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <mode>
     7de:	81 30       	cpi	r24, 0x01	; 1
     7e0:	21 f0       	breq	.+8      	; 0x7ea <__vector_10+0x374>
			colon = 0b00000110;
     7e2:	86 e0       	ldi	r24, 0x06	; 6
     7e4:	80 93 19 38 	sts	0x3819, r24	; 0x803819 <colon.3369>
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <__vector_10+0x378>
		}else{
			colon = 0b00000000;
     7ea:	10 92 19 38 	sts	0x3819, r1	; 0x803819 <colon.3369>
		}

		//算出時刻を進める
		//old_rtc_cntにカウント値を保存して最新のカウント値と比較し、0.5秒に1回だけ剰余演算で判定する
		static uint16_t old_rtc_cnt = 0;
		if(old_rtc_cnt != RTC_CNT) {
     7ee:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
     7f2:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
     7f6:	80 91 14 38 	lds	r24, 0x3814	; 0x803814 <__data_end>
     7fa:	90 91 15 38 	lds	r25, 0x3815	; 0x803815 <__data_end+0x1>
     7fe:	28 17       	cp	r18, r24
     800:	39 07       	cpc	r19, r25
     802:	09 f4       	brne	.+2      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     804:	41 c0       	rjmp	.+130    	; 0x888 <__DATA_REGION_LENGTH__+0x88>
			old_rtc_cnt = RTC_CNT;
     806:	e8 e4       	ldi	r30, 0x48	; 72
     808:	f1 e0       	ldi	r31, 0x01	; 1
     80a:	80 81       	ld	r24, Z
     80c:	91 81       	ldd	r25, Z+1	; 0x01
     80e:	80 93 14 38 	sts	0x3814, r24	; 0x803814 <__data_end>
     812:	90 93 15 38 	sts	0x3815, r25	; 0x803815 <__data_end+0x1>
			if(!(RTC_CNT % 120)) { 
     816:	40 81       	ld	r20, Z
     818:	51 81       	ldd	r21, Z+1	; 0x01
     81a:	9a 01       	movw	r18, r20
     81c:	a9 e8       	ldi	r26, 0x89	; 137
     81e:	b8 e8       	ldi	r27, 0x88	; 136
     820:	0e 94 2e 08 	call	0x105c	; 0x105c <__umulhisi3>
     824:	00 24       	eor	r0, r0
     826:	88 0f       	add	r24, r24
     828:	99 1f       	adc	r25, r25
     82a:	00 1c       	adc	r0, r0
     82c:	88 0f       	add	r24, r24
     82e:	99 1f       	adc	r25, r25
     830:	00 1c       	adc	r0, r0
     832:	89 2f       	mov	r24, r25
     834:	90 2d       	mov	r25, r0
     836:	68 e7       	ldi	r22, 0x78	; 120
     838:	68 9f       	mul	r22, r24
     83a:	90 01       	movw	r18, r0
     83c:	69 9f       	mul	r22, r25
     83e:	30 0d       	add	r19, r0
     840:	11 24       	eor	r1, r1
     842:	42 17       	cp	r20, r18
     844:	53 07       	cpc	r21, r19
     846:	f1 f4       	brne	.+60     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
				if(calc_updated == 0) {
     848:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <calc_updated>
     84c:	81 11       	cpse	r24, r1
     84e:	1c c0       	rjmp	.+56     	; 0x888 <__DATA_REGION_LENGTH__+0x88>
					calc_updated = 1;
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <calc_updated>
					if(++calc_min >= 60) {
     856:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <calc_min>
     85a:	8f 5f       	subi	r24, 0xFF	; 255
     85c:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <calc_min>
     860:	8c 33       	cpi	r24, 0x3C	; 60
     862:	40 f0       	brcs	.+16     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
						calc_hour++;
     864:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <calc_hour>
     868:	9f 5f       	subi	r25, 0xFF	; 255
     86a:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <calc_hour>
						calc_min -= 60;
     86e:	8c 53       	subi	r24, 0x3C	; 60
     870:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <calc_min>
					}
					if(calc_hour >= 24) calc_hour -= 24;
     874:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <calc_hour>
     878:	88 31       	cpi	r24, 0x18	; 24
     87a:	30 f0       	brcs	.+12     	; 0x888 <__DATA_REGION_LENGTH__+0x88>
     87c:	88 51       	subi	r24, 0x18	; 24
     87e:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <calc_hour>
     882:	02 c0       	rjmp	.+4      	; 0x888 <__DATA_REGION_LENGTH__+0x88>
				}
			}else{
				calc_updated = 0;
     884:	10 92 05 38 	sts	0x3805, r1	; 0x803805 <calc_updated>
			}
		}

		//スリープへ向けwakeupを減らす
		if(wakeup) wakeup--;
     888:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <wakeup>
     88c:	90 91 31 38 	lds	r25, 0x3831	; 0x803831 <wakeup+0x1>
     890:	00 97       	sbiw	r24, 0x00	; 0
     892:	29 f0       	breq	.+10     	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
     894:	01 97       	sbiw	r24, 0x01	; 1
     896:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <wakeup>
     89a:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <wakeup+0x1>

		//電圧表示時間を減らす
		if(display_v) display_v--;
     89e:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <display_v>
     8a2:	88 23       	and	r24, r24
     8a4:	19 f0       	breq	.+6      	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
     8a6:	81 50       	subi	r24, 0x01	; 1
     8a8:	80 93 24 38 	sts	0x3824, r24	; 0x803824 <display_v>

		//タクトスイッチが長押しされている場合、長押しカウントを加算
		if(VPORTB_IN & PIN1_bm) {
     8ac:	31 9b       	sbis	0x06, 1	; 6
     8ae:	05 c0       	rjmp	.+10     	; 0x8ba <__DATA_REGION_LENGTH__+0xba>
			long_push = 0;
     8b0:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <long_push>
     8b4:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <long_push+0x1>
     8b8:	2d c0       	rjmp	.+90     	; 0x914 <__DATA_REGION_LENGTH__+0x114>
		}else{
			if(++long_push > 1200) {
     8ba:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <long_push>
     8be:	90 91 2f 38 	lds	r25, 0x382F	; 0x80382f <long_push+0x1>
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <long_push>
     8c8:	90 93 2f 38 	sts	0x382F, r25	; 0x80382f <long_push+0x1>
     8cc:	81 3b       	cpi	r24, 0xB1	; 177
     8ce:	94 40       	sbci	r25, 0x04	; 4
     8d0:	08 f1       	brcs	.+66     	; 0x914 <__DATA_REGION_LENGTH__+0x114>
				long_push = 0;
     8d2:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <long_push>
     8d6:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <long_push+0x1>
				//時刻設定をした後、算出時刻を保存時刻に代入しカウントリセット
				init_memory_clock();
     8da:	0e 94 1e 02 	call	0x43c	; 0x43c <init_memory_clock>
				change_mode(0);
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	0e 94 0d 02 	call	0x41a	; 0x41a <change_mode>
				change_mode_after = 1;
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <change_mode_after>

				unset = 0; //時刻未設定フラグを折る
     8ea:	10 92 03 38 	sts	0x3803, r1	; 0x803803 <unset>
				//スリープを挟まず3回連続で時刻合わせを行った場合は24時間表記に切り替える
				if(mode == MODE_HOUR_SET) {
     8ee:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <mode>
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	79 f4       	brne	.+30     	; 0x914 <__DATA_REGION_LENGTH__+0x114>
					s24count++;
     8f6:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <s24count>
     8fa:	8f 5f       	subi	r24, 0xFF	; 255
     8fc:	80 93 22 38 	sts	0x3822, r24	; 0x803822 <s24count>
					if(s24count >= 3) {
     900:	83 30       	cpi	r24, 0x03	; 3
     902:	28 f0       	brcs	.+10     	; 0x90e <__DATA_REGION_LENGTH__+0x10e>
						s24count = 0;
     904:	10 92 22 38 	sts	0x3822, r1	; 0x803822 <s24count>
						system12 = 0;
     908:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <system12>
     90c:	03 c0       	rjmp	.+6      	; 0x914 <__DATA_REGION_LENGTH__+0x114>
					}else{
						system12 = 1;
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <system12>
				}
			}
		}
	}

}
     914:	ff 91       	pop	r31
     916:	ef 91       	pop	r30
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	bf 91       	pop	r27
     91e:	af 91       	pop	r26
     920:	9f 91       	pop	r25
     922:	8f 91       	pop	r24
     924:	7f 91       	pop	r23
     926:	6f 91       	pop	r22
     928:	5f 91       	pop	r21
     92a:	4f 91       	pop	r20
     92c:	3f 91       	pop	r19
     92e:	2f 91       	pop	r18
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	0f 90       	pop	r0
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	0f 90       	pop	r0
     93e:	1f 90       	pop	r1
     940:	18 95       	reti

00000942 <__vector_4>:

//外部割り込み PB0が変化したら 両方のエッジを検出する(片方エッジにしたいがそうするとなぜかスタンバイから復帰しない)
ISR(PORTB_PORT_vect) {
     942:	1f 92       	push	r1
     944:	0f 92       	push	r0
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	0f 92       	push	r0
     94a:	11 24       	eor	r1, r1
     94c:	2f 93       	push	r18
     94e:	3f 93       	push	r19
     950:	4f 93       	push	r20
     952:	5f 93       	push	r21
     954:	6f 93       	push	r22
     956:	7f 93       	push	r23
     958:	8f 93       	push	r24
     95a:	9f 93       	push	r25
     95c:	af 93       	push	r26
     95e:	bf 93       	push	r27
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	ef 93       	push	r30
     966:	ff 93       	push	r31
	
	PORTB_INTFLAGS |= 0b00000010; //割り込み要求フラグ解除
     968:	e9 e2       	ldi	r30, 0x29	; 41
     96a:	f4 e0       	ldi	r31, 0x04	; 4
     96c:	80 81       	ld	r24, Z
     96e:	82 60       	ori	r24, 0x02	; 2
     970:	80 83       	st	Z, r24

	//赤外線センサー PB0がLowに切り替わったら何もせず返す 両方のエッジを検出するようにしているので立ち下がりエッジ割り込みはここで無効にする
	if(!(VPORTB_IN & PIN0_bm)) {
     972:	30 9b       	sbis	0x06, 0	; 6
     974:	64 c0       	rjmp	.+200    	; 0xa3e <__vector_4+0xfc>
		return;
	}

	//赤外線センサー PB0がHighだったら一定時間起き上がらせる
	if(VPORTB_IN & PIN0_bm) {
     976:	30 9b       	sbis	0x06, 0	; 6
     978:	62 c0       	rjmp	.+196    	; 0xa3e <__vector_4+0xfc>

		//まず電圧測定する
		if(yet_v) {
     97a:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <yet_v>
     97e:	88 23       	and	r24, r24
     980:	21 f0       	breq	.+8      	; 0x98a <__vector_4+0x48>
			yet_v = 0; //電圧測定をしたことをyet_vに記録
     982:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <yet_v>
			get_v();
     986:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
		}

		if(!wakeup) {
     98a:	e0 91 30 38 	lds	r30, 0x3830	; 0x803830 <wakeup>
     98e:	f0 91 31 38 	lds	r31, 0x3831	; 0x803831 <wakeup+0x1>
     992:	30 97       	sbiw	r30, 0x00	; 0
     994:	09 f0       	breq	.+2      	; 0x998 <__vector_4+0x56>
     996:	4a c0       	rjmp	.+148    	; 0xa2c <__vector_4+0xea>

			//現在時刻を算出
			
			//眠っている間に計測した秒数を分に換算
			uint16_t slept_min = RTC_CNT / 120;
     998:	40 91 48 01 	lds	r20, 0x0148	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
     99c:	50 91 49 01 	lds	r21, 0x0149	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
     9a0:	9a 01       	movw	r18, r20
     9a2:	a9 e8       	ldi	r26, 0x89	; 137
     9a4:	b8 e8       	ldi	r27, 0x88	; 136
     9a6:	0e 94 2e 08 	call	0x105c	; 0x105c <__umulhisi3>
     9aa:	ec 01       	movw	r28, r24
     9ac:	00 24       	eor	r0, r0
     9ae:	cc 0f       	add	r28, r28
     9b0:	dd 1f       	adc	r29, r29
     9b2:	00 1c       	adc	r0, r0
     9b4:	cc 0f       	add	r28, r28
     9b6:	dd 1f       	adc	r29, r29
     9b8:	00 1c       	adc	r0, r0
     9ba:	cd 2f       	mov	r28, r29
     9bc:	d0 2d       	mov	r29, r0

			calc_hour = memory_hour + slept_min / 60;
     9be:	ca 01       	movw	r24, r20
     9c0:	60 e2       	ldi	r22, 0x20	; 32
     9c2:	7c e1       	ldi	r23, 0x1C	; 28
     9c4:	0e 94 1a 08 	call	0x1034	; 0x1034 <__udivmodhi4>
     9c8:	40 91 34 38 	lds	r20, 0x3834	; 0x803834 <memory_hour>
     9cc:	46 0f       	add	r20, r22
     9ce:	40 93 32 38 	sts	0x3832, r20	; 0x803832 <calc_hour>
			calc_min  = memory_min  + slept_min % 60;
     9d2:	9e 01       	movw	r18, r28
     9d4:	a9 e8       	ldi	r26, 0x89	; 137
     9d6:	b8 e8       	ldi	r27, 0x88	; 136
     9d8:	0e 94 2e 08 	call	0x105c	; 0x105c <__umulhisi3>
     9dc:	96 95       	lsr	r25
     9de:	87 95       	ror	r24
     9e0:	92 95       	swap	r25
     9e2:	82 95       	swap	r24
     9e4:	8f 70       	andi	r24, 0x0F	; 15
     9e6:	89 27       	eor	r24, r25
     9e8:	9f 70       	andi	r25, 0x0F	; 15
     9ea:	89 27       	eor	r24, r25
     9ec:	5c e3       	ldi	r21, 0x3C	; 60
     9ee:	58 9f       	mul	r21, r24
     9f0:	90 01       	movw	r18, r0
     9f2:	59 9f       	mul	r21, r25
     9f4:	30 0d       	add	r19, r0
     9f6:	11 24       	eor	r1, r1
     9f8:	ce 01       	movw	r24, r28
     9fa:	82 1b       	sub	r24, r18
     9fc:	93 0b       	sbc	r25, r19
     9fe:	90 91 35 38 	lds	r25, 0x3835	; 0x803835 <memory_min>
     a02:	89 0f       	add	r24, r25
     a04:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <calc_min>

			if(calc_min >= 60) {
     a08:	8c 33       	cpi	r24, 0x3C	; 60
     a0a:	30 f0       	brcs	.+12     	; 0xa18 <__vector_4+0xd6>
				calc_hour++;
     a0c:	4f 5f       	subi	r20, 0xFF	; 255
     a0e:	40 93 32 38 	sts	0x3832, r20	; 0x803832 <calc_hour>
				calc_min -= 60;
     a12:	8c 53       	subi	r24, 0x3C	; 60
     a14:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <calc_min>
			}
			
			if(calc_hour >= 24) calc_hour -= 24;
     a18:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <calc_hour>
     a1c:	88 31       	cpi	r24, 0x18	; 24
     a1e:	18 f0       	brcs	.+6      	; 0xa26 <__vector_4+0xe4>
     a20:	88 51       	subi	r24, 0x18	; 24
     a22:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <calc_hour>
			calc_updated = 1;
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <calc_updated>
		}

		//一定時間起き上がらせる
		if(wakeup < 1000) wakeup = 1000;
     a2c:	e8 3e       	cpi	r30, 0xE8	; 232
     a2e:	f3 40       	sbci	r31, 0x03	; 3
     a30:	30 f4       	brcc	.+12     	; 0xa3e <__vector_4+0xfc>
     a32:	88 ee       	ldi	r24, 0xE8	; 232
     a34:	93 e0       	ldi	r25, 0x03	; 3
     a36:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <wakeup>
     a3a:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <wakeup+0x1>
		return;
	}

	return;
}
     a3e:	ff 91       	pop	r31
     a40:	ef 91       	pop	r30
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	bf 91       	pop	r27
     a48:	af 91       	pop	r26
     a4a:	9f 91       	pop	r25
     a4c:	8f 91       	pop	r24
     a4e:	7f 91       	pop	r23
     a50:	6f 91       	pop	r22
     a52:	5f 91       	pop	r21
     a54:	4f 91       	pop	r20
     a56:	3f 91       	pop	r19
     a58:	2f 91       	pop	r18
     a5a:	0f 90       	pop	r0
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	0f 90       	pop	r0
     a60:	1f 90       	pop	r1
     a62:	18 95       	reti

00000a64 <__vector_6>:

//リアルタイムクロック 比較一致割り込み
ISR(RTC_CNT_vect) {
     a64:	1f 92       	push	r1
     a66:	0f 92       	push	r0
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	0f 92       	push	r0
     a6c:	11 24       	eor	r1, r1
     a6e:	2f 93       	push	r18
     a70:	3f 93       	push	r19
     a72:	4f 93       	push	r20
     a74:	5f 93       	push	r21
     a76:	6f 93       	push	r22
     a78:	7f 93       	push	r23
     a7a:	8f 93       	push	r24
     a7c:	9f 93       	push	r25
     a7e:	af 93       	push	r26
     a80:	bf 93       	push	r27
     a82:	ef 93       	push	r30
     a84:	ff 93       	push	r31
	RTC_CNT = 0;
     a86:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
     a8a:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
	RTC_INTFLAGS |= 0b00000010;
     a8e:	e3 e4       	ldi	r30, 0x43	; 67
     a90:	f1 e0       	ldi	r31, 0x01	; 1
     a92:	80 81       	ld	r24, Z
     a94:	82 60       	ori	r24, 0x02	; 2
     a96:	80 83       	st	Z, r24

	//時計を9時間進める
	if (mode == MODE_CLOCK) {
     a98:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <mode>
     a9c:	81 30       	cpi	r24, 0x01	; 1
     a9e:	51 f4       	brne	.+20     	; 0xab4 <__vector_6+0x50>
		memory_hour += 9;
     aa0:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <memory_hour>
     aa4:	87 5f       	subi	r24, 0xF7	; 247
     aa6:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <memory_hour>
		if(memory_hour >= 24) memory_hour -= 24;
     aaa:	88 31       	cpi	r24, 0x18	; 24
     aac:	18 f0       	brcs	.+6      	; 0xab4 <__vector_6+0x50>
     aae:	88 51       	subi	r24, 0x18	; 24
     ab0:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <memory_hour>
	}
	
	//日常点検作業
	if(!wakeup){
     ab4:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <wakeup>
     ab8:	90 91 31 38 	lds	r25, 0x3831	; 0x803831 <wakeup+0x1>
     abc:	89 2b       	or	r24, r25
     abe:	09 f0       	breq	.+2      	; 0xac2 <__vector_6+0x5e>
     ac0:	3d c0       	rjmp	.+122    	; 0xb3c <__vector_6+0xd8>
		get_v();
     ac2:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
		//低電圧再起動処理 起きてる時にやると一瞬7セグがちらつくので起きてない時(厳密には起きてるカウントがされていない時)にやる
		if(supply_v <= MIN_SUPPLY_V) {
     ac6:	60 91 29 38 	lds	r22, 0x3829	; 0x803829 <supply_v>
     aca:	70 91 2a 38 	lds	r23, 0x382A	; 0x80382a <supply_v+0x1>
     ace:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <supply_v+0x2>
     ad2:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <supply_v+0x3>
     ad6:	2a e9       	ldi	r18, 0x9A	; 154
     ad8:	39 e9       	ldi	r19, 0x99	; 153
     ada:	49 ed       	ldi	r20, 0xD9	; 217
     adc:	5f e3       	ldi	r21, 0x3F	; 63
     ade:	0e 94 50 06 	call	0xca0	; 0xca0 <__cmpsf2>
     ae2:	18 16       	cp	r1, r24
     ae4:	94 f0       	brlt	.+36     	; 0xb0a <__vector_6+0xa6>
			//停止処理
			//ウォッチドッグタイマを0.008秒で起動
			wdt_enable(0b00000001);//0.008秒の場合、右4桁をデータシート上の8CLKのレジスタ設定値にする
     ae6:	88 ed       	ldi	r24, 0xD8	; 216
     ae8:	a8 95       	wdr
     aea:	84 bf       	out	0x34, r24	; 52
     aec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
     af0:	81 60       	ori	r24, 0x01	; 1
     af2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
     af6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__RODATA_PM_OFFSET__+0x7f8101>
     afa:	81 fd       	sbrc	r24, 1
     afc:	fc cf       	rjmp	.-8      	; 0xaf6 <__vector_6+0x92>
     afe:	87 ea       	ldi	r24, 0xA7	; 167
     b00:	91 e6       	ldi	r25, 0x61	; 97
     b02:	01 97       	sbiw	r24, 0x01	; 1
     b04:	f1 f7       	brne	.-4      	; 0xb02 <__vector_6+0x9e>
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <__vector_6+0xa4>
     b08:	00 00       	nop
			//待機(しているあいだにウォッチドッグリセットがかかる)
			_delay_ms(100);
		}
		//高電圧放電処理
		if(supply_v >= MAX_SUPPLY_V) {
     b0a:	60 91 29 38 	lds	r22, 0x3829	; 0x803829 <supply_v>
     b0e:	70 91 2a 38 	lds	r23, 0x382A	; 0x80382a <supply_v+0x1>
     b12:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <supply_v+0x2>
     b16:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <supply_v+0x3>
     b1a:	26 e6       	ldi	r18, 0x66	; 102
     b1c:	36 e6       	ldi	r19, 0x66	; 102
     b1e:	46 ea       	ldi	r20, 0xA6	; 166
     b20:	50 e4       	ldi	r21, 0x40	; 64
     b22:	0e 94 a8 07 	call	0xf50	; 0xf50 <__gesf2>
     b26:	88 23       	and	r24, r24
     b28:	4c f0       	brlt	.+18     	; 0xb3c <__vector_6+0xd8>
			wakeup = 7000;
     b2a:	88 e5       	ldi	r24, 0x58	; 88
     b2c:	9b e1       	ldi	r25, 0x1B	; 27
     b2e:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <wakeup>
     b32:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <wakeup+0x1>
			discharge = 1;
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	80 93 23 38 	sts	0x3823, r24	; 0x803823 <discharge>
		}
	}

	return;
}
     b3c:	ff 91       	pop	r31
     b3e:	ef 91       	pop	r30
     b40:	bf 91       	pop	r27
     b42:	af 91       	pop	r26
     b44:	9f 91       	pop	r25
     b46:	8f 91       	pop	r24
     b48:	7f 91       	pop	r23
     b4a:	6f 91       	pop	r22
     b4c:	5f 91       	pop	r21
     b4e:	4f 91       	pop	r20
     b50:	3f 91       	pop	r19
     b52:	2f 91       	pop	r18
     b54:	0f 90       	pop	r0
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	0f 90       	pop	r0
     b5a:	1f 90       	pop	r1
     b5c:	18 95       	reti

00000b5e <main>:
int main(void) {

	//■□■――――――――――――――――――――――――――――――――――――■□■
	//		□ レジスタの設定
	//■□■――――――――――――――――――――――――――――――――――――■□■
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
     b5e:	88 ed       	ldi	r24, 0xD8	; 216
     b60:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLA = 0b00000000; //16/20 MHz内部オシレータ
     b62:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RODATA_PM_OFFSET__+0x7f8060>
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
     b66:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLB = 0b00000111; //16分周
     b68:	97 e0       	ldi	r25, 0x07	; 7
     b6a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>

	//入出力モード設定
	VPORTA_DIR = 0b11111111; //ポートA 
     b6e:	9f ef       	ldi	r25, 0xFF	; 255
     b70:	90 b9       	out	0x00, r25	; 0
	VPORTB_DIR = 0b11111100; //ポートB 
     b72:	2c ef       	ldi	r18, 0xFC	; 252
     b74:	24 b9       	out	0x04, r18	; 4
	VPORTC_DIR = 0b11111111; //ポートC
     b76:	98 b9       	out	0x08, r25	; 8

	//出力の初期化
	VPORTA_OUT = 0b00000000; //ポートA
     b78:	11 b8       	out	0x01, r1	; 1
	VPORTB_OUT = 0b00000000; //ポートB
     b7a:	15 b8       	out	0x05, r1	; 5
	VPORTC_OUT = 0b00000000; //ポートC
     b7c:	19 b8       	out	0x09, r1	; 9

	//焦電型赤外線センサー入力
	PORTB_PIN0CTRL = 0b00000001; //プルアップ無効 両方のエッジを検出する
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <__RODATA_PM_OFFSET__+0x7f8430>
	//タクトスイッチ入力
	PORTB_PIN1CTRL = 0b00001000; //プルアップ有効
     b84:	28 e0       	ldi	r18, 0x08	; 8
     b86:	20 93 31 04 	sts	0x0431, r18	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>

	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
     b8a:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_XOSC32KCTRLA = 0b00000001; //外付け水晶振動子 イネーブル
     b8c:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__RODATA_PM_OFFSET__+0x7f807c>
	
	//RTC設定
	RTC_INTCTRL = 0b00000010; //比較一致割り込み許可
     b90:	82 e0       	ldi	r24, 0x02	; 2
     b92:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__RODATA_PM_OFFSET__+0x7f8142>
	RTC_CLKSEL  = 0b00000010; //クロック選択 XOSC32Kからの32.768 kHz
     b96:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <__RODATA_PM_OFFSET__+0x7f8147>
	//STATUS.CTRLABUSYフラグが1の間待機
	while((RTC_STATUS & 0b00000001));
     b9a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7f8141>
     b9e:	80 fd       	sbrc	r24, 0
     ba0:	fc cf       	rjmp	.-8      	; 0xb9a <main+0x3c>
	RTC_CTRLA   = 0b11110001; //ｽﾀﾝﾊﾞｲ休止動作でもRTC許可 16384分周=0.5秒カウント RTC許可
     ba2:	81 ef       	ldi	r24, 0xF1	; 241
     ba4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__RODATA_PM_OFFSET__+0x7f8140>

	//割り込みたい間隔の秒数をx2-1して代入
	RTC_CMP = (uint16_t) 32400 * 2 - 1; //32400秒=540分=9時間 16ビット最大値以内で表せる極力長い時間を代入するとこの値になる
     ba8:	8f e1       	ldi	r24, 0x1F	; 31
     baa:	9d ef       	ldi	r25, 0xFD	; 253
     bac:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__RODATA_PM_OFFSET__+0x7f814c>
     bb0:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__RODATA_PM_OFFSET__+0x7f814d>
	RTC_CNT = 0;
     bb4:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
     bb8:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>

	//タイマーA
	TCA0_SINGLE_CTRLA = 0b00001101; //1024分周 動作許可
     bbc:	8d e0       	ldi	r24, 0x0D	; 13
     bbe:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
	TCA0_SINGLE_CTRLB = 0b00000000; //
     bc2:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
	TCA0_SINGLE_CMP0 = 1; // カウントがこの値に達したら割り込み(TCA0_CMP1_vect)が発生
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
     bce:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__RODATA_PM_OFFSET__+0x7f8a29>
	TCA0_SINGLE_INTCTRL = 0b00010000; //CMP0割り込み許可
     bd2:	80 e1       	ldi	r24, 0x10	; 16
     bd4:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__RODATA_PM_OFFSET__+0x7f8a0a>

	//ADC設定
	ADC0_CTRLA = 0b00000001; //ADC Enable
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	90 93 00 06 	sts	0x0600, r25	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
	ADC0_CTRLB = 0b00000000; //累積なし
     bde:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <__RODATA_PM_OFFSET__+0x7f8601>
	ADC0_CTRLC = 0b01010101; //VREF = VDD, プリスケーラ1/64
     be2:	95 e5       	ldi	r25, 0x55	; 85
     be4:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__RODATA_PM_OFFSET__+0x7f8602>
	VREF_CTRLA = 0b00010000; //内部基準電圧 1.1V
     be8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__RODATA_PM_OFFSET__+0x7f80a0>

	set_sleep_mode(SLEEP_MODE_STANDBY); //スリープモードを設定
     bec:	e0 e5       	ldi	r30, 0x50	; 80
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	89 7f       	andi	r24, 0xF9	; 249
     bf4:	82 60       	ori	r24, 0x02	; 2
     bf6:	80 83       	st	Z, r24
     bf8:	81 ee       	ldi	r24, 0xE1	; 225
     bfa:	94 e0       	ldi	r25, 0x04	; 4
     bfc:	01 97       	sbiw	r24, 0x01	; 1
     bfe:	f1 f7       	brne	.-4      	; 0xbfc <main+0x9e>
     c00:	00 c0       	rjmp	.+0      	; 0xc02 <main+0xa4>
     c02:	00 00       	nop

	//少し待機
	_delay_ms(5);

	sei(); //割り込み許可
     c04:	78 94       	sei
     c06:	23 c0       	rjmp	.+70     	; 0xc4e <main+0xf0>
	
	while (1) {

		//放電中ループ 起き続け3秒毎に電圧を計り下がっていたらブレイク
		while (discharge) {
			get_v();
     c08:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
			if(supply_v < (MAX_SUPPLY_V - 0.1)) {
     c0c:	60 91 29 38 	lds	r22, 0x3829	; 0x803829 <supply_v>
     c10:	70 91 2a 38 	lds	r23, 0x382A	; 0x80382a <supply_v+0x1>
     c14:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <supply_v+0x2>
     c18:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <supply_v+0x3>
     c1c:	23 e3       	ldi	r18, 0x33	; 51
     c1e:	33 e3       	ldi	r19, 0x33	; 51
     c20:	43 ea       	ldi	r20, 0xA3	; 163
     c22:	50 e4       	ldi	r21, 0x40	; 64
     c24:	0e 94 50 06 	call	0xca0	; 0xca0 <__cmpsf2>
     c28:	88 23       	and	r24, r24
     c2a:	3c f4       	brge	.+14     	; 0xc3a <main+0xdc>
				discharge = 0;
     c2c:	10 92 23 38 	sts	0x3823, r1	; 0x803823 <discharge>
				wakeup = 0;
     c30:	10 92 30 38 	sts	0x3830, r1	; 0x803830 <wakeup>
     c34:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <wakeup+0x1>
				break;
     c38:	0e c0       	rjmp	.+28     	; 0xc56 <main+0xf8>
			}
			sens_delay_ms(3000);
     c3a:	88 eb       	ldi	r24, 0xB8	; 184
     c3c:	9b e0       	ldi	r25, 0x0B	; 11
     c3e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <sens_delay_ms>
			wakeup = 7000;
     c42:	88 e5       	ldi	r24, 0x58	; 88
     c44:	9b e1       	ldi	r25, 0x1B	; 27
     c46:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <wakeup>
     c4a:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <wakeup+0x1>
	sei(); //割り込み許可
	
	while (1) {

		//放電中ループ 起き続け3秒毎に電圧を計り下がっていたらブレイク
		while (discharge) {
     c4e:	80 91 23 38 	lds	r24, 0x3823	; 0x803823 <discharge>
     c52:	81 11       	cpse	r24, r1
     c54:	d9 cf       	rjmp	.-78     	; 0xc08 <main+0xaa>
			}
			sens_delay_ms(3000);
			wakeup = 7000;
		}

		if(!wakeup) {
     c56:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <wakeup>
     c5a:	90 91 31 38 	lds	r25, 0x3831	; 0x803831 <wakeup+0x1>
     c5e:	89 2b       	or	r24, r25
     c60:	d1 f4       	brne	.+52     	; 0xc96 <main+0x138>
			//寝る準備
			seg_all_off();
     c62:	0e 94 03 02 	call	0x406	; 0x406 <seg_all_off>
			change_mode(MODE_CLOCK);
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	0e 94 0d 02 	call	0x41a	; 0x41a <change_mode>
			display_v = 0;
     c6c:	10 92 24 38 	sts	0x3824, r1	; 0x803824 <display_v>
			yet_v = 1;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <yet_v>
			s24count = 0;
     c76:	10 92 22 38 	sts	0x3822, r1	; 0x803822 <s24count>
			old_calc_min = old_calc_hour = 255;
     c7a:	8f ef       	ldi	r24, 0xFF	; 255
     c7c:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <old_calc_hour>
     c80:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <old_calc_min>
			//寝る
			sleep_mode();
     c84:	e0 e5       	ldi	r30, 0x50	; 80
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	81 60       	ori	r24, 0x01	; 1
     c8c:	80 83       	st	Z, r24
     c8e:	88 95       	sleep
     c90:	80 81       	ld	r24, Z
     c92:	8e 7f       	andi	r24, 0xFE	; 254
     c94:	80 83       	st	Z, r24
		}
		
		sens_delay_ms(5);
     c96:	85 e0       	ldi	r24, 0x05	; 5
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <sens_delay_ms>

	}
     c9e:	d7 cf       	rjmp	.-82     	; 0xc4e <main+0xf0>

00000ca0 <__cmpsf2>:
     ca0:	0e 94 33 07 	call	0xe66	; 0xe66 <__fp_cmp>
     ca4:	08 f4       	brcc	.+2      	; 0xca8 <__cmpsf2+0x8>
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	08 95       	ret

00000caa <__divsf3>:
     caa:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__divsf3x>
     cae:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__fp_round>
     cb2:	0e 94 67 07 	call	0xece	; 0xece <__fp_pscB>
     cb6:	58 f0       	brcs	.+22     	; 0xcce <__divsf3+0x24>
     cb8:	0e 94 60 07 	call	0xec0	; 0xec0 <__fp_pscA>
     cbc:	40 f0       	brcs	.+16     	; 0xcce <__divsf3+0x24>
     cbe:	29 f4       	brne	.+10     	; 0xcca <__divsf3+0x20>
     cc0:	5f 3f       	cpi	r21, 0xFF	; 255
     cc2:	29 f0       	breq	.+10     	; 0xcce <__divsf3+0x24>
     cc4:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_inf>
     cc8:	51 11       	cpse	r21, r1
     cca:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_szero>
     cce:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__fp_nan>

00000cd2 <__divsf3x>:
     cd2:	0e 94 7f 07 	call	0xefe	; 0xefe <__fp_split3>
     cd6:	68 f3       	brcs	.-38     	; 0xcb2 <__divsf3+0x8>

00000cd8 <__divsf3_pse>:
     cd8:	99 23       	and	r25, r25
     cda:	b1 f3       	breq	.-20     	; 0xcc8 <__divsf3+0x1e>
     cdc:	55 23       	and	r21, r21
     cde:	91 f3       	breq	.-28     	; 0xcc4 <__divsf3+0x1a>
     ce0:	95 1b       	sub	r25, r21
     ce2:	55 0b       	sbc	r21, r21
     ce4:	bb 27       	eor	r27, r27
     ce6:	aa 27       	eor	r26, r26
     ce8:	62 17       	cp	r22, r18
     cea:	73 07       	cpc	r23, r19
     cec:	84 07       	cpc	r24, r20
     cee:	38 f0       	brcs	.+14     	; 0xcfe <__divsf3_pse+0x26>
     cf0:	9f 5f       	subi	r25, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	22 0f       	add	r18, r18
     cf6:	33 1f       	adc	r19, r19
     cf8:	44 1f       	adc	r20, r20
     cfa:	aa 1f       	adc	r26, r26
     cfc:	a9 f3       	breq	.-22     	; 0xce8 <__divsf3_pse+0x10>
     cfe:	35 d0       	rcall	.+106    	; 0xd6a <__divsf3_pse+0x92>
     d00:	0e 2e       	mov	r0, r30
     d02:	3a f0       	brmi	.+14     	; 0xd12 <__divsf3_pse+0x3a>
     d04:	e0 e8       	ldi	r30, 0x80	; 128
     d06:	32 d0       	rcall	.+100    	; 0xd6c <__divsf3_pse+0x94>
     d08:	91 50       	subi	r25, 0x01	; 1
     d0a:	50 40       	sbci	r21, 0x00	; 0
     d0c:	e6 95       	lsr	r30
     d0e:	00 1c       	adc	r0, r0
     d10:	ca f7       	brpl	.-14     	; 0xd04 <__divsf3_pse+0x2c>
     d12:	2b d0       	rcall	.+86     	; 0xd6a <__divsf3_pse+0x92>
     d14:	fe 2f       	mov	r31, r30
     d16:	29 d0       	rcall	.+82     	; 0xd6a <__divsf3_pse+0x92>
     d18:	66 0f       	add	r22, r22
     d1a:	77 1f       	adc	r23, r23
     d1c:	88 1f       	adc	r24, r24
     d1e:	bb 1f       	adc	r27, r27
     d20:	26 17       	cp	r18, r22
     d22:	37 07       	cpc	r19, r23
     d24:	48 07       	cpc	r20, r24
     d26:	ab 07       	cpc	r26, r27
     d28:	b0 e8       	ldi	r27, 0x80	; 128
     d2a:	09 f0       	breq	.+2      	; 0xd2e <__divsf3_pse+0x56>
     d2c:	bb 0b       	sbc	r27, r27
     d2e:	80 2d       	mov	r24, r0
     d30:	bf 01       	movw	r22, r30
     d32:	ff 27       	eor	r31, r31
     d34:	93 58       	subi	r25, 0x83	; 131
     d36:	5f 4f       	sbci	r21, 0xFF	; 255
     d38:	3a f0       	brmi	.+14     	; 0xd48 <__divsf3_pse+0x70>
     d3a:	9e 3f       	cpi	r25, 0xFE	; 254
     d3c:	51 05       	cpc	r21, r1
     d3e:	78 f0       	brcs	.+30     	; 0xd5e <__divsf3_pse+0x86>
     d40:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_inf>
     d44:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_szero>
     d48:	5f 3f       	cpi	r21, 0xFF	; 255
     d4a:	e4 f3       	brlt	.-8      	; 0xd44 <__divsf3_pse+0x6c>
     d4c:	98 3e       	cpi	r25, 0xE8	; 232
     d4e:	d4 f3       	brlt	.-12     	; 0xd44 <__divsf3_pse+0x6c>
     d50:	86 95       	lsr	r24
     d52:	77 95       	ror	r23
     d54:	67 95       	ror	r22
     d56:	b7 95       	ror	r27
     d58:	f7 95       	ror	r31
     d5a:	9f 5f       	subi	r25, 0xFF	; 255
     d5c:	c9 f7       	brne	.-14     	; 0xd50 <__divsf3_pse+0x78>
     d5e:	88 0f       	add	r24, r24
     d60:	91 1d       	adc	r25, r1
     d62:	96 95       	lsr	r25
     d64:	87 95       	ror	r24
     d66:	97 f9       	bld	r25, 7
     d68:	08 95       	ret
     d6a:	e1 e0       	ldi	r30, 0x01	; 1
     d6c:	66 0f       	add	r22, r22
     d6e:	77 1f       	adc	r23, r23
     d70:	88 1f       	adc	r24, r24
     d72:	bb 1f       	adc	r27, r27
     d74:	62 17       	cp	r22, r18
     d76:	73 07       	cpc	r23, r19
     d78:	84 07       	cpc	r24, r20
     d7a:	ba 07       	cpc	r27, r26
     d7c:	20 f0       	brcs	.+8      	; 0xd86 <__divsf3_pse+0xae>
     d7e:	62 1b       	sub	r22, r18
     d80:	73 0b       	sbc	r23, r19
     d82:	84 0b       	sbc	r24, r20
     d84:	ba 0b       	sbc	r27, r26
     d86:	ee 1f       	adc	r30, r30
     d88:	88 f7       	brcc	.-30     	; 0xd6c <__divsf3_pse+0x94>
     d8a:	e0 95       	com	r30
     d8c:	08 95       	ret

00000d8e <__fixunssfsi>:
     d8e:	0e 94 87 07 	call	0xf0e	; 0xf0e <__fp_splitA>
     d92:	88 f0       	brcs	.+34     	; 0xdb6 <__fixunssfsi+0x28>
     d94:	9f 57       	subi	r25, 0x7F	; 127
     d96:	98 f0       	brcs	.+38     	; 0xdbe <__fixunssfsi+0x30>
     d98:	b9 2f       	mov	r27, r25
     d9a:	99 27       	eor	r25, r25
     d9c:	b7 51       	subi	r27, 0x17	; 23
     d9e:	b0 f0       	brcs	.+44     	; 0xdcc <__fixunssfsi+0x3e>
     da0:	e1 f0       	breq	.+56     	; 0xdda <__fixunssfsi+0x4c>
     da2:	66 0f       	add	r22, r22
     da4:	77 1f       	adc	r23, r23
     da6:	88 1f       	adc	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	1a f0       	brmi	.+6      	; 0xdb2 <__fixunssfsi+0x24>
     dac:	ba 95       	dec	r27
     dae:	c9 f7       	brne	.-14     	; 0xda2 <__fixunssfsi+0x14>
     db0:	14 c0       	rjmp	.+40     	; 0xdda <__fixunssfsi+0x4c>
     db2:	b1 30       	cpi	r27, 0x01	; 1
     db4:	91 f0       	breq	.+36     	; 0xdda <__fixunssfsi+0x4c>
     db6:	0e 94 a1 07 	call	0xf42	; 0xf42 <__fp_zero>
     dba:	b1 e0       	ldi	r27, 0x01	; 1
     dbc:	08 95       	ret
     dbe:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__fp_zero>
     dc2:	67 2f       	mov	r22, r23
     dc4:	78 2f       	mov	r23, r24
     dc6:	88 27       	eor	r24, r24
     dc8:	b8 5f       	subi	r27, 0xF8	; 248
     dca:	39 f0       	breq	.+14     	; 0xdda <__fixunssfsi+0x4c>
     dcc:	b9 3f       	cpi	r27, 0xF9	; 249
     dce:	cc f3       	brlt	.-14     	; 0xdc2 <__fixunssfsi+0x34>
     dd0:	86 95       	lsr	r24
     dd2:	77 95       	ror	r23
     dd4:	67 95       	ror	r22
     dd6:	b3 95       	inc	r27
     dd8:	d9 f7       	brne	.-10     	; 0xdd0 <__fixunssfsi+0x42>
     dda:	3e f4       	brtc	.+14     	; 0xdea <__fixunssfsi+0x5c>
     ddc:	90 95       	com	r25
     dde:	80 95       	com	r24
     de0:	70 95       	com	r23
     de2:	61 95       	neg	r22
     de4:	7f 4f       	sbci	r23, 0xFF	; 255
     de6:	8f 4f       	sbci	r24, 0xFF	; 255
     de8:	9f 4f       	sbci	r25, 0xFF	; 255
     dea:	08 95       	ret

00000dec <__floatunsisf>:
     dec:	e8 94       	clt
     dee:	09 c0       	rjmp	.+18     	; 0xe02 <__floatsisf+0x12>

00000df0 <__floatsisf>:
     df0:	97 fb       	bst	r25, 7
     df2:	3e f4       	brtc	.+14     	; 0xe02 <__floatsisf+0x12>
     df4:	90 95       	com	r25
     df6:	80 95       	com	r24
     df8:	70 95       	com	r23
     dfa:	61 95       	neg	r22
     dfc:	7f 4f       	sbci	r23, 0xFF	; 255
     dfe:	8f 4f       	sbci	r24, 0xFF	; 255
     e00:	9f 4f       	sbci	r25, 0xFF	; 255
     e02:	99 23       	and	r25, r25
     e04:	a9 f0       	breq	.+42     	; 0xe30 <__floatsisf+0x40>
     e06:	f9 2f       	mov	r31, r25
     e08:	96 e9       	ldi	r25, 0x96	; 150
     e0a:	bb 27       	eor	r27, r27
     e0c:	93 95       	inc	r25
     e0e:	f6 95       	lsr	r31
     e10:	87 95       	ror	r24
     e12:	77 95       	ror	r23
     e14:	67 95       	ror	r22
     e16:	b7 95       	ror	r27
     e18:	f1 11       	cpse	r31, r1
     e1a:	f8 cf       	rjmp	.-16     	; 0xe0c <__floatsisf+0x1c>
     e1c:	fa f4       	brpl	.+62     	; 0xe5c <__floatsisf+0x6c>
     e1e:	bb 0f       	add	r27, r27
     e20:	11 f4       	brne	.+4      	; 0xe26 <__floatsisf+0x36>
     e22:	60 ff       	sbrs	r22, 0
     e24:	1b c0       	rjmp	.+54     	; 0xe5c <__floatsisf+0x6c>
     e26:	6f 5f       	subi	r22, 0xFF	; 255
     e28:	7f 4f       	sbci	r23, 0xFF	; 255
     e2a:	8f 4f       	sbci	r24, 0xFF	; 255
     e2c:	9f 4f       	sbci	r25, 0xFF	; 255
     e2e:	16 c0       	rjmp	.+44     	; 0xe5c <__floatsisf+0x6c>
     e30:	88 23       	and	r24, r24
     e32:	11 f0       	breq	.+4      	; 0xe38 <__floatsisf+0x48>
     e34:	96 e9       	ldi	r25, 0x96	; 150
     e36:	11 c0       	rjmp	.+34     	; 0xe5a <__floatsisf+0x6a>
     e38:	77 23       	and	r23, r23
     e3a:	21 f0       	breq	.+8      	; 0xe44 <__floatsisf+0x54>
     e3c:	9e e8       	ldi	r25, 0x8E	; 142
     e3e:	87 2f       	mov	r24, r23
     e40:	76 2f       	mov	r23, r22
     e42:	05 c0       	rjmp	.+10     	; 0xe4e <__floatsisf+0x5e>
     e44:	66 23       	and	r22, r22
     e46:	71 f0       	breq	.+28     	; 0xe64 <__floatsisf+0x74>
     e48:	96 e8       	ldi	r25, 0x86	; 134
     e4a:	86 2f       	mov	r24, r22
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	2a f0       	brmi	.+10     	; 0xe5c <__floatsisf+0x6c>
     e52:	9a 95       	dec	r25
     e54:	66 0f       	add	r22, r22
     e56:	77 1f       	adc	r23, r23
     e58:	88 1f       	adc	r24, r24
     e5a:	da f7       	brpl	.-10     	; 0xe52 <__floatsisf+0x62>
     e5c:	88 0f       	add	r24, r24
     e5e:	96 95       	lsr	r25
     e60:	87 95       	ror	r24
     e62:	97 f9       	bld	r25, 7
     e64:	08 95       	ret

00000e66 <__fp_cmp>:
     e66:	99 0f       	add	r25, r25
     e68:	00 08       	sbc	r0, r0
     e6a:	55 0f       	add	r21, r21
     e6c:	aa 0b       	sbc	r26, r26
     e6e:	e0 e8       	ldi	r30, 0x80	; 128
     e70:	fe ef       	ldi	r31, 0xFE	; 254
     e72:	16 16       	cp	r1, r22
     e74:	17 06       	cpc	r1, r23
     e76:	e8 07       	cpc	r30, r24
     e78:	f9 07       	cpc	r31, r25
     e7a:	c0 f0       	brcs	.+48     	; 0xeac <__fp_cmp+0x46>
     e7c:	12 16       	cp	r1, r18
     e7e:	13 06       	cpc	r1, r19
     e80:	e4 07       	cpc	r30, r20
     e82:	f5 07       	cpc	r31, r21
     e84:	98 f0       	brcs	.+38     	; 0xeac <__fp_cmp+0x46>
     e86:	62 1b       	sub	r22, r18
     e88:	73 0b       	sbc	r23, r19
     e8a:	84 0b       	sbc	r24, r20
     e8c:	95 0b       	sbc	r25, r21
     e8e:	39 f4       	brne	.+14     	; 0xe9e <__fp_cmp+0x38>
     e90:	0a 26       	eor	r0, r26
     e92:	61 f0       	breq	.+24     	; 0xeac <__fp_cmp+0x46>
     e94:	23 2b       	or	r18, r19
     e96:	24 2b       	or	r18, r20
     e98:	25 2b       	or	r18, r21
     e9a:	21 f4       	brne	.+8      	; 0xea4 <__fp_cmp+0x3e>
     e9c:	08 95       	ret
     e9e:	0a 26       	eor	r0, r26
     ea0:	09 f4       	brne	.+2      	; 0xea4 <__fp_cmp+0x3e>
     ea2:	a1 40       	sbci	r26, 0x01	; 1
     ea4:	a6 95       	lsr	r26
     ea6:	8f ef       	ldi	r24, 0xFF	; 255
     ea8:	81 1d       	adc	r24, r1
     eaa:	81 1d       	adc	r24, r1
     eac:	08 95       	ret

00000eae <__fp_inf>:
     eae:	97 f9       	bld	r25, 7
     eb0:	9f 67       	ori	r25, 0x7F	; 127
     eb2:	80 e8       	ldi	r24, 0x80	; 128
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	08 95       	ret

00000eba <__fp_nan>:
     eba:	9f ef       	ldi	r25, 0xFF	; 255
     ebc:	80 ec       	ldi	r24, 0xC0	; 192
     ebe:	08 95       	ret

00000ec0 <__fp_pscA>:
     ec0:	00 24       	eor	r0, r0
     ec2:	0a 94       	dec	r0
     ec4:	16 16       	cp	r1, r22
     ec6:	17 06       	cpc	r1, r23
     ec8:	18 06       	cpc	r1, r24
     eca:	09 06       	cpc	r0, r25
     ecc:	08 95       	ret

00000ece <__fp_pscB>:
     ece:	00 24       	eor	r0, r0
     ed0:	0a 94       	dec	r0
     ed2:	12 16       	cp	r1, r18
     ed4:	13 06       	cpc	r1, r19
     ed6:	14 06       	cpc	r1, r20
     ed8:	05 06       	cpc	r0, r21
     eda:	08 95       	ret

00000edc <__fp_round>:
     edc:	09 2e       	mov	r0, r25
     ede:	03 94       	inc	r0
     ee0:	00 0c       	add	r0, r0
     ee2:	11 f4       	brne	.+4      	; 0xee8 <__fp_round+0xc>
     ee4:	88 23       	and	r24, r24
     ee6:	52 f0       	brmi	.+20     	; 0xefc <__fp_round+0x20>
     ee8:	bb 0f       	add	r27, r27
     eea:	40 f4       	brcc	.+16     	; 0xefc <__fp_round+0x20>
     eec:	bf 2b       	or	r27, r31
     eee:	11 f4       	brne	.+4      	; 0xef4 <__fp_round+0x18>
     ef0:	60 ff       	sbrs	r22, 0
     ef2:	04 c0       	rjmp	.+8      	; 0xefc <__fp_round+0x20>
     ef4:	6f 5f       	subi	r22, 0xFF	; 255
     ef6:	7f 4f       	sbci	r23, 0xFF	; 255
     ef8:	8f 4f       	sbci	r24, 0xFF	; 255
     efa:	9f 4f       	sbci	r25, 0xFF	; 255
     efc:	08 95       	ret

00000efe <__fp_split3>:
     efe:	57 fd       	sbrc	r21, 7
     f00:	90 58       	subi	r25, 0x80	; 128
     f02:	44 0f       	add	r20, r20
     f04:	55 1f       	adc	r21, r21
     f06:	59 f0       	breq	.+22     	; 0xf1e <__fp_splitA+0x10>
     f08:	5f 3f       	cpi	r21, 0xFF	; 255
     f0a:	71 f0       	breq	.+28     	; 0xf28 <__fp_splitA+0x1a>
     f0c:	47 95       	ror	r20

00000f0e <__fp_splitA>:
     f0e:	88 0f       	add	r24, r24
     f10:	97 fb       	bst	r25, 7
     f12:	99 1f       	adc	r25, r25
     f14:	61 f0       	breq	.+24     	; 0xf2e <__fp_splitA+0x20>
     f16:	9f 3f       	cpi	r25, 0xFF	; 255
     f18:	79 f0       	breq	.+30     	; 0xf38 <__fp_splitA+0x2a>
     f1a:	87 95       	ror	r24
     f1c:	08 95       	ret
     f1e:	12 16       	cp	r1, r18
     f20:	13 06       	cpc	r1, r19
     f22:	14 06       	cpc	r1, r20
     f24:	55 1f       	adc	r21, r21
     f26:	f2 cf       	rjmp	.-28     	; 0xf0c <__fp_split3+0xe>
     f28:	46 95       	lsr	r20
     f2a:	f1 df       	rcall	.-30     	; 0xf0e <__fp_splitA>
     f2c:	08 c0       	rjmp	.+16     	; 0xf3e <__fp_splitA+0x30>
     f2e:	16 16       	cp	r1, r22
     f30:	17 06       	cpc	r1, r23
     f32:	18 06       	cpc	r1, r24
     f34:	99 1f       	adc	r25, r25
     f36:	f1 cf       	rjmp	.-30     	; 0xf1a <__fp_splitA+0xc>
     f38:	86 95       	lsr	r24
     f3a:	71 05       	cpc	r23, r1
     f3c:	61 05       	cpc	r22, r1
     f3e:	08 94       	sec
     f40:	08 95       	ret

00000f42 <__fp_zero>:
     f42:	e8 94       	clt

00000f44 <__fp_szero>:
     f44:	bb 27       	eor	r27, r27
     f46:	66 27       	eor	r22, r22
     f48:	77 27       	eor	r23, r23
     f4a:	cb 01       	movw	r24, r22
     f4c:	97 f9       	bld	r25, 7
     f4e:	08 95       	ret

00000f50 <__gesf2>:
     f50:	0e 94 33 07 	call	0xe66	; 0xe66 <__fp_cmp>
     f54:	08 f4       	brcc	.+2      	; 0xf58 <__gesf2+0x8>
     f56:	8f ef       	ldi	r24, 0xFF	; 255
     f58:	08 95       	ret

00000f5a <__mulsf3>:
     f5a:	0e 94 c0 07 	call	0xf80	; 0xf80 <__mulsf3x>
     f5e:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__fp_round>
     f62:	0e 94 60 07 	call	0xec0	; 0xec0 <__fp_pscA>
     f66:	38 f0       	brcs	.+14     	; 0xf76 <__mulsf3+0x1c>
     f68:	0e 94 67 07 	call	0xece	; 0xece <__fp_pscB>
     f6c:	20 f0       	brcs	.+8      	; 0xf76 <__mulsf3+0x1c>
     f6e:	95 23       	and	r25, r21
     f70:	11 f0       	breq	.+4      	; 0xf76 <__mulsf3+0x1c>
     f72:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_inf>
     f76:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__fp_nan>
     f7a:	11 24       	eor	r1, r1
     f7c:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_szero>

00000f80 <__mulsf3x>:
     f80:	0e 94 7f 07 	call	0xefe	; 0xefe <__fp_split3>
     f84:	70 f3       	brcs	.-36     	; 0xf62 <__mulsf3+0x8>

00000f86 <__mulsf3_pse>:
     f86:	95 9f       	mul	r25, r21
     f88:	c1 f3       	breq	.-16     	; 0xf7a <__mulsf3+0x20>
     f8a:	95 0f       	add	r25, r21
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	55 1f       	adc	r21, r21
     f90:	62 9f       	mul	r22, r18
     f92:	f0 01       	movw	r30, r0
     f94:	72 9f       	mul	r23, r18
     f96:	bb 27       	eor	r27, r27
     f98:	f0 0d       	add	r31, r0
     f9a:	b1 1d       	adc	r27, r1
     f9c:	63 9f       	mul	r22, r19
     f9e:	aa 27       	eor	r26, r26
     fa0:	f0 0d       	add	r31, r0
     fa2:	b1 1d       	adc	r27, r1
     fa4:	aa 1f       	adc	r26, r26
     fa6:	64 9f       	mul	r22, r20
     fa8:	66 27       	eor	r22, r22
     faa:	b0 0d       	add	r27, r0
     fac:	a1 1d       	adc	r26, r1
     fae:	66 1f       	adc	r22, r22
     fb0:	82 9f       	mul	r24, r18
     fb2:	22 27       	eor	r18, r18
     fb4:	b0 0d       	add	r27, r0
     fb6:	a1 1d       	adc	r26, r1
     fb8:	62 1f       	adc	r22, r18
     fba:	73 9f       	mul	r23, r19
     fbc:	b0 0d       	add	r27, r0
     fbe:	a1 1d       	adc	r26, r1
     fc0:	62 1f       	adc	r22, r18
     fc2:	83 9f       	mul	r24, r19
     fc4:	a0 0d       	add	r26, r0
     fc6:	61 1d       	adc	r22, r1
     fc8:	22 1f       	adc	r18, r18
     fca:	74 9f       	mul	r23, r20
     fcc:	33 27       	eor	r19, r19
     fce:	a0 0d       	add	r26, r0
     fd0:	61 1d       	adc	r22, r1
     fd2:	23 1f       	adc	r18, r19
     fd4:	84 9f       	mul	r24, r20
     fd6:	60 0d       	add	r22, r0
     fd8:	21 1d       	adc	r18, r1
     fda:	82 2f       	mov	r24, r18
     fdc:	76 2f       	mov	r23, r22
     fde:	6a 2f       	mov	r22, r26
     fe0:	11 24       	eor	r1, r1
     fe2:	9f 57       	subi	r25, 0x7F	; 127
     fe4:	50 40       	sbci	r21, 0x00	; 0
     fe6:	9a f0       	brmi	.+38     	; 0x100e <__mulsf3_pse+0x88>
     fe8:	f1 f0       	breq	.+60     	; 0x1026 <__mulsf3_pse+0xa0>
     fea:	88 23       	and	r24, r24
     fec:	4a f0       	brmi	.+18     	; 0x1000 <__mulsf3_pse+0x7a>
     fee:	ee 0f       	add	r30, r30
     ff0:	ff 1f       	adc	r31, r31
     ff2:	bb 1f       	adc	r27, r27
     ff4:	66 1f       	adc	r22, r22
     ff6:	77 1f       	adc	r23, r23
     ff8:	88 1f       	adc	r24, r24
     ffa:	91 50       	subi	r25, 0x01	; 1
     ffc:	50 40       	sbci	r21, 0x00	; 0
     ffe:	a9 f7       	brne	.-22     	; 0xfea <__mulsf3_pse+0x64>
    1000:	9e 3f       	cpi	r25, 0xFE	; 254
    1002:	51 05       	cpc	r21, r1
    1004:	80 f0       	brcs	.+32     	; 0x1026 <__mulsf3_pse+0xa0>
    1006:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_inf>
    100a:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_szero>
    100e:	5f 3f       	cpi	r21, 0xFF	; 255
    1010:	e4 f3       	brlt	.-8      	; 0x100a <__mulsf3_pse+0x84>
    1012:	98 3e       	cpi	r25, 0xE8	; 232
    1014:	d4 f3       	brlt	.-12     	; 0x100a <__mulsf3_pse+0x84>
    1016:	86 95       	lsr	r24
    1018:	77 95       	ror	r23
    101a:	67 95       	ror	r22
    101c:	b7 95       	ror	r27
    101e:	f7 95       	ror	r31
    1020:	e7 95       	ror	r30
    1022:	9f 5f       	subi	r25, 0xFF	; 255
    1024:	c1 f7       	brne	.-16     	; 0x1016 <__mulsf3_pse+0x90>
    1026:	fe 2b       	or	r31, r30
    1028:	88 0f       	add	r24, r24
    102a:	91 1d       	adc	r25, r1
    102c:	96 95       	lsr	r25
    102e:	87 95       	ror	r24
    1030:	97 f9       	bld	r25, 7
    1032:	08 95       	ret

00001034 <__udivmodhi4>:
    1034:	aa 1b       	sub	r26, r26
    1036:	bb 1b       	sub	r27, r27
    1038:	51 e1       	ldi	r21, 0x11	; 17
    103a:	07 c0       	rjmp	.+14     	; 0x104a <__udivmodhi4_ep>

0000103c <__udivmodhi4_loop>:
    103c:	aa 1f       	adc	r26, r26
    103e:	bb 1f       	adc	r27, r27
    1040:	a6 17       	cp	r26, r22
    1042:	b7 07       	cpc	r27, r23
    1044:	10 f0       	brcs	.+4      	; 0x104a <__udivmodhi4_ep>
    1046:	a6 1b       	sub	r26, r22
    1048:	b7 0b       	sbc	r27, r23

0000104a <__udivmodhi4_ep>:
    104a:	88 1f       	adc	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	5a 95       	dec	r21
    1050:	a9 f7       	brne	.-22     	; 0x103c <__udivmodhi4_loop>
    1052:	80 95       	com	r24
    1054:	90 95       	com	r25
    1056:	bc 01       	movw	r22, r24
    1058:	cd 01       	movw	r24, r26
    105a:	08 95       	ret

0000105c <__umulhisi3>:
    105c:	a2 9f       	mul	r26, r18
    105e:	b0 01       	movw	r22, r0
    1060:	b3 9f       	mul	r27, r19
    1062:	c0 01       	movw	r24, r0
    1064:	a3 9f       	mul	r26, r19
    1066:	70 0d       	add	r23, r0
    1068:	81 1d       	adc	r24, r1
    106a:	11 24       	eor	r1, r1
    106c:	91 1d       	adc	r25, r1
    106e:	b2 9f       	mul	r27, r18
    1070:	70 0d       	add	r23, r0
    1072:	81 1d       	adc	r24, r1
    1074:	11 24       	eor	r1, r1
    1076:	91 1d       	adc	r25, r1
    1078:	08 95       	ret

0000107a <_exit>:
    107a:	f8 94       	cli

0000107c <__stop_program>:
    107c:	ff cf       	rjmp	.-2      	; 0x107c <__stop_program>
