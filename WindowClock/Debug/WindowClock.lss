
WindowClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00803800  000004c0  00000554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080380c  0080380c  00000560  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e49  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001aa7  00000000  00000000  00002469  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005fc  00000000  00000000  00003f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  0000450c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cfa  00000000  00000000  00004628  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003da  00000000  00000000  00005322  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000056fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_4>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_6>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_10>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
  88:	18 e3       	ldi	r17, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	e0 ec       	ldi	r30, 0xC0	; 192
  90:	f4 e0       	ldi	r31, 0x04	; 4
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ac 30       	cpi	r26, 0x0C	; 12
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	28 e3       	ldi	r18, 0x38	; 56
  a0:	ac e0       	ldi	r26, 0x0C	; 12
  a2:	b8 e3       	ldi	r27, 0x38	; 56
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a5 31       	cpi	r26, 0x15	; 21
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 bf 01 	call	0x37e	; 0x37e <main>
  b2:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <seg_all_off>:

//7セグをすべて消灯する関数
void seg_all_off(void) {

	//他のセルの消灯ドットを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	VPORTA_OUT = VPORTA_OUT & 0b00000001;
  ba:	81 b1       	in	r24, 0x01	; 1
  bc:	81 70       	andi	r24, 0x01	; 1
  be:	81 b9       	out	0x01, r24	; 1
	VPORTC_OUT = VPORTC_OUT & 0b11111110;
  c0:	89 b1       	in	r24, 0x09	; 9
  c2:	8e 7f       	andi	r24, 0xFE	; 254
  c4:	89 b9       	out	0x09, r24	; 9
	//ダイナミック点灯用トランジスタも全てOFF
	VPORTB_OUT = VPORTB_OUT & 0b11001111;
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	8f 7c       	andi	r24, 0xCF	; 207
  ca:	85 b9       	out	0x05, r24	; 5
	VPORTC_OUT = VPORTC_OUT & 0b11110001;
  cc:	89 b1       	in	r24, 0x09	; 9
  ce:	81 7f       	andi	r24, 0xF1	; 241
  d0:	89 b9       	out	0x09, r24	; 9
  d2:	08 95       	ret

000000d4 <change_mode>:
}

//モードを切り替える関数
//引数に0を指定した場合は次の定数のモードへ 定数を指定した場合はそのモードへ
void change_mode (uint8_t cmode) {
	if(cmode) {
  d4:	88 23       	and	r24, r24
  d6:	19 f0       	breq	.+6      	; 0xde <change_mode+0xa>
		mode = cmode;
  d8:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
  dc:	08 95       	ret
	}else if(mode == MODE_MIN_SET) {
  de:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
  e2:	83 30       	cpi	r24, 0x03	; 3
  e4:	21 f4       	brne	.+8      	; 0xee <change_mode+0x1a>
		mode = MODE_CLOCK;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
  ec:	08 95       	ret
	}else{
		mode++;
  ee:	8f 5f       	subi	r24, 0xFF	; 255
  f0:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
  f4:	08 95       	ret

000000f6 <__vector_10>:
	}
}

//TCA割り込み
ISR (TCA0_CMP0_vect) {
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	4f 93       	push	r20
 10a:	5f 93       	push	r21
 10c:	6f 93       	push	r22
 10e:	7f 93       	push	r23
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	af 93       	push	r26
 116:	bf 93       	push	r27
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31

	//wakeupが0ならセグをすべて消灯してそれ以外を実行しない
	//メインループのseg_all_off関数とsleep_mode関数の間にこの割り込みが入り中途半端に7セグが点灯した状態でスリープするのを防ぐ記述
	if(!wakeup) {
 120:	80 91 11 38 	lds	r24, 0x3811	; 0x803811 <wakeup>
 124:	90 91 12 38 	lds	r25, 0x3812	; 0x803812 <wakeup+0x1>
 128:	89 2b       	or	r24, r25
 12a:	19 f4       	brne	.+6      	; 0x132 <__EEPROM_REGION_LENGTH__+0x32>
		seg_all_off();
 12c:	0e 94 5d 00 	call	0xba	; 0xba <seg_all_off>
		return;
 130:	aa c0       	rjmp	.+340    	; 0x286 <__EEPROM_REGION_LENGTH__+0x186>
	}

	TCA0_SINGLE_CNT = 0;//カウントリセット
 132:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__RODATA_PM_OFFSET__+0x7f8a20>
 136:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__RODATA_PM_OFFSET__+0x7f8a21>
	TCA0_SINGLE_INTFLAGS = 0b00010000; //割り込み要求フラグを解除
 13a:	80 e1       	ldi	r24, 0x10	; 16
 13c:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>

	static uint8_t sel = 0;
	uint8_t dig1, dig2, dig3, dig4, dig5;

	dig1   = seg[min % 10];
 140:	c0 91 14 38 	lds	r28, 0x3814	; 0x803814 <min>
 144:	ed ec       	ldi	r30, 0xCD	; 205
 146:	ce 9f       	mul	r28, r30
 148:	a1 2d       	mov	r26, r1
 14a:	11 24       	eor	r1, r1
 14c:	a6 95       	lsr	r26
 14e:	a6 95       	lsr	r26
 150:	a6 95       	lsr	r26
 152:	9a 2f       	mov	r25, r26
 154:	99 0f       	add	r25, r25
 156:	89 2f       	mov	r24, r25
 158:	88 0f       	add	r24, r24
 15a:	88 0f       	add	r24, r24
 15c:	89 0f       	add	r24, r25
 15e:	c8 1b       	sub	r28, r24
 160:	d0 e0       	ldi	r29, 0x00	; 0
 162:	cf 5f       	subi	r28, 0xFF	; 255
 164:	d7 4c       	sbci	r29, 0xC7	; 199
 166:	c8 81       	ld	r28, Y
	dig2   = seg[(min / 10) % 10];
 168:	ae 9f       	mul	r26, r30
 16a:	81 2d       	mov	r24, r1
 16c:	11 24       	eor	r1, r1
 16e:	86 95       	lsr	r24
 170:	86 95       	lsr	r24
 172:	86 95       	lsr	r24
 174:	88 0f       	add	r24, r24
 176:	98 2f       	mov	r25, r24
 178:	99 0f       	add	r25, r25
 17a:	99 0f       	add	r25, r25
 17c:	89 0f       	add	r24, r25
 17e:	a8 1b       	sub	r26, r24
 180:	b0 e0       	ldi	r27, 0x00	; 0
 182:	af 5f       	subi	r26, 0xFF	; 255
 184:	b7 4c       	sbci	r27, 0xC7	; 199
 186:	dc 91       	ld	r29, X
	dig3   = 0b00000110;
	dig4   = seg[hour % 10];
 188:	a0 91 13 38 	lds	r26, 0x3813	; 0x803813 <hour>
 18c:	ae 9f       	mul	r26, r30
 18e:	81 2d       	mov	r24, r1
 190:	11 24       	eor	r1, r1
 192:	86 95       	lsr	r24
 194:	86 95       	lsr	r24
 196:	86 95       	lsr	r24
 198:	28 2f       	mov	r18, r24
 19a:	22 0f       	add	r18, r18
 19c:	92 2f       	mov	r25, r18
 19e:	99 0f       	add	r25, r25
 1a0:	99 0f       	add	r25, r25
 1a2:	92 0f       	add	r25, r18
 1a4:	a9 1b       	sub	r26, r25
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
 1a8:	af 5f       	subi	r26, 0xFF	; 255
 1aa:	b7 4c       	sbci	r27, 0xC7	; 199
 1ac:	0c 91       	ld	r16, X

	//dig5のみ0なら不点灯にする(ゼロサプレス)
	uint8_t zerocheck = (hour / 10) % 10;
 1ae:	8e 9f       	mul	r24, r30
 1b0:	e1 2d       	mov	r30, r1
 1b2:	11 24       	eor	r1, r1
 1b4:	e6 95       	lsr	r30
 1b6:	e6 95       	lsr	r30
 1b8:	e6 95       	lsr	r30
 1ba:	ee 0f       	add	r30, r30
 1bc:	9e 2f       	mov	r25, r30
 1be:	99 0f       	add	r25, r25
 1c0:	99 0f       	add	r25, r25
 1c2:	e9 0f       	add	r30, r25
 1c4:	8e 1b       	sub	r24, r30
	if(zerocheck == 0) {
 1c6:	31 f0       	breq	.+12     	; 0x1d4 <__EEPROM_REGION_LENGTH__+0xd4>
		dig5 = 0b00000000;
	}else{
		dig5   = seg[zerocheck];
 1c8:	e8 2f       	mov	r30, r24
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	ef 5f       	subi	r30, 0xFF	; 255
 1ce:	f7 4c       	sbci	r31, 0xC7	; 199
 1d0:	10 81       	ld	r17, Z
 1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <__EEPROM_REGION_LENGTH__+0xd6>
	dig4   = seg[hour % 10];

	//dig5のみ0なら不点灯にする(ゼロサプレス)
	uint8_t zerocheck = (hour / 10) % 10;
	if(zerocheck == 0) {
		dig5 = 0b00000000;
 1d4:	10 e0       	ldi	r17, 0x00	; 0
	}else{
		dig5   = seg[zerocheck];
	}

	//他のセルの消灯ドットを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();
 1d6:	0e 94 5d 00 	call	0xba	; 0xba <seg_all_off>

	switch ( sel ) {
 1da:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <__data_end>
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	a9 f0       	breq	.+42     	; 0x20c <__EEPROM_REGION_LENGTH__+0x10c>
 1e2:	28 f4       	brcc	.+10     	; 0x1ee <__EEPROM_REGION_LENGTH__+0xee>
 1e4:	88 23       	and	r24, r24
 1e6:	41 f0       	breq	.+16     	; 0x1f8 <__EEPROM_REGION_LENGTH__+0xf8>
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	59 f0       	breq	.+22     	; 0x202 <__EEPROM_REGION_LENGTH__+0x102>
 1ec:	1e c0       	rjmp	.+60     	; 0x22a <__EEPROM_REGION_LENGTH__+0x12a>
 1ee:	83 30       	cpi	r24, 0x03	; 3
 1f0:	99 f0       	breq	.+38     	; 0x218 <__EEPROM_REGION_LENGTH__+0x118>
 1f2:	84 30       	cpi	r24, 0x04	; 4
 1f4:	b1 f0       	breq	.+44     	; 0x222 <__EEPROM_REGION_LENGTH__+0x122>
 1f6:	19 c0       	rjmp	.+50     	; 0x22a <__EEPROM_REGION_LENGTH__+0x12a>

		case 0:
		VPORTB_OUT = VPORTB_OUT | 0b00010000;
 1f8:	85 b1       	in	r24, 0x05	; 5
 1fa:	80 61       	ori	r24, 0x10	; 16
 1fc:	85 b9       	out	0x05, r24	; 5
		//VPORTA_OUT = (dig1  & 0b01111111) | (PORTD & 0b10000000);//PD7に影響を与えないようマスク処理をしてPD0～6に値を代入
		VPORTA_OUT = dig1;
 1fe:	c1 b9       	out	0x01, r28	; 1
		break;
 200:	14 c0       	rjmp	.+40     	; 0x22a <__EEPROM_REGION_LENGTH__+0x12a>

		case 1:
		VPORTC_OUT = VPORTC_OUT | 0b00001000;
 202:	89 b1       	in	r24, 0x09	; 9
 204:	88 60       	ori	r24, 0x08	; 8
 206:	89 b9       	out	0x09, r24	; 9
		VPORTA_OUT = dig2;
 208:	d1 b9       	out	0x01, r29	; 1
		break;
 20a:	0f c0       	rjmp	.+30     	; 0x22a <__EEPROM_REGION_LENGTH__+0x12a>

		case 2:
		VPORTB_OUT = VPORTB_OUT | 0b00100000;
 20c:	85 b1       	in	r24, 0x05	; 5
 20e:	80 62       	ori	r24, 0x20	; 32
 210:	85 b9       	out	0x05, r24	; 5
		VPORTA_OUT = dig3;
 212:	86 e0       	ldi	r24, 0x06	; 6
 214:	81 b9       	out	0x01, r24	; 1
		break;
 216:	09 c0       	rjmp	.+18     	; 0x22a <__EEPROM_REGION_LENGTH__+0x12a>

		case 3:
		VPORTC_OUT = VPORTC_OUT | 0b00000100;
 218:	89 b1       	in	r24, 0x09	; 9
 21a:	84 60       	ori	r24, 0x04	; 4
 21c:	89 b9       	out	0x09, r24	; 9
		VPORTA_OUT = dig4;
 21e:	01 b9       	out	0x01, r16	; 1
		break;
 220:	04 c0       	rjmp	.+8      	; 0x22a <__EEPROM_REGION_LENGTH__+0x12a>

		case 4:
		VPORTC_OUT = VPORTC_OUT | 0b00000010;
 222:	89 b1       	in	r24, 0x09	; 9
 224:	82 60       	ori	r24, 0x02	; 2
 226:	89 b9       	out	0x09, r24	; 9
		VPORTA_OUT = dig5;
 228:	11 b9       	out	0x01, r17	; 1
		break;

	}

	//5回に1回やること
	if ( ++sel == 5 ) {
 22a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <__data_end>
 22e:	8f 5f       	subi	r24, 0xFF	; 255
 230:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <__data_end>
 234:	85 30       	cpi	r24, 0x05	; 5
 236:	39 f5       	brne	.+78     	; 0x286 <__EEPROM_REGION_LENGTH__+0x186>
		//selの0~5トグル動作
		sel = 0;
 238:	10 92 0c 38 	sts	0x380C, r1	; 0x80380c <__data_end>

		//スリープへ向けwakeupを減らす
		if(wakeup) wakeup--;
 23c:	80 91 11 38 	lds	r24, 0x3811	; 0x803811 <wakeup>
 240:	90 91 12 38 	lds	r25, 0x3812	; 0x803812 <wakeup+0x1>
 244:	00 97       	sbiw	r24, 0x00	; 0
 246:	29 f0       	breq	.+10     	; 0x252 <__EEPROM_REGION_LENGTH__+0x152>
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <wakeup>
 24e:	90 93 12 38 	sts	0x3812, r25	; 0x803812 <wakeup+0x1>

		//タクトスイッチが長押しされている場合、長押しカウントを加算
		if(VPORTB_IN & PIN1_bm) {
 252:	31 9b       	sbis	0x06, 1	; 6
 254:	05 c0       	rjmp	.+10     	; 0x260 <__EEPROM_REGION_LENGTH__+0x160>
			long_push = 0;
 256:	10 92 0f 38 	sts	0x380F, r1	; 0x80380f <long_push>
 25a:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <long_push+0x1>
 25e:	13 c0       	rjmp	.+38     	; 0x286 <__EEPROM_REGION_LENGTH__+0x186>
		}else{
			if(++long_push > 300) {
 260:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <long_push>
 264:	90 91 10 38 	lds	r25, 0x3810	; 0x803810 <long_push+0x1>
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	80 93 0f 38 	sts	0x380F, r24	; 0x80380f <long_push>
 26e:	90 93 10 38 	sts	0x3810, r25	; 0x803810 <long_push+0x1>
 272:	8d 32       	cpi	r24, 0x2D	; 45
 274:	91 40       	sbci	r25, 0x01	; 1
 276:	38 f0       	brcs	.+14     	; 0x286 <__EEPROM_REGION_LENGTH__+0x186>
				long_push = 0;
 278:	10 92 0f 38 	sts	0x380F, r1	; 0x80380f <long_push>
 27c:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <long_push+0x1>
				change_mode(0);
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 6a 00 	call	0xd4	; 0xd4 <change_mode>
		}
	}



}
 286:	ff 91       	pop	r31
 288:	ef 91       	pop	r30
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	bf 91       	pop	r27
 290:	af 91       	pop	r26
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	7f 91       	pop	r23
 298:	6f 91       	pop	r22
 29a:	5f 91       	pop	r21
 29c:	4f 91       	pop	r20
 29e:	3f 91       	pop	r19
 2a0:	2f 91       	pop	r18
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	0f 90       	pop	r0
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	0f 90       	pop	r0
 2ac:	1f 90       	pop	r1
 2ae:	18 95       	reti

000002b0 <__vector_4>:

//外部割り込み PB0が変化したら 両方のエッジを検出する(片方エッジにしたいがそうするとなぜかスタンバイから復帰しない)
ISR(PORTB_PORT_vect) {
 2b0:	1f 92       	push	r1
 2b2:	0f 92       	push	r0
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	0f 92       	push	r0
 2b8:	11 24       	eor	r1, r1
 2ba:	8f 93       	push	r24
 2bc:	9f 93       	push	r25
 2be:	ef 93       	push	r30
 2c0:	ff 93       	push	r31
	
	PORTB_INTFLAGS = PORTB_INTFLAGS | 0b00000010; //割り込み要求フラグ解除
 2c2:	e9 e2       	ldi	r30, 0x29	; 41
 2c4:	f4 e0       	ldi	r31, 0x04	; 4
 2c6:	80 81       	ld	r24, Z
 2c8:	82 60       	ori	r24, 0x02	; 2
 2ca:	80 83       	st	Z, r24

	//タクトスイッチが押されたら(PB1がLowだったら)
	if(!(VPORTB_IN & PIN1_bm)) {
 2cc:	31 99       	sbic	0x06, 1	; 6
 2ce:	15 c0       	rjmp	.+42     	; 0x2fa <__vector_4+0x4a>
		
		wakeup = 1600;
 2d0:	80 e4       	ldi	r24, 0x40	; 64
 2d2:	96 e0       	ldi	r25, 0x06	; 6
 2d4:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <wakeup>
 2d8:	90 93 12 38 	sts	0x3812, r25	; 0x803812 <wakeup+0x1>
		
		switch (mode) {
 2dc:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 2e0:	82 30       	cpi	r24, 0x02	; 2
 2e2:	19 f0       	breq	.+6      	; 0x2ea <__vector_4+0x3a>
 2e4:	83 30       	cpi	r24, 0x03	; 3
 2e6:	29 f0       	breq	.+10     	; 0x2f2 <__vector_4+0x42>
 2e8:	12 c0       	rjmp	.+36     	; 0x30e <__vector_4+0x5e>
			case MODE_CLOCK:
				
			break;

			case MODE_HOUR_SET:
				request_increment_hour = 1;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	80 93 0e 38 	sts	0x380E, r24	; 0x80380e <request_increment_hour>
			break;
 2f0:	0e c0       	rjmp	.+28     	; 0x30e <__vector_4+0x5e>

			case MODE_MIN_SET:
				request_increment_min = 1;
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <request_increment_min>
			break;
 2f8:	0a c0       	rjmp	.+20     	; 0x30e <__vector_4+0x5e>
		
		return;
	}

	//赤外線センサー PB0がLowに切り替わったら何もせず返す 両方のエッジを検出するようにしているので立ち下がりエッジ割り込みはここで無効にする
	if(!(VPORTB_IN & PIN0_bm)) {
 2fa:	30 9b       	sbis	0x06, 0	; 6
 2fc:	08 c0       	rjmp	.+16     	; 0x30e <__vector_4+0x5e>
		return;
	}

	//赤外線センサー PB0がHighだったら一定時間起き上がらせる
	if(VPORTB_IN & PIN0_bm) {
 2fe:	30 9b       	sbis	0x06, 0	; 6
 300:	06 c0       	rjmp	.+12     	; 0x30e <__vector_4+0x5e>
		wakeup = 800;
 302:	80 e2       	ldi	r24, 0x20	; 32
 304:	93 e0       	ldi	r25, 0x03	; 3
 306:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <wakeup>
 30a:	90 93 12 38 	sts	0x3812, r25	; 0x803812 <wakeup+0x1>
		return;
	}

	return;
}
 30e:	ff 91       	pop	r31
 310:	ef 91       	pop	r30
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <__vector_6>:

//リアルタイムクロック 比較一致割り込み
ISR(RTC_CNT_vect) {
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
 32a:	8f 93       	push	r24
 32c:	ef 93       	push	r30
 32e:	ff 93       	push	r31
	RTC_CNT = 0;
 330:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 334:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
	RTC_INTFLAGS = RTC_INTFLAGS | 0b00000010;
 338:	e3 e4       	ldi	r30, 0x43	; 67
 33a:	f1 e0       	ldi	r31, 0x01	; 1
 33c:	80 81       	ld	r24, Z
 33e:	82 60       	ori	r24, 0x02	; 2
 340:	80 83       	st	Z, r24

	//時計を進める
	if (mode == MODE_CLOCK && ++min >= 60) {
 342:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	91 f4       	brne	.+36     	; 0x36e <__vector_6+0x4e>
 34a:	80 91 14 38 	lds	r24, 0x3814	; 0x803814 <min>
 34e:	8f 5f       	subi	r24, 0xFF	; 255
 350:	80 93 14 38 	sts	0x3814, r24	; 0x803814 <min>
 354:	8c 33       	cpi	r24, 0x3C	; 60
 356:	58 f0       	brcs	.+22     	; 0x36e <__vector_6+0x4e>
		min = 0;
 358:	10 92 14 38 	sts	0x3814, r1	; 0x803814 <min>
		if(++hour >= 24) hour = 0;
 35c:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <hour>
 360:	8f 5f       	subi	r24, 0xFF	; 255
 362:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <hour>
 366:	88 31       	cpi	r24, 0x18	; 24
 368:	10 f0       	brcs	.+4      	; 0x36e <__vector_6+0x4e>
 36a:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <hour>
	}
	
	return;
}
 36e:	ff 91       	pop	r31
 370:	ef 91       	pop	r30
 372:	8f 91       	pop	r24
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <main>:
int main(void) {

	//■□■――――――――――――――――――――――――――――――――――――■□■
	//		□ レジスタの設定
	//■□■――――――――――――――――――――――――――――――――――――■□■
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 37e:	88 ed       	ldi	r24, 0xD8	; 216
 380:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLA = 0b00000000; //16/20 MHz内部オシレータ
 382:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RODATA_PM_OFFSET__+0x7f8060>
	//CLKCTRL_MCLKCTRLA = 0b00000001; //32 KHz内部超低消費電力オシレータ
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 386:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLB = 0b00001011; //64分周
 388:	9b e0       	ldi	r25, 0x0B	; 11
 38a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>

	//入出力モード設定
	VPORTA_DIR = 0b11111111; //ポートA 
 38e:	9f ef       	ldi	r25, 0xFF	; 255
 390:	90 b9       	out	0x00, r25	; 0
	VPORTB_DIR = 0b11111100; //ポートB 
 392:	2c ef       	ldi	r18, 0xFC	; 252
 394:	24 b9       	out	0x04, r18	; 4
	VPORTC_DIR = 0b11111111; //ポートC
 396:	98 b9       	out	0x08, r25	; 8

	//出力の初期化
	VPORTA_OUT = 0b00000000; //ポートA
 398:	11 b8       	out	0x01, r1	; 1
	VPORTB_OUT = 0b00000000; //ポートB
 39a:	15 b8       	out	0x05, r1	; 5
	VPORTC_OUT = 0b00000000; //ポートC
 39c:	19 b8       	out	0x09, r1	; 9

	//焦電型赤外線センサー入力
	PORTB_PIN0CTRL = 0b00000001; //プルアップ無効 両方のエッジを検出する
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <__RODATA_PM_OFFSET__+0x7f8430>

	//タクトスイッチ入力
	PORTB_PIN1CTRL = 0b00001001; //プルアップ有効 両方のエッジを検出する
 3a4:	29 e0       	ldi	r18, 0x09	; 9
 3a6:	20 93 31 04 	sts	0x0431, r18	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>


	
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 3aa:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_XOSC32KCTRLA = 0b00000001; //外付け水晶振動子 イネーブル
 3ac:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__RODATA_PM_OFFSET__+0x7f807c>
	
	//RTC設定
	RTC_INTCTRL = 0b00000010; //比較一致割り込み許可
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__RODATA_PM_OFFSET__+0x7f8142>
	RTC_CLKSEL  = 0b00000010; //クロック選択 XOSC32Kからの32.768 kHz
 3b6:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <__RODATA_PM_OFFSET__+0x7f8147>
	//STATUS.CTRLABUSYフラグが1の間待機
	while((RTC_STATUS & 0b00000001));
 3ba:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7f8141>
 3be:	80 fd       	sbrc	r24, 0
 3c0:	fc cf       	rjmp	.-8      	; 0x3ba <main+0x3c>
	RTC_CTRLA   = 0b11111001; //ｽﾀﾝﾊﾞｲ休止動作でもRTC許可 16384分周 RTC許可
 3c2:	89 ef       	ldi	r24, 0xF9	; 249
 3c4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__RODATA_PM_OFFSET__+0x7f8140>

	//割り込みたい間隔の秒数-1
	RTC_CMP = 0;
 3c8:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <__RODATA_PM_OFFSET__+0x7f814c>
 3cc:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <__RODATA_PM_OFFSET__+0x7f814d>
	// //RTC PIT 周期割り込み設定
	// RTC_PITCTRLA = 0b01110001; //16384分周 周期割り込み計時器許可
	// RTC_PITINTCTRL = 0b00000001; //周期割り込み許可

	//タイマーA
	TCA0_SINGLE_CTRLA = 0b00001101; //1024分周 動作許可
 3d0:	8d e0       	ldi	r24, 0x0D	; 13
 3d2:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
	TCA0_SINGLE_CTRLB = 0b00000000; //
 3d6:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
	TCA0_SINGLE_CMP0 = 1; // カウントがこの値に達したら割り込み(TCA0_CMP1_vect)が発生
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
 3e2:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__RODATA_PM_OFFSET__+0x7f8a29>
	TCA0_SINGLE_INTCTRL = 0b00010000; //CMP0割り込み許可
 3e6:	80 e1       	ldi	r24, 0x10	; 16
 3e8:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__RODATA_PM_OFFSET__+0x7f8a0a>

	set_sleep_mode(SLEEP_MODE_STANDBY); //スリープモードを設定
 3ec:	e0 e5       	ldi	r30, 0x50	; 80
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	89 7f       	andi	r24, 0xF9	; 249
 3f4:	82 60       	ori	r24, 0x02	; 2
 3f6:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f8:	88 e3       	ldi	r24, 0x38	; 56
 3fa:	91 e0       	ldi	r25, 0x01	; 1
 3fc:	01 97       	sbiw	r24, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <main+0x7e>
 400:	00 00       	nop

	//少し待機
	_delay_ms(5);

	sei(); //割り込み許可
 402:	78 94       	sei
	
	while (1) {

		if(!wakeup) {
 404:	80 91 11 38 	lds	r24, 0x3811	; 0x803811 <wakeup>
 408:	90 91 12 38 	lds	r25, 0x3812	; 0x803812 <wakeup+0x1>
 40c:	89 2b       	or	r24, r25
 40e:	71 f4       	brne	.+28     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			seg_all_off();
 410:	0e 94 5d 00 	call	0xba	; 0xba <seg_all_off>
			change_mode(MODE_CLOCK);
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	0e 94 6a 00 	call	0xd4	; 0xd4 <change_mode>
			sleep_mode();
 41a:	e0 e5       	ldi	r30, 0x50	; 80
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	81 60       	ori	r24, 0x01	; 1
 422:	80 83       	st	Z, r24
 424:	88 95       	sleep
 426:	80 81       	ld	r24, Z
 428:	8e 7f       	andi	r24, 0xFE	; 254
 42a:	80 83       	st	Z, r24
		}

		//リクエスト処理
		if(request_increment_hour) {
 42c:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <request_increment_hour>
 430:	88 23       	and	r24, r24
 432:	c9 f0       	breq	.+50     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
			request_increment_hour = 0;
 434:	10 92 0e 38 	sts	0x380E, r1	; 0x80380e <request_increment_hour>
			while(!(VPORTB_IN & PIN1_bm));
 438:	31 9b       	sbis	0x06, 1	; 6
 43a:	fe cf       	rjmp	.-4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
			if(mode == MODE_HOUR_SET) {
 43c:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 440:	82 30       	cpi	r24, 0x02	; 2
 442:	89 f4       	brne	.+34     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
				if(++hour >= 24) hour = 0;
 444:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <hour>
 448:	8f 5f       	subi	r24, 0xFF	; 255
 44a:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <hour>
 44e:	88 31       	cpi	r24, 0x18	; 24
 450:	10 f0       	brcs	.+4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 452:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <hour>
 456:	89 e6       	ldi	r24, 0x69	; 105
 458:	98 e1       	ldi	r25, 0x18	; 24
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 460:	00 00       	nop
				_delay_ms(100);
				request_increment_hour = 0;
 462:	10 92 0e 38 	sts	0x380E, r1	; 0x80380e <request_increment_hour>
			}
		}

		if(request_increment_min) {
 466:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <request_increment_min>
 46a:	88 23       	and	r24, r24
 46c:	11 f1       	breq	.+68     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
			request_increment_min = 0;
 46e:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <request_increment_min>
			while(!(VPORTB_IN & PIN1_bm));
 472:	31 9b       	sbis	0x06, 1	; 6
 474:	fe cf       	rjmp	.-4      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
			if(mode == MODE_MIN_SET) {
 476:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 47a:	83 30       	cpi	r24, 0x03	; 3
 47c:	d1 f4       	brne	.+52     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
				if(++min >= 60) {
 47e:	80 91 14 38 	lds	r24, 0x3814	; 0x803814 <min>
 482:	8f 5f       	subi	r24, 0xFF	; 255
 484:	80 93 14 38 	sts	0x3814, r24	; 0x803814 <min>
 488:	8c 33       	cpi	r24, 0x3C	; 60
 48a:	58 f0       	brcs	.+22     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
					min = 0;
 48c:	10 92 14 38 	sts	0x3814, r1	; 0x803814 <min>
					if(++hour >= 24) hour = 0;
 490:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <hour>
 494:	8f 5f       	subi	r24, 0xFF	; 255
 496:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <hour>
 49a:	88 31       	cpi	r24, 0x18	; 24
 49c:	10 f0       	brcs	.+4      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 49e:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <hour>
 4a2:	89 e6       	ldi	r24, 0x69	; 105
 4a4:	98 e1       	ldi	r25, 0x18	; 24
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4ac:	00 00       	nop
				}
				_delay_ms(100);
				request_increment_min = 0;
 4ae:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <request_increment_min>
 4b2:	93 e5       	ldi	r25, 0x53	; 83
 4b4:	9a 95       	dec	r25
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4b8:	00 00       	nop
 4ba:	a4 cf       	rjmp	.-184    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

000004bc <_exit>:
 4bc:	f8 94       	cli

000004be <__stop_program>:
 4be:	ff cf       	rjmp	.-2      	; 0x4be <__stop_program>
