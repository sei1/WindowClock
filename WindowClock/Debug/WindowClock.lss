
WindowClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00803800  00000bcc  00000c60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00803816  00803816  00000c76  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ca8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fe9  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b28  00000000  00000000  00002d29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d2  00000000  00000000  00004851  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00005024  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d5c  00000000  00000000  000051c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000071b  00000000  00000000  00005f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000663f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 4b 03 	jmp	0x696	; 0x696 <__vector_4>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 84 03 	jmp	0x708	; 0x708 <__vector_6>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_10>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
  88:	18 e3       	ldi	r17, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	ec ec       	ldi	r30, 0xCC	; 204
  90:	fb e0       	ldi	r31, 0x0B	; 11
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a6 31       	cpi	r26, 0x16	; 22
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	28 e3       	ldi	r18, 0x38	; 56
  a0:	a6 e1       	ldi	r26, 0x16	; 22
  a2:	b8 e3       	ldi	r27, 0x38	; 56
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a1 32       	cpi	r26, 0x21	; 33
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 b3 03 	call	0x766	; 0x766 <main>
  b2:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <get_v>:
// プログラム本文
//---------------------------------


//キャパシタに蓄えられた電源電圧と太陽電池の発電電圧を取得する関数
void get_v (void) {
  ba:	cf 92       	push	r12
  bc:	df 92       	push	r13
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
	
	uint16_t x = 0;
	uint16_t y = 0;

	// 基準電圧1.1V / 電源電圧 を10bit(1024段階)で測定
	ADC0_MUXPOS = 0b00011101; //基準電圧
  c6:	8d e1       	ldi	r24, 0x1D	; 29
  c8:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7f8606>

	ADC0_COMMAND = 1;//AD変換開始
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
	while(ADC0_COMMAND);
  d2:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
  d6:	81 11       	cpse	r24, r1
  d8:	fc cf       	rjmp	.-8      	; 0xd2 <get_v+0x18>
	ADC0_COMMAND = 0;//AD変換終了
  da:	c8 e0       	ldi	r28, 0x08	; 8
  dc:	d6 e0       	ldi	r29, 0x06	; 6
  de:	18 82       	st	Y, r1

	y = ADC0_RES;
  e0:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
  e4:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
	
	//電源電圧を算出
	supply_v = 1023 * 1.1 / y;
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 c0 04 	call	0x980	; 0x980 <__floatunsisf>
  f0:	6b 01       	movw	r12, r22
  f2:	7c 01       	movw	r14, r24
  f4:	9b 01       	movw	r18, r22
  f6:	ac 01       	movw	r20, r24
  f8:	6a e9       	ldi	r22, 0x9A	; 154
  fa:	79 ea       	ldi	r23, 0xA9	; 169
  fc:	8c e8       	ldi	r24, 0x8C	; 140
  fe:	94 e4       	ldi	r25, 0x44	; 68
 100:	0e 94 1f 04 	call	0x83e	; 0x83e <__divsf3>
 104:	60 93 06 38 	sts	0x3806, r22	; 0x803806 <supply_v>
 108:	70 93 07 38 	sts	0x3807, r23	; 0x803807 <supply_v+0x1>
 10c:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <supply_v+0x2>
 110:	90 93 09 38 	sts	0x3809, r25	; 0x803809 <supply_v+0x3>

	//PB1をタクトスイッチ入力から一時的に太陽電池電圧の測定ピンに切り替える
	PORTB_PIN1CTRL = 0b00000000; //プルアップ無効 エッジを検出しない
 114:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>
	VPORTB_DIR    |= 0b00000010; //出力モードに変更
 118:	84 b1       	in	r24, 0x04	; 4
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	84 b9       	out	0x04, r24	; 4
	VPORTB_OUT    &= 0b11111101; //出力Low
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	8d 7f       	andi	r24, 0xFD	; 253
 122:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	86 ea       	ldi	r24, 0xA6	; 166
 126:	8a 95       	dec	r24
 128:	f1 f7       	brne	.-4      	; 0x126 <__EEPROM_REGION_LENGTH__+0x26>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <__EEPROM_REGION_LENGTH__+0x2c>
	_delay_us(500);//少し待機
	VPORTB_DIR    &= 0b11111101; //入力モードに戻す
 12c:	84 b1       	in	r24, 0x04	; 4
 12e:	8d 7f       	andi	r24, 0xFD	; 253
 130:	84 b9       	out	0x04, r24	; 4

	//ADC入力ピンの選択
	// PB1ピンの電圧 / 電源電圧 を10bit(1024段階)で測定
	ADC0_MUXPOS = 0b00001010; //AIN10 = PB1
 132:	8a e0       	ldi	r24, 0x0A	; 10
 134:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7f8606>

	ADC0_COMMAND = 1;//AD変換開始
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	88 83       	st	Y, r24
	while(ADC0_COMMAND);
 13c:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
 140:	81 11       	cpse	r24, r1
 142:	fc cf       	rjmp	.-8      	; 0x13c <__EEPROM_REGION_LENGTH__+0x3c>
	ADC0_COMMAND = 0;//AD変換終了
 144:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>

	x = ADC0_RES;
 148:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
 14c:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>

	//PB1のプルアップを有効に戻す
	PORTB_PIN1CTRL = 0b00001001; //プルアップ有効 両方のエッジを検出する
 150:	89 e0       	ldi	r24, 0x09	; 9
 152:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>

	//太陽電池電圧を算出
	solar_v = x * 1.1 / y;
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 c0 04 	call	0x980	; 0x980 <__floatunsisf>
 15e:	2d ec       	ldi	r18, 0xCD	; 205
 160:	3c ec       	ldi	r19, 0xCC	; 204
 162:	4c e8       	ldi	r20, 0x8C	; 140
 164:	5f e3       	ldi	r21, 0x3F	; 63
 166:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__mulsf3>
 16a:	a7 01       	movw	r20, r14
 16c:	96 01       	movw	r18, r12
 16e:	0e 94 1f 04 	call	0x83e	; 0x83e <__divsf3>
 172:	60 93 02 38 	sts	0x3802, r22	; 0x803802 <solar_v>
 176:	70 93 03 38 	sts	0x3803, r23	; 0x803803 <solar_v+0x1>
 17a:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <solar_v+0x2>
 17e:	90 93 05 38 	sts	0x3805, r25	; 0x803805 <solar_v+0x3>
}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	ff 90       	pop	r15
 188:	ef 90       	pop	r14
 18a:	df 90       	pop	r13
 18c:	cf 90       	pop	r12
 18e:	08 95       	ret

00000190 <sens_delay_ms>:

//ボタン操作を受け付けながら待機する関数
void sens_delay_ms (uint16_t num) {
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	8c 01       	movw	r16, r24

	for (unsigned int i = 0; i < num; i++){
 19a:	c0 e0       	ldi	r28, 0x00	; 0
 19c:	d0 e0       	ldi	r29, 0x00	; 0
 19e:	67 c0       	rjmp	.+206    	; 0x26e <sens_delay_ms+0xde>
		if(!(VPORTB_IN & PIN1_bm)) {
 1a0:	31 99       	sbic	0x06, 1	; 6
 1a2:	5e c0       	rjmp	.+188    	; 0x260 <sens_delay_ms+0xd0>

			//ここにタクトスイッチが押された時の動作を記述
			wakeup = 6400 ;
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	99 e1       	ldi	r25, 0x19	; 25
 1a8:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <wakeup>
 1ac:	90 93 1e 38 	sts	0x381E, r25	; 0x80381e <wakeup+0x1>
		
			switch (mode) {
 1b0:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <mode>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	d1 f0       	breq	.+52     	; 0x1ec <sens_delay_ms+0x5c>
 1b8:	83 30       	cpi	r24, 0x03	; 3
 1ba:	89 f1       	breq	.+98     	; 0x21e <sens_delay_ms+0x8e>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	09 f0       	breq	.+2      	; 0x1c2 <sens_delay_ms+0x32>
 1c0:	4f c0       	rjmp	.+158    	; 0x260 <sens_delay_ms+0xd0>
				case MODE_CLOCK:
					while(!(VPORTB_IN & PIN1_bm));
 1c2:	31 9b       	sbis	0x06, 1	; 6
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <sens_delay_ms+0x32>
					if(change_mode_after) {
 1c6:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <change_mode_after>
 1ca:	88 23       	and	r24, r24
 1cc:	19 f0       	breq	.+6      	; 0x1d4 <sens_delay_ms+0x44>
						change_mode_after = 0;
 1ce:	10 92 1a 38 	sts	0x381A, r1	; 0x80381a <change_mode_after>
 1d2:	46 c0       	rjmp	.+140    	; 0x260 <sens_delay_ms+0xd0>
					}else{
						//電圧の取得
						get_v();
 1d4:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
						display_v = 200;
 1d8:	88 ec       	ldi	r24, 0xC8	; 200
 1da:	80 93 19 38 	sts	0x3819, r24	; 0x803819 <display_v>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	87 ea       	ldi	r24, 0xA7	; 167
 1e0:	91 e6       	ldi	r25, 0x61	; 97
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <sens_delay_ms+0x52>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <sens_delay_ms+0x58>
 1e8:	00 00       	nop
 1ea:	3a c0       	rjmp	.+116    	; 0x260 <sens_delay_ms+0xd0>
						_delay_ms(100);
					}
				break;

				case MODE_HOUR_SET:
					while(!(VPORTB_IN & PIN1_bm));
 1ec:	31 9b       	sbis	0x06, 1	; 6
 1ee:	fe cf       	rjmp	.-4      	; 0x1ec <sens_delay_ms+0x5c>
					if(change_mode_after) {
 1f0:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <change_mode_after>
 1f4:	88 23       	and	r24, r24
 1f6:	19 f0       	breq	.+6      	; 0x1fe <sens_delay_ms+0x6e>
						change_mode_after = 0;
 1f8:	10 92 1a 38 	sts	0x381A, r1	; 0x80381a <change_mode_after>
 1fc:	31 c0       	rjmp	.+98     	; 0x260 <sens_delay_ms+0xd0>
					}else{
						if(++hour >= 24) hour = 0;
 1fe:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <hour>
 202:	8f 5f       	subi	r24, 0xFF	; 255
 204:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <hour>
 208:	88 31       	cpi	r24, 0x18	; 24
 20a:	10 f0       	brcs	.+4      	; 0x210 <sens_delay_ms+0x80>
 20c:	10 92 1f 38 	sts	0x381F, r1	; 0x80381f <hour>
 210:	87 ea       	ldi	r24, 0xA7	; 167
 212:	91 e6       	ldi	r25, 0x61	; 97
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <sens_delay_ms+0x84>
 218:	00 c0       	rjmp	.+0      	; 0x21a <sens_delay_ms+0x8a>
 21a:	00 00       	nop
 21c:	21 c0       	rjmp	.+66     	; 0x260 <sens_delay_ms+0xd0>
						_delay_ms(100);
					}
				break;

				case MODE_MIN_SET:
					while(!(VPORTB_IN & PIN1_bm));
 21e:	31 9b       	sbis	0x06, 1	; 6
 220:	fe cf       	rjmp	.-4      	; 0x21e <sens_delay_ms+0x8e>
					if(change_mode_after) {
 222:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <change_mode_after>
 226:	88 23       	and	r24, r24
 228:	19 f0       	breq	.+6      	; 0x230 <sens_delay_ms+0xa0>
						change_mode_after = 0;
 22a:	10 92 1a 38 	sts	0x381A, r1	; 0x80381a <change_mode_after>
 22e:	18 c0       	rjmp	.+48     	; 0x260 <sens_delay_ms+0xd0>
					}else{
						if(++min >= 60) {
 230:	80 91 20 38 	lds	r24, 0x3820	; 0x803820 <min>
 234:	8f 5f       	subi	r24, 0xFF	; 255
 236:	80 93 20 38 	sts	0x3820, r24	; 0x803820 <min>
 23a:	8c 33       	cpi	r24, 0x3C	; 60
 23c:	88 f0       	brcs	.+34     	; 0x260 <sens_delay_ms+0xd0>
							min = 0;
 23e:	10 92 20 38 	sts	0x3820, r1	; 0x803820 <min>
							if(++hour >= 24) hour = 0;
 242:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <hour>
 246:	8f 5f       	subi	r24, 0xFF	; 255
 248:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <hour>
 24c:	88 31       	cpi	r24, 0x18	; 24
 24e:	10 f0       	brcs	.+4      	; 0x254 <sens_delay_ms+0xc4>
 250:	10 92 1f 38 	sts	0x381F, r1	; 0x80381f <hour>
 254:	87 ea       	ldi	r24, 0xA7	; 167
 256:	91 e6       	ldi	r25, 0x61	; 97
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <sens_delay_ms+0xc8>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <sens_delay_ms+0xce>
 25e:	00 00       	nop
 260:	89 ef       	ldi	r24, 0xF9	; 249
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <sens_delay_ms+0xd4>
 268:	00 c0       	rjmp	.+0      	; 0x26a <sens_delay_ms+0xda>
 26a:	00 00       	nop
}

//ボタン操作を受け付けながら待機する関数
void sens_delay_ms (uint16_t num) {

	for (unsigned int i = 0; i < num; i++){
 26c:	21 96       	adiw	r28, 0x01	; 1
 26e:	c0 17       	cp	r28, r16
 270:	d1 07       	cpc	r29, r17
 272:	08 f4       	brcc	.+2      	; 0x276 <sens_delay_ms+0xe6>
 274:	95 cf       	rjmp	.-214    	; 0x1a0 <sens_delay_ms+0x10>
				break;
			}
		}
		_delay_ms(1);
	}
}
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	1f 91       	pop	r17
 27c:	0f 91       	pop	r16
 27e:	08 95       	ret

00000280 <seg_all_off>:

//7セグをすべて消灯する関数
void seg_all_off (void) {

	//他のセルの消灯ドットを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	VPORTA_OUT = VPORTA_OUT & 0b00000001;
 280:	81 b1       	in	r24, 0x01	; 1
 282:	81 70       	andi	r24, 0x01	; 1
 284:	81 b9       	out	0x01, r24	; 1
	VPORTC_OUT = VPORTC_OUT & 0b11111110;
 286:	89 b1       	in	r24, 0x09	; 9
 288:	8e 7f       	andi	r24, 0xFE	; 254
 28a:	89 b9       	out	0x09, r24	; 9
	//ダイナミック点灯用トランジスタも全てOFF
	VPORTB_OUT = VPORTB_OUT & 0b11001111;
 28c:	85 b1       	in	r24, 0x05	; 5
 28e:	8f 7c       	andi	r24, 0xCF	; 207
 290:	85 b9       	out	0x05, r24	; 5
	VPORTC_OUT = VPORTC_OUT & 0b11110001;
 292:	89 b1       	in	r24, 0x09	; 9
 294:	81 7f       	andi	r24, 0xF1	; 241
 296:	89 b9       	out	0x09, r24	; 9
 298:	08 95       	ret

0000029a <change_mode>:
}

//モードを切り替える関数
//引数に0を指定した場合は次の定数のモードへ 定数を指定した場合はそのモードへ
void change_mode (uint8_t cmode) {
	if(cmode) {
 29a:	88 23       	and	r24, r24
 29c:	19 f0       	breq	.+6      	; 0x2a4 <change_mode+0xa>
		mode = cmode;
 29e:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <mode>
 2a2:	08 95       	ret
	}else if(mode == MODE_MIN_SET) {
 2a4:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <mode>
 2a8:	83 30       	cpi	r24, 0x03	; 3
 2aa:	21 f4       	brne	.+8      	; 0x2b4 <change_mode+0x1a>
		mode = MODE_CLOCK;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <mode>
 2b2:	08 95       	ret
	}else{
		mode++;
 2b4:	8f 5f       	subi	r24, 0xFF	; 255
 2b6:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <mode>
 2ba:	08 95       	ret

000002bc <__vector_10>:
	}
}

//TCA割り込み
ISR (TCA0_CMP0_vect) {
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	af 92       	push	r10
 2c8:	bf 92       	push	r11
 2ca:	cf 92       	push	r12
 2cc:	df 92       	push	r13
 2ce:	ef 92       	push	r14
 2d0:	ff 92       	push	r15
 2d2:	0f 93       	push	r16
 2d4:	1f 93       	push	r17
 2d6:	2f 93       	push	r18
 2d8:	3f 93       	push	r19
 2da:	4f 93       	push	r20
 2dc:	5f 93       	push	r21
 2de:	6f 93       	push	r22
 2e0:	7f 93       	push	r23
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
 2e6:	af 93       	push	r26
 2e8:	bf 93       	push	r27
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	ef 93       	push	r30
 2f0:	ff 93       	push	r31

	//wakeupが0ならセグをすべて消灯してそれ以外を実行しない
	//メインループのseg_all_off関数とsleep_mode関数の間にこの割り込みが入り中途半端に7セグが点灯した状態でスリープするのを防ぐ記述
	if(!wakeup) {
 2f2:	80 91 1d 38 	lds	r24, 0x381D	; 0x80381d <wakeup>
 2f6:	90 91 1e 38 	lds	r25, 0x381E	; 0x80381e <wakeup+0x1>
 2fa:	89 2b       	or	r24, r25
 2fc:	19 f4       	brne	.+6      	; 0x304 <__vector_10+0x48>
		seg_all_off();
 2fe:	0e 94 40 01 	call	0x280	; 0x280 <seg_all_off>
		return;
 302:	ae c1       	rjmp	.+860    	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
	}

	TCA0_SINGLE_CNT = 0;//カウントリセット
 304:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__RODATA_PM_OFFSET__+0x7f8a20>
 308:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__RODATA_PM_OFFSET__+0x7f8a21>
	TCA0_SINGLE_INTFLAGS = 0b00010000; //割り込み要求フラグを解除
 30c:	80 e1       	ldi	r24, 0x10	; 16
 30e:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>
	uint8_t dig1, dig2, dig3, dig4, dig5 = 0;
	uint8_t dig1c, dig2c, dig4c, dig5c;
	dig1c = dig2c = dig4c = dig5c = 0;

	//太陽電池の発電電圧とキャパシタの電圧を表示
	if(display_v && mode == MODE_CLOCK) {
 312:	80 91 19 38 	lds	r24, 0x3819	; 0x803819 <display_v>
 316:	88 23       	and	r24, r24
 318:	09 f4       	brne	.+2      	; 0x31c <__vector_10+0x60>
 31a:	6f c0       	rjmp	.+222    	; 0x3fa <__vector_10+0x13e>
 31c:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <mode>
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	09 f0       	breq	.+2      	; 0x326 <__vector_10+0x6a>
 324:	6a c0       	rjmp	.+212    	; 0x3fa <__vector_10+0x13e>
		uint8_t spv = supply_v * 10;
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	40 e2       	ldi	r20, 0x20	; 32
 32c:	51 e4       	ldi	r21, 0x41	; 65
 32e:	60 91 06 38 	lds	r22, 0x3806	; 0x803806 <supply_v>
 332:	70 91 07 38 	lds	r23, 0x3807	; 0x803807 <supply_v+0x1>
 336:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <supply_v+0x2>
 33a:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <supply_v+0x3>
 33e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__mulsf3>
 342:	0e 94 91 04 	call	0x922	; 0x922 <__fixunssfsi>
 346:	c6 2f       	mov	r28, r22
		uint8_t slv =  solar_v * 10;
 348:	20 e0       	ldi	r18, 0x00	; 0
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	40 e2       	ldi	r20, 0x20	; 32
 34e:	51 e4       	ldi	r21, 0x41	; 65
 350:	60 91 02 38 	lds	r22, 0x3802	; 0x803802 <solar_v>
 354:	70 91 03 38 	lds	r23, 0x3803	; 0x803803 <solar_v+0x1>
 358:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <solar_v+0x2>
 35c:	90 91 05 38 	lds	r25, 0x3805	; 0x803805 <solar_v+0x3>
 360:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__mulsf3>
 364:	0e 94 91 04 	call	0x922	; 0x922 <__fixunssfsi>
		dig1  = seg[spv % 10];
 368:	8d ec       	ldi	r24, 0xCD	; 205
 36a:	c8 9f       	mul	r28, r24
 36c:	e1 2d       	mov	r30, r1
 36e:	11 24       	eor	r1, r1
 370:	e6 95       	lsr	r30
 372:	e6 95       	lsr	r30
 374:	e6 95       	lsr	r30
 376:	2e 2f       	mov	r18, r30
 378:	22 0f       	add	r18, r18
 37a:	92 2f       	mov	r25, r18
 37c:	99 0f       	add	r25, r25
 37e:	99 0f       	add	r25, r25
 380:	92 0f       	add	r25, r18
 382:	c9 1b       	sub	r28, r25
 384:	ac 2f       	mov	r26, r28
 386:	b0 e0       	ldi	r27, 0x00	; 0
 388:	a5 5f       	subi	r26, 0xF5	; 245
 38a:	b7 4c       	sbci	r27, 0xC7	; 199
 38c:	cc 91       	ld	r28, X
		dig2  = seg[(spv / 10) % 10];
 38e:	e8 9f       	mul	r30, r24
 390:	91 2d       	mov	r25, r1
 392:	11 24       	eor	r1, r1
 394:	96 95       	lsr	r25
 396:	96 95       	lsr	r25
 398:	96 95       	lsr	r25
 39a:	99 0f       	add	r25, r25
 39c:	29 2f       	mov	r18, r25
 39e:	22 0f       	add	r18, r18
 3a0:	22 0f       	add	r18, r18
 3a2:	92 0f       	add	r25, r18
 3a4:	e9 1b       	sub	r30, r25
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	e5 5f       	subi	r30, 0xF5	; 245
 3aa:	f7 4c       	sbci	r31, 0xC7	; 199
 3ac:	d0 81       	ld	r29, Z
		dig3  = 0b00000000;
		dig4  = seg[slv % 10];
 3ae:	68 9f       	mul	r22, r24
 3b0:	e1 2d       	mov	r30, r1
 3b2:	11 24       	eor	r1, r1
 3b4:	e6 95       	lsr	r30
 3b6:	e6 95       	lsr	r30
 3b8:	e6 95       	lsr	r30
 3ba:	2e 2f       	mov	r18, r30
 3bc:	22 0f       	add	r18, r18
 3be:	92 2f       	mov	r25, r18
 3c0:	99 0f       	add	r25, r25
 3c2:	99 0f       	add	r25, r25
 3c4:	92 0f       	add	r25, r18
 3c6:	69 1b       	sub	r22, r25
 3c8:	a6 2f       	mov	r26, r22
 3ca:	b0 e0       	ldi	r27, 0x00	; 0
 3cc:	a5 5f       	subi	r26, 0xF5	; 245
 3ce:	b7 4c       	sbci	r27, 0xC7	; 199
 3d0:	1c 91       	ld	r17, X
		dig5  = seg[(slv / 10) % 10];
 3d2:	e8 9f       	mul	r30, r24
 3d4:	81 2d       	mov	r24, r1
 3d6:	11 24       	eor	r1, r1
 3d8:	86 95       	lsr	r24
 3da:	86 95       	lsr	r24
 3dc:	86 95       	lsr	r24
 3de:	88 0f       	add	r24, r24
 3e0:	98 2f       	mov	r25, r24
 3e2:	99 0f       	add	r25, r25
 3e4:	99 0f       	add	r25, r25
 3e6:	89 0f       	add	r24, r25
 3e8:	e8 1b       	sub	r30, r24
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	e5 5f       	subi	r30, 0xF5	; 245
 3ee:	f7 4c       	sbci	r31, 0xC7	; 199
 3f0:	00 81       	ld	r16, Z
		dig2c = dig5c =0b00000001;//ドット(小数点)
 3f2:	bb 24       	eor	r11, r11
 3f4:	b3 94       	inc	r11
	if(display_v && mode == MODE_CLOCK) {
		uint8_t spv = supply_v * 10;
		uint8_t slv =  solar_v * 10;
		dig1  = seg[spv % 10];
		dig2  = seg[(spv / 10) % 10];
		dig3  = 0b00000000;
 3f6:	a1 2c       	mov	r10, r1
	uint8_t dig1, dig2, dig3, dig4, dig5 = 0;
	uint8_t dig1c, dig2c, dig4c, dig5c;
	dig1c = dig2c = dig4c = dig5c = 0;

	//太陽電池の発電電圧とキャパシタの電圧を表示
	if(display_v && mode == MODE_CLOCK) {
 3f8:	55 c0       	rjmp	.+170    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
		dig4  = seg[slv % 10];
		dig5  = seg[(slv / 10) % 10];
		dig2c = dig5c =0b00000001;//ドット(小数点)

	}else{//時刻を表示
		dig1  = seg[min % 10];
 3fa:	c0 91 20 38 	lds	r28, 0x3820	; 0x803820 <min>
 3fe:	ed ec       	ldi	r30, 0xCD	; 205
 400:	ce 9f       	mul	r28, r30
 402:	a1 2d       	mov	r26, r1
 404:	11 24       	eor	r1, r1
 406:	a6 95       	lsr	r26
 408:	a6 95       	lsr	r26
 40a:	a6 95       	lsr	r26
 40c:	9a 2f       	mov	r25, r26
 40e:	99 0f       	add	r25, r25
 410:	89 2f       	mov	r24, r25
 412:	88 0f       	add	r24, r24
 414:	88 0f       	add	r24, r24
 416:	89 0f       	add	r24, r25
 418:	c8 1b       	sub	r28, r24
 41a:	d0 e0       	ldi	r29, 0x00	; 0
 41c:	c5 5f       	subi	r28, 0xF5	; 245
 41e:	d7 4c       	sbci	r29, 0xC7	; 199
 420:	c8 81       	ld	r28, Y
		dig2  = seg[(min / 10) % 10];
 422:	ae 9f       	mul	r26, r30
 424:	81 2d       	mov	r24, r1
 426:	11 24       	eor	r1, r1
 428:	86 95       	lsr	r24
 42a:	86 95       	lsr	r24
 42c:	86 95       	lsr	r24
 42e:	88 0f       	add	r24, r24
 430:	98 2f       	mov	r25, r24
 432:	99 0f       	add	r25, r25
 434:	99 0f       	add	r25, r25
 436:	89 0f       	add	r24, r25
 438:	a8 1b       	sub	r26, r24
 43a:	b0 e0       	ldi	r27, 0x00	; 0
 43c:	a5 5f       	subi	r26, 0xF5	; 245
 43e:	b7 4c       	sbci	r27, 0xC7	; 199
 440:	dc 91       	ld	r29, X
		dig3  = 0b00000110;
		dig4  = seg[hour % 10];
 442:	a0 91 1f 38 	lds	r26, 0x381F	; 0x80381f <hour>
 446:	ae 9f       	mul	r26, r30
 448:	81 2d       	mov	r24, r1
 44a:	11 24       	eor	r1, r1
 44c:	86 95       	lsr	r24
 44e:	86 95       	lsr	r24
 450:	86 95       	lsr	r24
 452:	28 2f       	mov	r18, r24
 454:	22 0f       	add	r18, r18
 456:	92 2f       	mov	r25, r18
 458:	99 0f       	add	r25, r25
 45a:	99 0f       	add	r25, r25
 45c:	92 0f       	add	r25, r18
 45e:	a9 1b       	sub	r26, r25
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	a5 5f       	subi	r26, 0xF5	; 245
 464:	b7 4c       	sbci	r27, 0xC7	; 199
 466:	1c 91       	ld	r17, X

		//dig5のみ0なら不点灯にする(ゼロサプレス)
		uint8_t zerocheck = (hour / 10) % 10;
 468:	8e 9f       	mul	r24, r30
 46a:	e1 2d       	mov	r30, r1
 46c:	11 24       	eor	r1, r1
 46e:	e6 95       	lsr	r30
 470:	e6 95       	lsr	r30
 472:	e6 95       	lsr	r30
 474:	ee 0f       	add	r30, r30
 476:	9e 2f       	mov	r25, r30
 478:	99 0f       	add	r25, r25
 47a:	99 0f       	add	r25, r25
 47c:	e9 0f       	add	r30, r25
 47e:	8e 1b       	sub	r24, r30
		if(zerocheck == 0) {
 480:	59 f0       	breq	.+22     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
			dig5 = 0b00000000;
		}else{
			dig5   = seg[zerocheck];
 482:	e8 2f       	mov	r30, r24
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	e5 5f       	subi	r30, 0xF5	; 245
 488:	f7 4c       	sbci	r31, 0xC7	; 199
 48a:	00 81       	ld	r16, Z
	TCA0_SINGLE_INTFLAGS = 0b00010000; //割り込み要求フラグを解除

	static uint8_t sel = 0;
	uint8_t dig1, dig2, dig3, dig4, dig5 = 0;
	uint8_t dig1c, dig2c, dig4c, dig5c;
	dig1c = dig2c = dig4c = dig5c = 0;
 48c:	b1 2c       	mov	r11, r1
		dig2c = dig5c =0b00000001;//ドット(小数点)

	}else{//時刻を表示
		dig1  = seg[min % 10];
		dig2  = seg[(min / 10) % 10];
		dig3  = 0b00000110;
 48e:	0f 2e       	mov	r0, r31
 490:	f6 e0       	ldi	r31, 0x06	; 6
 492:	af 2e       	mov	r10, r31
 494:	f0 2d       	mov	r31, r0
 496:	06 c0       	rjmp	.+12     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
	TCA0_SINGLE_INTFLAGS = 0b00010000; //割り込み要求フラグを解除

	static uint8_t sel = 0;
	uint8_t dig1, dig2, dig3, dig4, dig5 = 0;
	uint8_t dig1c, dig2c, dig4c, dig5c;
	dig1c = dig2c = dig4c = dig5c = 0;
 498:	b1 2c       	mov	r11, r1
		dig4  = seg[hour % 10];

		//dig5のみ0なら不点灯にする(ゼロサプレス)
		uint8_t zerocheck = (hour / 10) % 10;
		if(zerocheck == 0) {
			dig5 = 0b00000000;
 49a:	00 e0       	ldi	r16, 0x00	; 0
		dig2c = dig5c =0b00000001;//ドット(小数点)

	}else{//時刻を表示
		dig1  = seg[min % 10];
		dig2  = seg[(min / 10) % 10];
		dig3  = 0b00000110;
 49c:	0f 2e       	mov	r0, r31
 49e:	f6 e0       	ldi	r31, 0x06	; 6
 4a0:	af 2e       	mov	r10, r31
 4a2:	f0 2d       	mov	r31, r0
	}

	//時刻設定時の点滅演出
	//点滅カウンター
	static uint8_t wink = 0;
	if(mode == MODE_HOUR_SET) {
 4a4:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <mode>
 4a8:	82 30       	cpi	r24, 0x02	; 2
 4aa:	41 f4       	brne	.+16     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
		if(++wink < 128) dig4 = dig5 = 0b00000000;
 4ac:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <wink.3563>
 4b0:	8f 5f       	subi	r24, 0xFF	; 255
 4b2:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <wink.3563>
 4b6:	88 23       	and	r24, r24
 4b8:	74 f4       	brge	.+28     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4ba:	12 c0       	rjmp	.+36     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
	}else if(mode == MODE_MIN_SET) {
 4bc:	83 30       	cpi	r24, 0x03	; 3
 4be:	41 f4       	brne	.+16     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
		if(++wink < 128) dig1 = dig2 = 0b00000000;
 4c0:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <wink.3563>
 4c4:	8f 5f       	subi	r24, 0xFF	; 255
 4c6:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <wink.3563>
 4ca:	88 23       	and	r24, r24
 4cc:	3c f4       	brge	.+14     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4ce:	08 c0       	rjmp	.+16     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
	}else{
		wink = 0;
 4d0:	10 92 17 38 	sts	0x3817, r1	; 0x803817 <wink.3563>
 4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>

	//時刻設定時の点滅演出
	//点滅カウンター
	static uint8_t wink = 0;
	if(mode == MODE_HOUR_SET) {
		if(++wink < 128) dig4 = dig5 = 0b00000000;
 4d6:	00 e0       	ldi	r16, 0x00	; 0
 4d8:	10 e0       	ldi	r17, 0x00	; 0
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
	}else if(mode == MODE_MIN_SET) {
		if(++wink < 128) dig1 = dig2 = 0b00000000;
 4dc:	d0 e0       	ldi	r29, 0x00	; 0
 4de:	c0 e0       	ldi	r28, 0x00	; 0
		wink = 0;
	}


	//他のセルの消灯ドットを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();
 4e0:	0e 94 40 01 	call	0x280	; 0x280 <seg_all_off>

	//明るさ調整
	if(solar_v > 1.2) {
 4e4:	c0 90 02 38 	lds	r12, 0x3802	; 0x803802 <solar_v>
 4e8:	d0 90 03 38 	lds	r13, 0x3803	; 0x803803 <solar_v+0x1>
 4ec:	e0 90 04 38 	lds	r14, 0x3804	; 0x803804 <solar_v+0x2>
 4f0:	f0 90 05 38 	lds	r15, 0x3805	; 0x803805 <solar_v+0x3>
 4f4:	2a e9       	ldi	r18, 0x9A	; 154
 4f6:	39 e9       	ldi	r19, 0x99	; 153
 4f8:	49 e9       	ldi	r20, 0x99	; 153
 4fa:	5f e3       	ldi	r21, 0x3F	; 63
 4fc:	c7 01       	movw	r24, r14
 4fe:	b6 01       	movw	r22, r12
 500:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__gesf2>
 504:	18 16       	cp	r1, r24
 506:	24 f4       	brge	.+8      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		brightness = 3;
 508:	83 e0       	ldi	r24, 0x03	; 3
 50a:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 50e:	11 c0       	rjmp	.+34     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
	}else if(solar_v > 0.5) {
 510:	20 e0       	ldi	r18, 0x00	; 0
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	40 e0       	ldi	r20, 0x00	; 0
 516:	5f e3       	ldi	r21, 0x3F	; 63
 518:	c7 01       	movw	r24, r14
 51a:	b6 01       	movw	r22, r12
 51c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__gesf2>
 520:	18 16       	cp	r1, r24
 522:	24 f4       	brge	.+8      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		brightness = 2;
 524:	82 e0       	ldi	r24, 0x02	; 2
 526:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 52a:	03 c0       	rjmp	.+6      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
	}else{
		brightness = 1;
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
	}


	uint8_t seg_on = 0;
	if(++bn_pwm_count > 15) {
 532:	80 91 18 38 	lds	r24, 0x3818	; 0x803818 <bn_pwm_count>
 536:	8f 5f       	subi	r24, 0xFF	; 255
 538:	80 93 18 38 	sts	0x3818, r24	; 0x803818 <bn_pwm_count>
 53c:	80 31       	cpi	r24, 0x10	; 16
 53e:	10 f0       	brcs	.+4      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
		bn_pwm_count = 0;
 540:	10 92 18 38 	sts	0x3818, r1	; 0x803818 <bn_pwm_count>
	}

	if(brightness == 3) {
 544:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 548:	83 30       	cpi	r24, 0x03	; 3
 54a:	81 f0       	breq	.+32     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
		seg_on = 1;
	}else if(brightness == 2) {
 54c:	82 30       	cpi	r24, 0x02	; 2
 54e:	31 f4       	brne	.+12     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
		if(bn_pwm_count % 2) {
 550:	80 91 18 38 	lds	r24, 0x3818	; 0x803818 <bn_pwm_count>
 554:	80 fd       	sbrc	r24, 0
 556:	0c c0       	rjmp	.+24     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
	}else{
		brightness = 1;
	}


	uint8_t seg_on = 0;
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	0f c0       	rjmp	.+30     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
		seg_on = 1;
	}else if(brightness == 2) {
		if(bn_pwm_count % 2) {
			seg_on = 1;
		}
	}else if(brightness == 1) {
 55c:	81 30       	cpi	r24, 0x01	; 1
 55e:	51 f4       	brne	.+20     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
		if(!(bn_pwm_count % 4)) {
 560:	80 91 18 38 	lds	r24, 0x3818	; 0x803818 <bn_pwm_count>
 564:	83 70       	andi	r24, 0x03	; 3
 566:	41 f0       	breq	.+16     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
	}else{
		brightness = 1;
	}


	uint8_t seg_on = 0;
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	07 c0       	rjmp	.+14     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
	if(++bn_pwm_count > 15) {
		bn_pwm_count = 0;
	}

	if(brightness == 3) {
		seg_on = 1;
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	05 c0       	rjmp	.+10     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
	}else if(brightness == 2) {
		if(bn_pwm_count % 2) {
			seg_on = 1;
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	03 c0       	rjmp	.+6      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
	}else{
		brightness = 1;
	}


	uint8_t seg_on = 0;
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	01 c0       	rjmp	.+2      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
		if(bn_pwm_count % 2) {
			seg_on = 1;
		}
	}else if(brightness == 1) {
		if(!(bn_pwm_count % 4)) {
			seg_on = 1;
 578:	81 e0       	ldi	r24, 0x01	; 1
		}
	}

	if(seg_on) {
 57a:	88 23       	and	r24, r24
 57c:	a9 f1       	breq	.+106    	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
		switch ( sel ) {
 57e:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <__data_end>
 582:	82 30       	cpi	r24, 0x02	; 2
 584:	e1 f0       	breq	.+56     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
 586:	28 f4       	brcc	.+10     	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 588:	88 23       	and	r24, r24
 58a:	41 f0       	breq	.+16     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	71 f0       	breq	.+28     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 590:	2b c0       	rjmp	.+86     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 592:	83 30       	cpi	r24, 0x03	; 3
 594:	c9 f0       	breq	.+50     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 596:	84 30       	cpi	r24, 0x04	; 4
 598:	f9 f0       	breq	.+62     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 59a:	26 c0       	rjmp	.+76     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>

			case 0:
			VPORTB_OUT = VPORTB_OUT | 0b00010000;
 59c:	85 b1       	in	r24, 0x05	; 5
 59e:	80 61       	ori	r24, 0x10	; 16
 5a0:	85 b9       	out	0x05, r24	; 5
			VPORTA_OUT = dig1;
 5a2:	c1 b9       	out	0x01, r28	; 1
			VPORTC_OUT = (dig1c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 5a4:	89 b1       	in	r24, 0x09	; 9
 5a6:	8e 7f       	andi	r24, 0xFE	; 254
 5a8:	89 b9       	out	0x09, r24	; 9
			break;
 5aa:	1e c0       	rjmp	.+60     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>

			case 1:
			VPORTC_OUT = VPORTC_OUT | 0b00001000;
 5ac:	89 b1       	in	r24, 0x09	; 9
 5ae:	88 60       	ori	r24, 0x08	; 8
 5b0:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig2;
 5b2:	d1 b9       	out	0x01, r29	; 1
			VPORTC_OUT = (dig2c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 5b4:	89 b1       	in	r24, 0x09	; 9
 5b6:	8e 7f       	andi	r24, 0xFE	; 254
 5b8:	b8 2a       	or	r11, r24
 5ba:	b9 b8       	out	0x09, r11	; 9
			break;
 5bc:	15 c0       	rjmp	.+42     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>

			case 2:
			VPORTB_OUT = VPORTB_OUT | 0b00100000;
 5be:	85 b1       	in	r24, 0x05	; 5
 5c0:	80 62       	ori	r24, 0x20	; 32
 5c2:	85 b9       	out	0x05, r24	; 5
			VPORTA_OUT = dig3;
 5c4:	a1 b8       	out	0x01, r10	; 1
			break;
 5c6:	10 c0       	rjmp	.+32     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>

			case 3:
			VPORTC_OUT = VPORTC_OUT | 0b00000100;
 5c8:	89 b1       	in	r24, 0x09	; 9
 5ca:	84 60       	ori	r24, 0x04	; 4
 5cc:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig4;
 5ce:	11 b9       	out	0x01, r17	; 1
			VPORTC_OUT = (dig4c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 5d0:	89 b1       	in	r24, 0x09	; 9
 5d2:	8e 7f       	andi	r24, 0xFE	; 254
 5d4:	89 b9       	out	0x09, r24	; 9
			break;
 5d6:	08 c0       	rjmp	.+16     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>

			case 4:
			VPORTC_OUT = VPORTC_OUT | 0b00000010;
 5d8:	89 b1       	in	r24, 0x09	; 9
 5da:	82 60       	ori	r24, 0x02	; 2
 5dc:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig5;
 5de:	01 b9       	out	0x01, r16	; 1
			VPORTC_OUT = (dig5c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 5e0:	89 b1       	in	r24, 0x09	; 9
 5e2:	8e 7f       	andi	r24, 0xFE	; 254
 5e4:	b8 2a       	or	r11, r24
 5e6:	b9 b8       	out	0x09, r11	; 9
		}
	}


	//5回に1回やること
	if ( ++sel == 5 ) {
 5e8:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <__data_end>
 5ec:	8f 5f       	subi	r24, 0xFF	; 255
 5ee:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <__data_end>
 5f2:	85 30       	cpi	r24, 0x05	; 5
 5f4:	a9 f5       	brne	.+106    	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
		//selの0~5トグル動作
		sel = 0;
 5f6:	10 92 16 38 	sts	0x3816, r1	; 0x803816 <__data_end>

		//スリープへ向けwakeupを減らす
		if(wakeup) wakeup--;
 5fa:	80 91 1d 38 	lds	r24, 0x381D	; 0x80381d <wakeup>
 5fe:	90 91 1e 38 	lds	r25, 0x381E	; 0x80381e <wakeup+0x1>
 602:	00 97       	sbiw	r24, 0x00	; 0
 604:	29 f0       	breq	.+10     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 606:	01 97       	sbiw	r24, 0x01	; 1
 608:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <wakeup>
 60c:	90 93 1e 38 	sts	0x381E, r25	; 0x80381e <wakeup+0x1>

		//電圧表示時間を減らす
		if(display_v) display_v--;
 610:	80 91 19 38 	lds	r24, 0x3819	; 0x803819 <display_v>
 614:	88 23       	and	r24, r24
 616:	19 f0       	breq	.+6      	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
 618:	81 50       	subi	r24, 0x01	; 1
 61a:	80 93 19 38 	sts	0x3819, r24	; 0x803819 <display_v>

		//タクトスイッチが長押しされている場合、長押しカウントを加算
		if(VPORTB_IN & PIN1_bm) {
 61e:	31 9b       	sbis	0x06, 1	; 6
 620:	05 c0       	rjmp	.+10     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
			long_push = 0;
 622:	10 92 1b 38 	sts	0x381B, r1	; 0x80381b <long_push>
 626:	10 92 1c 38 	sts	0x381C, r1	; 0x80381c <long_push+0x1>
 62a:	1a c0       	rjmp	.+52     	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
		}else{
			if(++long_push > 1200) {
 62c:	80 91 1b 38 	lds	r24, 0x381B	; 0x80381b <long_push>
 630:	90 91 1c 38 	lds	r25, 0x381C	; 0x80381c <long_push+0x1>
 634:	01 96       	adiw	r24, 0x01	; 1
 636:	80 93 1b 38 	sts	0x381B, r24	; 0x80381b <long_push>
 63a:	90 93 1c 38 	sts	0x381C, r25	; 0x80381c <long_push+0x1>
 63e:	81 3b       	cpi	r24, 0xB1	; 177
 640:	94 40       	sbci	r25, 0x04	; 4
 642:	70 f0       	brcs	.+28     	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
				long_push = 0;
 644:	10 92 1b 38 	sts	0x381B, r1	; 0x80381b <long_push>
 648:	10 92 1c 38 	sts	0x381C, r1	; 0x80381c <long_push+0x1>
				RTC_CNT = 0; //時刻設定をした後、秒数が0から始まるようにする
 64c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 650:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
				change_mode(0);
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	0e 94 4d 01 	call	0x29a	; 0x29a <change_mode>
				change_mode_after = 1;
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	80 93 1a 38 	sts	0x381A, r24	; 0x80381a <change_mode_after>
		}
	}



}
 660:	ff 91       	pop	r31
 662:	ef 91       	pop	r30
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	bf 91       	pop	r27
 66a:	af 91       	pop	r26
 66c:	9f 91       	pop	r25
 66e:	8f 91       	pop	r24
 670:	7f 91       	pop	r23
 672:	6f 91       	pop	r22
 674:	5f 91       	pop	r21
 676:	4f 91       	pop	r20
 678:	3f 91       	pop	r19
 67a:	2f 91       	pop	r18
 67c:	1f 91       	pop	r17
 67e:	0f 91       	pop	r16
 680:	ff 90       	pop	r15
 682:	ef 90       	pop	r14
 684:	df 90       	pop	r13
 686:	cf 90       	pop	r12
 688:	bf 90       	pop	r11
 68a:	af 90       	pop	r10
 68c:	0f 90       	pop	r0
 68e:	0f be       	out	0x3f, r0	; 63
 690:	0f 90       	pop	r0
 692:	1f 90       	pop	r1
 694:	18 95       	reti

00000696 <__vector_4>:

//外部割り込み PB0が変化したら 両方のエッジを検出する(片方エッジにしたいがそうするとなぜかスタンバイから復帰しない)
ISR(PORTB_PORT_vect) {
 696:	1f 92       	push	r1
 698:	0f 92       	push	r0
 69a:	0f b6       	in	r0, 0x3f	; 63
 69c:	0f 92       	push	r0
 69e:	11 24       	eor	r1, r1
 6a0:	2f 93       	push	r18
 6a2:	3f 93       	push	r19
 6a4:	4f 93       	push	r20
 6a6:	5f 93       	push	r21
 6a8:	6f 93       	push	r22
 6aa:	7f 93       	push	r23
 6ac:	8f 93       	push	r24
 6ae:	9f 93       	push	r25
 6b0:	af 93       	push	r26
 6b2:	bf 93       	push	r27
 6b4:	ef 93       	push	r30
 6b6:	ff 93       	push	r31
	
	PORTB_INTFLAGS = PORTB_INTFLAGS | 0b00000010; //割り込み要求フラグ解除
 6b8:	e9 e2       	ldi	r30, 0x29	; 41
 6ba:	f4 e0       	ldi	r31, 0x04	; 4
 6bc:	80 81       	ld	r24, Z
 6be:	82 60       	ori	r24, 0x02	; 2
 6c0:	80 83       	st	Z, r24

	//赤外線センサー PB0がLowに切り替わったら何もせず返す 両方のエッジを検出するようにしているので立ち下がりエッジ割り込みはここで無効にする
	if(!(VPORTB_IN & PIN0_bm)) {
 6c2:	30 9b       	sbis	0x06, 0	; 6
 6c4:	10 c0       	rjmp	.+32     	; 0x6e6 <__vector_4+0x50>
		return;
	}

	//赤外線センサー PB0がHighだったら一定時間起き上がらせる
	if(VPORTB_IN & PIN0_bm) {
 6c6:	30 9b       	sbis	0x06, 0	; 6
 6c8:	0e c0       	rjmp	.+28     	; 0x6e6 <__vector_4+0x50>
		wakeup = 3200;
 6ca:	80 e8       	ldi	r24, 0x80	; 128
 6cc:	9c e0       	ldi	r25, 0x0C	; 12
 6ce:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <wakeup>
 6d2:	90 93 1e 38 	sts	0x381E, r25	; 0x80381e <wakeup+0x1>

		//起きたら一度だけ電圧測定する
		if(yet_v) {
 6d6:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <yet_v>
 6da:	88 23       	and	r24, r24
 6dc:	21 f0       	breq	.+8      	; 0x6e6 <__vector_4+0x50>
			yet_v = 0;
 6de:	10 92 01 38 	sts	0x3801, r1	; 0x803801 <yet_v>
			get_v();
 6e2:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
		}
		return;
	}

	return;
}
 6e6:	ff 91       	pop	r31
 6e8:	ef 91       	pop	r30
 6ea:	bf 91       	pop	r27
 6ec:	af 91       	pop	r26
 6ee:	9f 91       	pop	r25
 6f0:	8f 91       	pop	r24
 6f2:	7f 91       	pop	r23
 6f4:	6f 91       	pop	r22
 6f6:	5f 91       	pop	r21
 6f8:	4f 91       	pop	r20
 6fa:	3f 91       	pop	r19
 6fc:	2f 91       	pop	r18
 6fe:	0f 90       	pop	r0
 700:	0f be       	out	0x3f, r0	; 63
 702:	0f 90       	pop	r0
 704:	1f 90       	pop	r1
 706:	18 95       	reti

00000708 <__vector_6>:

//リアルタイムクロック 比較一致割り込み
ISR(RTC_CNT_vect) {
 708:	1f 92       	push	r1
 70a:	0f 92       	push	r0
 70c:	0f b6       	in	r0, 0x3f	; 63
 70e:	0f 92       	push	r0
 710:	11 24       	eor	r1, r1
 712:	8f 93       	push	r24
 714:	ef 93       	push	r30
 716:	ff 93       	push	r31
	RTC_CNT = 0;
 718:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 71c:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
	RTC_INTFLAGS = RTC_INTFLAGS | 0b00000010;
 720:	e3 e4       	ldi	r30, 0x43	; 67
 722:	f1 e0       	ldi	r31, 0x01	; 1
 724:	80 81       	ld	r24, Z
 726:	82 60       	ori	r24, 0x02	; 2
 728:	80 83       	st	Z, r24

	//時計を進める
	if (mode == MODE_CLOCK && ++min >= 60) {
 72a:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <mode>
 72e:	81 30       	cpi	r24, 0x01	; 1
 730:	91 f4       	brne	.+36     	; 0x756 <__vector_6+0x4e>
 732:	80 91 20 38 	lds	r24, 0x3820	; 0x803820 <min>
 736:	8f 5f       	subi	r24, 0xFF	; 255
 738:	80 93 20 38 	sts	0x3820, r24	; 0x803820 <min>
 73c:	8c 33       	cpi	r24, 0x3C	; 60
 73e:	58 f0       	brcs	.+22     	; 0x756 <__vector_6+0x4e>
		min = 0;
 740:	10 92 20 38 	sts	0x3820, r1	; 0x803820 <min>
		if(++hour >= 24) hour = 0;
 744:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <hour>
 748:	8f 5f       	subi	r24, 0xFF	; 255
 74a:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <hour>
 74e:	88 31       	cpi	r24, 0x18	; 24
 750:	10 f0       	brcs	.+4      	; 0x756 <__vector_6+0x4e>
 752:	10 92 1f 38 	sts	0x381F, r1	; 0x80381f <hour>
	}
	
	return;
}
 756:	ff 91       	pop	r31
 758:	ef 91       	pop	r30
 75a:	8f 91       	pop	r24
 75c:	0f 90       	pop	r0
 75e:	0f be       	out	0x3f, r0	; 63
 760:	0f 90       	pop	r0
 762:	1f 90       	pop	r1
 764:	18 95       	reti

00000766 <main>:
int main(void) {

	//■□■――――――――――――――――――――――――――――――――――――■□■
	//		□ レジスタの設定
	//■□■――――――――――――――――――――――――――――――――――――■□■
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 766:	88 ed       	ldi	r24, 0xD8	; 216
 768:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLA = 0b00000000; //16/20 MHz内部オシレータ
 76a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RODATA_PM_OFFSET__+0x7f8060>
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 76e:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLB = 0b00000111; //16分周
 770:	97 e0       	ldi	r25, 0x07	; 7
 772:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>

	//入出力モード設定
	VPORTA_DIR = 0b11111111; //ポートA 
 776:	9f ef       	ldi	r25, 0xFF	; 255
 778:	90 b9       	out	0x00, r25	; 0
	VPORTB_DIR = 0b11111100; //ポートB 
 77a:	2c ef       	ldi	r18, 0xFC	; 252
 77c:	24 b9       	out	0x04, r18	; 4
	VPORTC_DIR = 0b11111111; //ポートC
 77e:	98 b9       	out	0x08, r25	; 8

	//出力の初期化
	VPORTA_OUT = 0b00000000; //ポートA
 780:	11 b8       	out	0x01, r1	; 1
	VPORTB_OUT = 0b00000000; //ポートB
 782:	15 b8       	out	0x05, r1	; 5
	VPORTC_OUT = 0b00000000; //ポートC
 784:	19 b8       	out	0x09, r1	; 9

	//焦電型赤外線センサー入力
	PORTB_PIN0CTRL = 0b00000001; //プルアップ無効 両方のエッジを検出する
 786:	91 e0       	ldi	r25, 0x01	; 1
 788:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <__RODATA_PM_OFFSET__+0x7f8430>

	//タクトスイッチ入力
	PORTB_PIN1CTRL = 0b00001000; //プルアップ有効
 78c:	28 e0       	ldi	r18, 0x08	; 8
 78e:	20 93 31 04 	sts	0x0431, r18	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>


	
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 792:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_XOSC32KCTRLA = 0b00000001; //外付け水晶振動子 イネーブル
 794:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__RODATA_PM_OFFSET__+0x7f807c>
	
	//RTC設定
	RTC_INTCTRL = 0b00000010; //比較一致割り込み許可
 798:	82 e0       	ldi	r24, 0x02	; 2
 79a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__RODATA_PM_OFFSET__+0x7f8142>
	RTC_CLKSEL  = 0b00000010; //クロック選択 XOSC32Kからの32.768 kHz
 79e:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <__RODATA_PM_OFFSET__+0x7f8147>
	//STATUS.CTRLABUSYフラグが1の間待機
	while((RTC_STATUS & 0b00000001));
 7a2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7f8141>
 7a6:	80 fd       	sbrc	r24, 0
 7a8:	fc cf       	rjmp	.-8      	; 0x7a2 <main+0x3c>
	RTC_CTRLA   = 0b11111001; //ｽﾀﾝﾊﾞｲ休止動作でもRTC許可 32768分周 RTC許可
 7aa:	89 ef       	ldi	r24, 0xF9	; 249
 7ac:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__RODATA_PM_OFFSET__+0x7f8140>

	//割り込みたい間隔の秒数-1
	RTC_CMP = 0;
 7b0:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <__RODATA_PM_OFFSET__+0x7f814c>
 7b4:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <__RODATA_PM_OFFSET__+0x7f814d>
	// //RTC PIT 周期割り込み設定
	// RTC_PITCTRLA = 0b01110001; //16384分周 周期割り込み計時器許可
	// RTC_PITINTCTRL = 0b00000001; //周期割り込み許可

	//タイマーA
	TCA0_SINGLE_CTRLA = 0b00001101; //1024分周 動作許可
 7b8:	8d e0       	ldi	r24, 0x0D	; 13
 7ba:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
	TCA0_SINGLE_CTRLB = 0b00000000; //
 7be:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
	TCA0_SINGLE_CMP0 = 1; // カウントがこの値に達したら割り込み(TCA0_CMP1_vect)が発生
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
 7ca:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__RODATA_PM_OFFSET__+0x7f8a29>
	TCA0_SINGLE_INTCTRL = 0b00010000; //CMP0割り込み許可
 7ce:	80 e1       	ldi	r24, 0x10	; 16
 7d0:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__RODATA_PM_OFFSET__+0x7f8a0a>

	//ADC設定
	ADC0_CTRLA = 0b00000001; //ADC Enable
 7d4:	91 e0       	ldi	r25, 0x01	; 1
 7d6:	90 93 00 06 	sts	0x0600, r25	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
	ADC0_CTRLB = 0b00000000; //累積なし
 7da:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <__RODATA_PM_OFFSET__+0x7f8601>
	ADC0_CTRLC = 0b01010101; //VREF = VDD, プリスケーラ1/64
 7de:	95 e5       	ldi	r25, 0x55	; 85
 7e0:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__RODATA_PM_OFFSET__+0x7f8602>
	VREF_CTRLA = 0b00010000; //内部基準電圧 1.1V
 7e4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__RODATA_PM_OFFSET__+0x7f80a0>

	set_sleep_mode(SLEEP_MODE_STANDBY); //スリープモードを設定
 7e8:	e0 e5       	ldi	r30, 0x50	; 80
 7ea:	f0 e0       	ldi	r31, 0x00	; 0
 7ec:	80 81       	ld	r24, Z
 7ee:	89 7f       	andi	r24, 0xF9	; 249
 7f0:	82 60       	ori	r24, 0x02	; 2
 7f2:	80 83       	st	Z, r24
 7f4:	81 ee       	ldi	r24, 0xE1	; 225
 7f6:	94 e0       	ldi	r25, 0x04	; 4
 7f8:	01 97       	sbiw	r24, 0x01	; 1
 7fa:	f1 f7       	brne	.-4      	; 0x7f8 <main+0x92>
 7fc:	00 c0       	rjmp	.+0      	; 0x7fe <main+0x98>
 7fe:	00 00       	nop

	//少し待機
	_delay_ms(5);

	sei(); //割り込み許可
 800:	78 94       	sei
	
	while (1) {

		if(!wakeup) {
 802:	80 91 1d 38 	lds	r24, 0x381D	; 0x80381d <wakeup>
 806:	90 91 1e 38 	lds	r25, 0x381E	; 0x80381e <wakeup+0x1>
 80a:	89 2b       	or	r24, r25
 80c:	99 f4       	brne	.+38     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
			//寝る準備
			seg_all_off();
 80e:	0e 94 40 01 	call	0x280	; 0x280 <seg_all_off>
			change_mode(MODE_CLOCK);
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	0e 94 4d 01 	call	0x29a	; 0x29a <change_mode>
			display_v = 0;
 818:	10 92 19 38 	sts	0x3819, r1	; 0x803819 <display_v>
			yet_v = 1;
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <yet_v>
			//寝る
			sleep_mode();
 822:	e0 e5       	ldi	r30, 0x50	; 80
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	80 81       	ld	r24, Z
 828:	81 60       	ori	r24, 0x01	; 1
 82a:	80 83       	st	Z, r24
 82c:	88 95       	sleep
 82e:	80 81       	ld	r24, Z
 830:	8e 7f       	andi	r24, 0xFE	; 254
 832:	80 83       	st	Z, r24
		}

		sens_delay_ms(5);
 834:	85 e0       	ldi	r24, 0x05	; 5
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	0e 94 c8 00 	call	0x190	; 0x190 <sens_delay_ms>

	}
 83c:	e2 cf       	rjmp	.-60     	; 0x802 <__DATA_REGION_LENGTH__+0x2>

0000083e <__divsf3>:
 83e:	0e 94 33 04 	call	0x866	; 0x866 <__divsf3x>
 842:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__fp_round>
 846:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__fp_pscB>
 84a:	58 f0       	brcs	.+22     	; 0x862 <__divsf3+0x24>
 84c:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fp_pscA>
 850:	40 f0       	brcs	.+16     	; 0x862 <__divsf3+0x24>
 852:	29 f4       	brne	.+10     	; 0x85e <__divsf3+0x20>
 854:	5f 3f       	cpi	r21, 0xFF	; 255
 856:	29 f0       	breq	.+10     	; 0x862 <__divsf3+0x24>
 858:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__fp_inf>
 85c:	51 11       	cpse	r21, r1
 85e:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_szero>
 862:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__fp_nan>

00000866 <__divsf3x>:
 866:	0e 94 25 05 	call	0xa4a	; 0xa4a <__fp_split3>
 86a:	68 f3       	brcs	.-38     	; 0x846 <__divsf3+0x8>

0000086c <__divsf3_pse>:
 86c:	99 23       	and	r25, r25
 86e:	b1 f3       	breq	.-20     	; 0x85c <__divsf3+0x1e>
 870:	55 23       	and	r21, r21
 872:	91 f3       	breq	.-28     	; 0x858 <__divsf3+0x1a>
 874:	95 1b       	sub	r25, r21
 876:	55 0b       	sbc	r21, r21
 878:	bb 27       	eor	r27, r27
 87a:	aa 27       	eor	r26, r26
 87c:	62 17       	cp	r22, r18
 87e:	73 07       	cpc	r23, r19
 880:	84 07       	cpc	r24, r20
 882:	38 f0       	brcs	.+14     	; 0x892 <__divsf3_pse+0x26>
 884:	9f 5f       	subi	r25, 0xFF	; 255
 886:	5f 4f       	sbci	r21, 0xFF	; 255
 888:	22 0f       	add	r18, r18
 88a:	33 1f       	adc	r19, r19
 88c:	44 1f       	adc	r20, r20
 88e:	aa 1f       	adc	r26, r26
 890:	a9 f3       	breq	.-22     	; 0x87c <__divsf3_pse+0x10>
 892:	35 d0       	rcall	.+106    	; 0x8fe <__divsf3_pse+0x92>
 894:	0e 2e       	mov	r0, r30
 896:	3a f0       	brmi	.+14     	; 0x8a6 <__divsf3_pse+0x3a>
 898:	e0 e8       	ldi	r30, 0x80	; 128
 89a:	32 d0       	rcall	.+100    	; 0x900 <__divsf3_pse+0x94>
 89c:	91 50       	subi	r25, 0x01	; 1
 89e:	50 40       	sbci	r21, 0x00	; 0
 8a0:	e6 95       	lsr	r30
 8a2:	00 1c       	adc	r0, r0
 8a4:	ca f7       	brpl	.-14     	; 0x898 <__divsf3_pse+0x2c>
 8a6:	2b d0       	rcall	.+86     	; 0x8fe <__divsf3_pse+0x92>
 8a8:	fe 2f       	mov	r31, r30
 8aa:	29 d0       	rcall	.+82     	; 0x8fe <__divsf3_pse+0x92>
 8ac:	66 0f       	add	r22, r22
 8ae:	77 1f       	adc	r23, r23
 8b0:	88 1f       	adc	r24, r24
 8b2:	bb 1f       	adc	r27, r27
 8b4:	26 17       	cp	r18, r22
 8b6:	37 07       	cpc	r19, r23
 8b8:	48 07       	cpc	r20, r24
 8ba:	ab 07       	cpc	r26, r27
 8bc:	b0 e8       	ldi	r27, 0x80	; 128
 8be:	09 f0       	breq	.+2      	; 0x8c2 <__divsf3_pse+0x56>
 8c0:	bb 0b       	sbc	r27, r27
 8c2:	80 2d       	mov	r24, r0
 8c4:	bf 01       	movw	r22, r30
 8c6:	ff 27       	eor	r31, r31
 8c8:	93 58       	subi	r25, 0x83	; 131
 8ca:	5f 4f       	sbci	r21, 0xFF	; 255
 8cc:	3a f0       	brmi	.+14     	; 0x8dc <__divsf3_pse+0x70>
 8ce:	9e 3f       	cpi	r25, 0xFE	; 254
 8d0:	51 05       	cpc	r21, r1
 8d2:	78 f0       	brcs	.+30     	; 0x8f2 <__divsf3_pse+0x86>
 8d4:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__fp_inf>
 8d8:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_szero>
 8dc:	5f 3f       	cpi	r21, 0xFF	; 255
 8de:	e4 f3       	brlt	.-8      	; 0x8d8 <__divsf3_pse+0x6c>
 8e0:	98 3e       	cpi	r25, 0xE8	; 232
 8e2:	d4 f3       	brlt	.-12     	; 0x8d8 <__divsf3_pse+0x6c>
 8e4:	86 95       	lsr	r24
 8e6:	77 95       	ror	r23
 8e8:	67 95       	ror	r22
 8ea:	b7 95       	ror	r27
 8ec:	f7 95       	ror	r31
 8ee:	9f 5f       	subi	r25, 0xFF	; 255
 8f0:	c9 f7       	brne	.-14     	; 0x8e4 <__divsf3_pse+0x78>
 8f2:	88 0f       	add	r24, r24
 8f4:	91 1d       	adc	r25, r1
 8f6:	96 95       	lsr	r25
 8f8:	87 95       	ror	r24
 8fa:	97 f9       	bld	r25, 7
 8fc:	08 95       	ret
 8fe:	e1 e0       	ldi	r30, 0x01	; 1
 900:	66 0f       	add	r22, r22
 902:	77 1f       	adc	r23, r23
 904:	88 1f       	adc	r24, r24
 906:	bb 1f       	adc	r27, r27
 908:	62 17       	cp	r22, r18
 90a:	73 07       	cpc	r23, r19
 90c:	84 07       	cpc	r24, r20
 90e:	ba 07       	cpc	r27, r26
 910:	20 f0       	brcs	.+8      	; 0x91a <__divsf3_pse+0xae>
 912:	62 1b       	sub	r22, r18
 914:	73 0b       	sbc	r23, r19
 916:	84 0b       	sbc	r24, r20
 918:	ba 0b       	sbc	r27, r26
 91a:	ee 1f       	adc	r30, r30
 91c:	88 f7       	brcc	.-30     	; 0x900 <__divsf3_pse+0x94>
 91e:	e0 95       	com	r30
 920:	08 95       	ret

00000922 <__fixunssfsi>:
 922:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_splitA>
 926:	88 f0       	brcs	.+34     	; 0x94a <__fixunssfsi+0x28>
 928:	9f 57       	subi	r25, 0x7F	; 127
 92a:	98 f0       	brcs	.+38     	; 0x952 <__fixunssfsi+0x30>
 92c:	b9 2f       	mov	r27, r25
 92e:	99 27       	eor	r25, r25
 930:	b7 51       	subi	r27, 0x17	; 23
 932:	b0 f0       	brcs	.+44     	; 0x960 <__fixunssfsi+0x3e>
 934:	e1 f0       	breq	.+56     	; 0x96e <__fixunssfsi+0x4c>
 936:	66 0f       	add	r22, r22
 938:	77 1f       	adc	r23, r23
 93a:	88 1f       	adc	r24, r24
 93c:	99 1f       	adc	r25, r25
 93e:	1a f0       	brmi	.+6      	; 0x946 <__fixunssfsi+0x24>
 940:	ba 95       	dec	r27
 942:	c9 f7       	brne	.-14     	; 0x936 <__fixunssfsi+0x14>
 944:	14 c0       	rjmp	.+40     	; 0x96e <__fixunssfsi+0x4c>
 946:	b1 30       	cpi	r27, 0x01	; 1
 948:	91 f0       	breq	.+36     	; 0x96e <__fixunssfsi+0x4c>
 94a:	0e 94 47 05 	call	0xa8e	; 0xa8e <__fp_zero>
 94e:	b1 e0       	ldi	r27, 0x01	; 1
 950:	08 95       	ret
 952:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__fp_zero>
 956:	67 2f       	mov	r22, r23
 958:	78 2f       	mov	r23, r24
 95a:	88 27       	eor	r24, r24
 95c:	b8 5f       	subi	r27, 0xF8	; 248
 95e:	39 f0       	breq	.+14     	; 0x96e <__fixunssfsi+0x4c>
 960:	b9 3f       	cpi	r27, 0xF9	; 249
 962:	cc f3       	brlt	.-14     	; 0x956 <__fixunssfsi+0x34>
 964:	86 95       	lsr	r24
 966:	77 95       	ror	r23
 968:	67 95       	ror	r22
 96a:	b3 95       	inc	r27
 96c:	d9 f7       	brne	.-10     	; 0x964 <__fixunssfsi+0x42>
 96e:	3e f4       	brtc	.+14     	; 0x97e <__fixunssfsi+0x5c>
 970:	90 95       	com	r25
 972:	80 95       	com	r24
 974:	70 95       	com	r23
 976:	61 95       	neg	r22
 978:	7f 4f       	sbci	r23, 0xFF	; 255
 97a:	8f 4f       	sbci	r24, 0xFF	; 255
 97c:	9f 4f       	sbci	r25, 0xFF	; 255
 97e:	08 95       	ret

00000980 <__floatunsisf>:
 980:	e8 94       	clt
 982:	09 c0       	rjmp	.+18     	; 0x996 <__floatsisf+0x12>

00000984 <__floatsisf>:
 984:	97 fb       	bst	r25, 7
 986:	3e f4       	brtc	.+14     	; 0x996 <__floatsisf+0x12>
 988:	90 95       	com	r25
 98a:	80 95       	com	r24
 98c:	70 95       	com	r23
 98e:	61 95       	neg	r22
 990:	7f 4f       	sbci	r23, 0xFF	; 255
 992:	8f 4f       	sbci	r24, 0xFF	; 255
 994:	9f 4f       	sbci	r25, 0xFF	; 255
 996:	99 23       	and	r25, r25
 998:	a9 f0       	breq	.+42     	; 0x9c4 <__floatsisf+0x40>
 99a:	f9 2f       	mov	r31, r25
 99c:	96 e9       	ldi	r25, 0x96	; 150
 99e:	bb 27       	eor	r27, r27
 9a0:	93 95       	inc	r25
 9a2:	f6 95       	lsr	r31
 9a4:	87 95       	ror	r24
 9a6:	77 95       	ror	r23
 9a8:	67 95       	ror	r22
 9aa:	b7 95       	ror	r27
 9ac:	f1 11       	cpse	r31, r1
 9ae:	f8 cf       	rjmp	.-16     	; 0x9a0 <__floatsisf+0x1c>
 9b0:	fa f4       	brpl	.+62     	; 0x9f0 <__floatsisf+0x6c>
 9b2:	bb 0f       	add	r27, r27
 9b4:	11 f4       	brne	.+4      	; 0x9ba <__floatsisf+0x36>
 9b6:	60 ff       	sbrs	r22, 0
 9b8:	1b c0       	rjmp	.+54     	; 0x9f0 <__floatsisf+0x6c>
 9ba:	6f 5f       	subi	r22, 0xFF	; 255
 9bc:	7f 4f       	sbci	r23, 0xFF	; 255
 9be:	8f 4f       	sbci	r24, 0xFF	; 255
 9c0:	9f 4f       	sbci	r25, 0xFF	; 255
 9c2:	16 c0       	rjmp	.+44     	; 0x9f0 <__floatsisf+0x6c>
 9c4:	88 23       	and	r24, r24
 9c6:	11 f0       	breq	.+4      	; 0x9cc <__floatsisf+0x48>
 9c8:	96 e9       	ldi	r25, 0x96	; 150
 9ca:	11 c0       	rjmp	.+34     	; 0x9ee <__floatsisf+0x6a>
 9cc:	77 23       	and	r23, r23
 9ce:	21 f0       	breq	.+8      	; 0x9d8 <__floatsisf+0x54>
 9d0:	9e e8       	ldi	r25, 0x8E	; 142
 9d2:	87 2f       	mov	r24, r23
 9d4:	76 2f       	mov	r23, r22
 9d6:	05 c0       	rjmp	.+10     	; 0x9e2 <__floatsisf+0x5e>
 9d8:	66 23       	and	r22, r22
 9da:	71 f0       	breq	.+28     	; 0x9f8 <__floatsisf+0x74>
 9dc:	96 e8       	ldi	r25, 0x86	; 134
 9de:	86 2f       	mov	r24, r22
 9e0:	70 e0       	ldi	r23, 0x00	; 0
 9e2:	60 e0       	ldi	r22, 0x00	; 0
 9e4:	2a f0       	brmi	.+10     	; 0x9f0 <__floatsisf+0x6c>
 9e6:	9a 95       	dec	r25
 9e8:	66 0f       	add	r22, r22
 9ea:	77 1f       	adc	r23, r23
 9ec:	88 1f       	adc	r24, r24
 9ee:	da f7       	brpl	.-10     	; 0x9e6 <__floatsisf+0x62>
 9f0:	88 0f       	add	r24, r24
 9f2:	96 95       	lsr	r25
 9f4:	87 95       	ror	r24
 9f6:	97 f9       	bld	r25, 7
 9f8:	08 95       	ret

000009fa <__fp_inf>:
 9fa:	97 f9       	bld	r25, 7
 9fc:	9f 67       	ori	r25, 0x7F	; 127
 9fe:	80 e8       	ldi	r24, 0x80	; 128
 a00:	70 e0       	ldi	r23, 0x00	; 0
 a02:	60 e0       	ldi	r22, 0x00	; 0
 a04:	08 95       	ret

00000a06 <__fp_nan>:
 a06:	9f ef       	ldi	r25, 0xFF	; 255
 a08:	80 ec       	ldi	r24, 0xC0	; 192
 a0a:	08 95       	ret

00000a0c <__fp_pscA>:
 a0c:	00 24       	eor	r0, r0
 a0e:	0a 94       	dec	r0
 a10:	16 16       	cp	r1, r22
 a12:	17 06       	cpc	r1, r23
 a14:	18 06       	cpc	r1, r24
 a16:	09 06       	cpc	r0, r25
 a18:	08 95       	ret

00000a1a <__fp_pscB>:
 a1a:	00 24       	eor	r0, r0
 a1c:	0a 94       	dec	r0
 a1e:	12 16       	cp	r1, r18
 a20:	13 06       	cpc	r1, r19
 a22:	14 06       	cpc	r1, r20
 a24:	05 06       	cpc	r0, r21
 a26:	08 95       	ret

00000a28 <__fp_round>:
 a28:	09 2e       	mov	r0, r25
 a2a:	03 94       	inc	r0
 a2c:	00 0c       	add	r0, r0
 a2e:	11 f4       	brne	.+4      	; 0xa34 <__fp_round+0xc>
 a30:	88 23       	and	r24, r24
 a32:	52 f0       	brmi	.+20     	; 0xa48 <__fp_round+0x20>
 a34:	bb 0f       	add	r27, r27
 a36:	40 f4       	brcc	.+16     	; 0xa48 <__fp_round+0x20>
 a38:	bf 2b       	or	r27, r31
 a3a:	11 f4       	brne	.+4      	; 0xa40 <__fp_round+0x18>
 a3c:	60 ff       	sbrs	r22, 0
 a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__fp_round+0x20>
 a40:	6f 5f       	subi	r22, 0xFF	; 255
 a42:	7f 4f       	sbci	r23, 0xFF	; 255
 a44:	8f 4f       	sbci	r24, 0xFF	; 255
 a46:	9f 4f       	sbci	r25, 0xFF	; 255
 a48:	08 95       	ret

00000a4a <__fp_split3>:
 a4a:	57 fd       	sbrc	r21, 7
 a4c:	90 58       	subi	r25, 0x80	; 128
 a4e:	44 0f       	add	r20, r20
 a50:	55 1f       	adc	r21, r21
 a52:	59 f0       	breq	.+22     	; 0xa6a <__fp_splitA+0x10>
 a54:	5f 3f       	cpi	r21, 0xFF	; 255
 a56:	71 f0       	breq	.+28     	; 0xa74 <__fp_splitA+0x1a>
 a58:	47 95       	ror	r20

00000a5a <__fp_splitA>:
 a5a:	88 0f       	add	r24, r24
 a5c:	97 fb       	bst	r25, 7
 a5e:	99 1f       	adc	r25, r25
 a60:	61 f0       	breq	.+24     	; 0xa7a <__fp_splitA+0x20>
 a62:	9f 3f       	cpi	r25, 0xFF	; 255
 a64:	79 f0       	breq	.+30     	; 0xa84 <__fp_splitA+0x2a>
 a66:	87 95       	ror	r24
 a68:	08 95       	ret
 a6a:	12 16       	cp	r1, r18
 a6c:	13 06       	cpc	r1, r19
 a6e:	14 06       	cpc	r1, r20
 a70:	55 1f       	adc	r21, r21
 a72:	f2 cf       	rjmp	.-28     	; 0xa58 <__fp_split3+0xe>
 a74:	46 95       	lsr	r20
 a76:	f1 df       	rcall	.-30     	; 0xa5a <__fp_splitA>
 a78:	08 c0       	rjmp	.+16     	; 0xa8a <__fp_splitA+0x30>
 a7a:	16 16       	cp	r1, r22
 a7c:	17 06       	cpc	r1, r23
 a7e:	18 06       	cpc	r1, r24
 a80:	99 1f       	adc	r25, r25
 a82:	f1 cf       	rjmp	.-30     	; 0xa66 <__fp_splitA+0xc>
 a84:	86 95       	lsr	r24
 a86:	71 05       	cpc	r23, r1
 a88:	61 05       	cpc	r22, r1
 a8a:	08 94       	sec
 a8c:	08 95       	ret

00000a8e <__fp_zero>:
 a8e:	e8 94       	clt

00000a90 <__fp_szero>:
 a90:	bb 27       	eor	r27, r27
 a92:	66 27       	eor	r22, r22
 a94:	77 27       	eor	r23, r23
 a96:	cb 01       	movw	r24, r22
 a98:	97 f9       	bld	r25, 7
 a9a:	08 95       	ret

00000a9c <__gesf2>:
 a9c:	0e 94 c0 05 	call	0xb80	; 0xb80 <__fp_cmp>
 aa0:	08 f4       	brcc	.+2      	; 0xaa4 <__gesf2+0x8>
 aa2:	8f ef       	ldi	r24, 0xFF	; 255
 aa4:	08 95       	ret

00000aa6 <__mulsf3>:
 aa6:	0e 94 66 05 	call	0xacc	; 0xacc <__mulsf3x>
 aaa:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__fp_round>
 aae:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fp_pscA>
 ab2:	38 f0       	brcs	.+14     	; 0xac2 <__mulsf3+0x1c>
 ab4:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__fp_pscB>
 ab8:	20 f0       	brcs	.+8      	; 0xac2 <__mulsf3+0x1c>
 aba:	95 23       	and	r25, r21
 abc:	11 f0       	breq	.+4      	; 0xac2 <__mulsf3+0x1c>
 abe:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__fp_inf>
 ac2:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__fp_nan>
 ac6:	11 24       	eor	r1, r1
 ac8:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_szero>

00000acc <__mulsf3x>:
 acc:	0e 94 25 05 	call	0xa4a	; 0xa4a <__fp_split3>
 ad0:	70 f3       	brcs	.-36     	; 0xaae <__mulsf3+0x8>

00000ad2 <__mulsf3_pse>:
 ad2:	95 9f       	mul	r25, r21
 ad4:	c1 f3       	breq	.-16     	; 0xac6 <__mulsf3+0x20>
 ad6:	95 0f       	add	r25, r21
 ad8:	50 e0       	ldi	r21, 0x00	; 0
 ada:	55 1f       	adc	r21, r21
 adc:	62 9f       	mul	r22, r18
 ade:	f0 01       	movw	r30, r0
 ae0:	72 9f       	mul	r23, r18
 ae2:	bb 27       	eor	r27, r27
 ae4:	f0 0d       	add	r31, r0
 ae6:	b1 1d       	adc	r27, r1
 ae8:	63 9f       	mul	r22, r19
 aea:	aa 27       	eor	r26, r26
 aec:	f0 0d       	add	r31, r0
 aee:	b1 1d       	adc	r27, r1
 af0:	aa 1f       	adc	r26, r26
 af2:	64 9f       	mul	r22, r20
 af4:	66 27       	eor	r22, r22
 af6:	b0 0d       	add	r27, r0
 af8:	a1 1d       	adc	r26, r1
 afa:	66 1f       	adc	r22, r22
 afc:	82 9f       	mul	r24, r18
 afe:	22 27       	eor	r18, r18
 b00:	b0 0d       	add	r27, r0
 b02:	a1 1d       	adc	r26, r1
 b04:	62 1f       	adc	r22, r18
 b06:	73 9f       	mul	r23, r19
 b08:	b0 0d       	add	r27, r0
 b0a:	a1 1d       	adc	r26, r1
 b0c:	62 1f       	adc	r22, r18
 b0e:	83 9f       	mul	r24, r19
 b10:	a0 0d       	add	r26, r0
 b12:	61 1d       	adc	r22, r1
 b14:	22 1f       	adc	r18, r18
 b16:	74 9f       	mul	r23, r20
 b18:	33 27       	eor	r19, r19
 b1a:	a0 0d       	add	r26, r0
 b1c:	61 1d       	adc	r22, r1
 b1e:	23 1f       	adc	r18, r19
 b20:	84 9f       	mul	r24, r20
 b22:	60 0d       	add	r22, r0
 b24:	21 1d       	adc	r18, r1
 b26:	82 2f       	mov	r24, r18
 b28:	76 2f       	mov	r23, r22
 b2a:	6a 2f       	mov	r22, r26
 b2c:	11 24       	eor	r1, r1
 b2e:	9f 57       	subi	r25, 0x7F	; 127
 b30:	50 40       	sbci	r21, 0x00	; 0
 b32:	9a f0       	brmi	.+38     	; 0xb5a <__mulsf3_pse+0x88>
 b34:	f1 f0       	breq	.+60     	; 0xb72 <__mulsf3_pse+0xa0>
 b36:	88 23       	and	r24, r24
 b38:	4a f0       	brmi	.+18     	; 0xb4c <__mulsf3_pse+0x7a>
 b3a:	ee 0f       	add	r30, r30
 b3c:	ff 1f       	adc	r31, r31
 b3e:	bb 1f       	adc	r27, r27
 b40:	66 1f       	adc	r22, r22
 b42:	77 1f       	adc	r23, r23
 b44:	88 1f       	adc	r24, r24
 b46:	91 50       	subi	r25, 0x01	; 1
 b48:	50 40       	sbci	r21, 0x00	; 0
 b4a:	a9 f7       	brne	.-22     	; 0xb36 <__mulsf3_pse+0x64>
 b4c:	9e 3f       	cpi	r25, 0xFE	; 254
 b4e:	51 05       	cpc	r21, r1
 b50:	80 f0       	brcs	.+32     	; 0xb72 <__mulsf3_pse+0xa0>
 b52:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__fp_inf>
 b56:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_szero>
 b5a:	5f 3f       	cpi	r21, 0xFF	; 255
 b5c:	e4 f3       	brlt	.-8      	; 0xb56 <__mulsf3_pse+0x84>
 b5e:	98 3e       	cpi	r25, 0xE8	; 232
 b60:	d4 f3       	brlt	.-12     	; 0xb56 <__mulsf3_pse+0x84>
 b62:	86 95       	lsr	r24
 b64:	77 95       	ror	r23
 b66:	67 95       	ror	r22
 b68:	b7 95       	ror	r27
 b6a:	f7 95       	ror	r31
 b6c:	e7 95       	ror	r30
 b6e:	9f 5f       	subi	r25, 0xFF	; 255
 b70:	c1 f7       	brne	.-16     	; 0xb62 <__mulsf3_pse+0x90>
 b72:	fe 2b       	or	r31, r30
 b74:	88 0f       	add	r24, r24
 b76:	91 1d       	adc	r25, r1
 b78:	96 95       	lsr	r25
 b7a:	87 95       	ror	r24
 b7c:	97 f9       	bld	r25, 7
 b7e:	08 95       	ret

00000b80 <__fp_cmp>:
 b80:	99 0f       	add	r25, r25
 b82:	00 08       	sbc	r0, r0
 b84:	55 0f       	add	r21, r21
 b86:	aa 0b       	sbc	r26, r26
 b88:	e0 e8       	ldi	r30, 0x80	; 128
 b8a:	fe ef       	ldi	r31, 0xFE	; 254
 b8c:	16 16       	cp	r1, r22
 b8e:	17 06       	cpc	r1, r23
 b90:	e8 07       	cpc	r30, r24
 b92:	f9 07       	cpc	r31, r25
 b94:	c0 f0       	brcs	.+48     	; 0xbc6 <__fp_cmp+0x46>
 b96:	12 16       	cp	r1, r18
 b98:	13 06       	cpc	r1, r19
 b9a:	e4 07       	cpc	r30, r20
 b9c:	f5 07       	cpc	r31, r21
 b9e:	98 f0       	brcs	.+38     	; 0xbc6 <__fp_cmp+0x46>
 ba0:	62 1b       	sub	r22, r18
 ba2:	73 0b       	sbc	r23, r19
 ba4:	84 0b       	sbc	r24, r20
 ba6:	95 0b       	sbc	r25, r21
 ba8:	39 f4       	brne	.+14     	; 0xbb8 <__fp_cmp+0x38>
 baa:	0a 26       	eor	r0, r26
 bac:	61 f0       	breq	.+24     	; 0xbc6 <__fp_cmp+0x46>
 bae:	23 2b       	or	r18, r19
 bb0:	24 2b       	or	r18, r20
 bb2:	25 2b       	or	r18, r21
 bb4:	21 f4       	brne	.+8      	; 0xbbe <__fp_cmp+0x3e>
 bb6:	08 95       	ret
 bb8:	0a 26       	eor	r0, r26
 bba:	09 f4       	brne	.+2      	; 0xbbe <__fp_cmp+0x3e>
 bbc:	a1 40       	sbci	r26, 0x01	; 1
 bbe:	a6 95       	lsr	r26
 bc0:	8f ef       	ldi	r24, 0xFF	; 255
 bc2:	81 1d       	adc	r24, r1
 bc4:	81 1d       	adc	r24, r1
 bc6:	08 95       	ret

00000bc8 <_exit>:
 bc8:	f8 94       	cli

00000bca <__stop_program>:
 bca:	ff cf       	rjmp	.-2      	; 0xbca <__stop_program>
