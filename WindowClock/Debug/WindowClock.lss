
WindowClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00803800  00000dbc  00000e50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  0080380e  0080380e  00000e5e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002061  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001af6  00000000  00000000  00002f89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000090a  00000000  00000000  00004a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  0000538c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d7d  00000000  00000000  00005570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000824  00000000  00000000  000062ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00006b11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__vector_4>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__vector_6>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__vector_10>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
  88:	18 e3       	ldi	r17, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	ec eb       	ldi	r30, 0xBC	; 188
  90:	fd e0       	ldi	r31, 0x0D	; 13
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ae 30       	cpi	r26, 0x0E	; 14
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	28 e3       	ldi	r18, 0x38	; 56
  a0:	ae e0       	ldi	r26, 0x0E	; 14
  a2:	b8 e3       	ldi	r27, 0x38	; 56
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a3 32       	cpi	r26, 0x23	; 35
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <main>
  b2:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <get_v>:
// プログラム本文
//---------------------------------


//キャパシタに蓄えられた電源電圧と太陽電池の発電電圧を取得する関数
void get_v (void) {
  ba:	cf 92       	push	r12
  bc:	df 92       	push	r13
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
	
	uint16_t x = 0;
	uint16_t y = 0;

	// 基準電圧1.1V / 電源電圧 を10bit(1024段階)で測定
	ADC0_MUXPOS = 0b00011101; //基準電圧
  c6:	8d e1       	ldi	r24, 0x1D	; 29
  c8:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7f8606>

	ADC0_COMMAND = 1;//AD変換開始
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
	while(ADC0_COMMAND);
  d2:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
  d6:	81 11       	cpse	r24, r1
  d8:	fc cf       	rjmp	.-8      	; 0xd2 <get_v+0x18>
	ADC0_COMMAND = 0;//AD変換終了
  da:	c8 e0       	ldi	r28, 0x08	; 8
  dc:	d6 e0       	ldi	r29, 0x06	; 6
  de:	18 82       	st	Y, r1

	y = ADC0_RES;
  e0:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
  e4:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
	
	//電源電圧を算出
	supply_v = 1023 * 1.1 / y;
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 b8 05 	call	0xb70	; 0xb70 <__floatunsisf>
  f0:	6b 01       	movw	r12, r22
  f2:	7c 01       	movw	r14, r24
  f4:	9b 01       	movw	r18, r22
  f6:	ac 01       	movw	r20, r24
  f8:	6a e9       	ldi	r22, 0x9A	; 154
  fa:	79 ea       	ldi	r23, 0xA9	; 169
  fc:	8c e8       	ldi	r24, 0x8C	; 140
  fe:	94 e4       	ldi	r25, 0x44	; 68
 100:	0e 94 17 05 	call	0xa2e	; 0xa2e <__divsf3>
 104:	60 93 18 38 	sts	0x3818, r22	; 0x803818 <supply_v>
 108:	70 93 19 38 	sts	0x3819, r23	; 0x803819 <supply_v+0x1>
 10c:	80 93 1a 38 	sts	0x381A, r24	; 0x80381a <supply_v+0x2>
 110:	90 93 1b 38 	sts	0x381B, r25	; 0x80381b <supply_v+0x3>

	//PB1をタクトスイッチ入力から一時的に太陽電池電圧の測定ピンに切り替える
	PORTB_PIN1CTRL = 0b00000000; //プルアップ無効 エッジを検出しない
 114:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>
	VPORTB_DIR    |= 0b00000010; //出力モードに変更
 118:	84 b1       	in	r24, 0x04	; 4
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	84 b9       	out	0x04, r24	; 4
	VPORTB_OUT    &= 0b11111101; //出力Low
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	8d 7f       	andi	r24, 0xFD	; 253
 122:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	89 ef       	ldi	r24, 0xF9	; 249
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <__EEPROM_REGION_LENGTH__+0x28>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <__EEPROM_REGION_LENGTH__+0x2e>
 12e:	00 00       	nop
	_delay_ms(1);//少し待機
	VPORTB_DIR    &= 0b11111101; //入力モードに戻す
 130:	84 b1       	in	r24, 0x04	; 4
 132:	8d 7f       	andi	r24, 0xFD	; 253
 134:	84 b9       	out	0x04, r24	; 4

	//ADC入力ピンの選択
	// PB1ピンの電圧 / 電源電圧 を10bit(1024段階)で測定
	ADC0_MUXPOS = 0b00001010; //AIN10 = PB1
 136:	8a e0       	ldi	r24, 0x0A	; 10
 138:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7f8606>

	ADC0_COMMAND = 1;//AD変換開始
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	88 83       	st	Y, r24
	while(ADC0_COMMAND);
 140:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
 144:	81 11       	cpse	r24, r1
 146:	fc cf       	rjmp	.-8      	; 0x140 <__EEPROM_REGION_LENGTH__+0x40>
	ADC0_COMMAND = 0;//AD変換終了
 148:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>

	x = ADC0_RES;
 14c:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
 150:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>

	//PB1のプルアップを有効に戻す
	PORTB_PIN1CTRL = 0b00001001; //プルアップ有効 両方のエッジを検出する
 154:	89 e0       	ldi	r24, 0x09	; 9
 156:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>

	//太陽電池電圧を算出
	solar_v = x * 1.1 / y;
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 b8 05 	call	0xb70	; 0xb70 <__floatunsisf>
 162:	2d ec       	ldi	r18, 0xCD	; 205
 164:	3c ec       	ldi	r19, 0xCC	; 204
 166:	4c e8       	ldi	r20, 0x8C	; 140
 168:	5f e3       	ldi	r21, 0x3F	; 63
 16a:	0e 94 6f 06 	call	0xcde	; 0xcde <__mulsf3>
 16e:	a7 01       	movw	r20, r14
 170:	96 01       	movw	r18, r12
 172:	0e 94 17 05 	call	0xa2e	; 0xa2e <__divsf3>
 176:	60 93 14 38 	sts	0x3814, r22	; 0x803814 <solar_v>
 17a:	70 93 15 38 	sts	0x3815, r23	; 0x803815 <solar_v+0x1>
 17e:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <solar_v+0x2>
 182:	90 93 17 38 	sts	0x3817, r25	; 0x803817 <solar_v+0x3>
}
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	ff 90       	pop	r15
 18c:	ef 90       	pop	r14
 18e:	df 90       	pop	r13
 190:	cf 90       	pop	r12
 192:	08 95       	ret

00000194 <sens_delay_ms>:

//ボタン操作を受け付けながら待機する関数
void sens_delay_ms (uint16_t num) {
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	8c 01       	movw	r16, r24

	for (unsigned int i = 0; i < num; i++){
 19e:	c0 e0       	ldi	r28, 0x00	; 0
 1a0:	d0 e0       	ldi	r29, 0x00	; 0
 1a2:	67 c0       	rjmp	.+206    	; 0x272 <sens_delay_ms+0xde>
		if(!(VPORTB_IN & PIN1_bm)) {
 1a4:	31 99       	sbic	0x06, 1	; 6
 1a6:	5e c0       	rjmp	.+188    	; 0x264 <sens_delay_ms+0xd0>

			//ここにタクトスイッチが押された時の動作を記述
			wakeup = 4800;
 1a8:	80 ec       	ldi	r24, 0xC0	; 192
 1aa:	92 e1       	ldi	r25, 0x12	; 18
 1ac:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 1b0:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>
		
			switch (mode) {
 1b4:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <mode>
 1b8:	82 30       	cpi	r24, 0x02	; 2
 1ba:	d1 f0       	breq	.+52     	; 0x1f0 <sens_delay_ms+0x5c>
 1bc:	83 30       	cpi	r24, 0x03	; 3
 1be:	89 f1       	breq	.+98     	; 0x222 <sens_delay_ms+0x8e>
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	09 f0       	breq	.+2      	; 0x1c6 <sens_delay_ms+0x32>
 1c4:	4f c0       	rjmp	.+158    	; 0x264 <sens_delay_ms+0xd0>
				case MODE_CLOCK:
					while(!(VPORTB_IN & PIN1_bm));
 1c6:	31 9b       	sbis	0x06, 1	; 6
 1c8:	fe cf       	rjmp	.-4      	; 0x1c6 <sens_delay_ms+0x32>
					if(change_mode_after) {
 1ca:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <change_mode_after>
 1ce:	88 23       	and	r24, r24
 1d0:	19 f0       	breq	.+6      	; 0x1d8 <sens_delay_ms+0x44>
						change_mode_after = 0;
 1d2:	10 92 1c 38 	sts	0x381C, r1	; 0x80381c <change_mode_after>
 1d6:	46 c0       	rjmp	.+140    	; 0x264 <sens_delay_ms+0xd0>
					}else{
						//電圧の取得
						get_v();
 1d8:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
						display_v = 200;
 1dc:	88 ec       	ldi	r24, 0xC8	; 200
 1de:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <display_v>
 1e2:	87 ea       	ldi	r24, 0xA7	; 167
 1e4:	91 e6       	ldi	r25, 0x61	; 97
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <sens_delay_ms+0x52>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <sens_delay_ms+0x58>
 1ec:	00 00       	nop
 1ee:	3a c0       	rjmp	.+116    	; 0x264 <sens_delay_ms+0xd0>
						_delay_ms(100);
					}
				break;

				case MODE_HOUR_SET:
					while(!(VPORTB_IN & PIN1_bm));
 1f0:	31 9b       	sbis	0x06, 1	; 6
 1f2:	fe cf       	rjmp	.-4      	; 0x1f0 <sens_delay_ms+0x5c>
					if(change_mode_after) {
 1f4:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <change_mode_after>
 1f8:	88 23       	and	r24, r24
 1fa:	19 f0       	breq	.+6      	; 0x202 <sens_delay_ms+0x6e>
						change_mode_after = 0;
 1fc:	10 92 1c 38 	sts	0x381C, r1	; 0x80381c <change_mode_after>
 200:	31 c0       	rjmp	.+98     	; 0x264 <sens_delay_ms+0xd0>
					}else{
						if(++hour >= 24) hour = 0;
 202:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <hour>
 206:	8f 5f       	subi	r24, 0xFF	; 255
 208:	80 93 21 38 	sts	0x3821, r24	; 0x803821 <hour>
 20c:	88 31       	cpi	r24, 0x18	; 24
 20e:	10 f0       	brcs	.+4      	; 0x214 <sens_delay_ms+0x80>
 210:	10 92 21 38 	sts	0x3821, r1	; 0x803821 <hour>
 214:	87 ea       	ldi	r24, 0xA7	; 167
 216:	91 e6       	ldi	r25, 0x61	; 97
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <sens_delay_ms+0x84>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <sens_delay_ms+0x8a>
 21e:	00 00       	nop
 220:	21 c0       	rjmp	.+66     	; 0x264 <sens_delay_ms+0xd0>
						_delay_ms(100);
					}
				break;

				case MODE_MIN_SET:
					while(!(VPORTB_IN & PIN1_bm));
 222:	31 9b       	sbis	0x06, 1	; 6
 224:	fe cf       	rjmp	.-4      	; 0x222 <sens_delay_ms+0x8e>
					if(change_mode_after) {
 226:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <change_mode_after>
 22a:	88 23       	and	r24, r24
 22c:	19 f0       	breq	.+6      	; 0x234 <sens_delay_ms+0xa0>
						change_mode_after = 0;
 22e:	10 92 1c 38 	sts	0x381C, r1	; 0x80381c <change_mode_after>
 232:	18 c0       	rjmp	.+48     	; 0x264 <sens_delay_ms+0xd0>
					}else{
						if(++min >= 60) {
 234:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <min>
 238:	8f 5f       	subi	r24, 0xFF	; 255
 23a:	80 93 22 38 	sts	0x3822, r24	; 0x803822 <min>
 23e:	8c 33       	cpi	r24, 0x3C	; 60
 240:	88 f0       	brcs	.+34     	; 0x264 <sens_delay_ms+0xd0>
							min = 0;
 242:	10 92 22 38 	sts	0x3822, r1	; 0x803822 <min>
							if(++hour >= 24) hour = 0;
 246:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <hour>
 24a:	8f 5f       	subi	r24, 0xFF	; 255
 24c:	80 93 21 38 	sts	0x3821, r24	; 0x803821 <hour>
 250:	88 31       	cpi	r24, 0x18	; 24
 252:	10 f0       	brcs	.+4      	; 0x258 <sens_delay_ms+0xc4>
 254:	10 92 21 38 	sts	0x3821, r1	; 0x803821 <hour>
 258:	87 ea       	ldi	r24, 0xA7	; 167
 25a:	91 e6       	ldi	r25, 0x61	; 97
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <sens_delay_ms+0xc8>
 260:	00 c0       	rjmp	.+0      	; 0x262 <sens_delay_ms+0xce>
 262:	00 00       	nop
 264:	89 ef       	ldi	r24, 0xF9	; 249
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <sens_delay_ms+0xd4>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <sens_delay_ms+0xda>
 26e:	00 00       	nop
}

//ボタン操作を受け付けながら待機する関数
void sens_delay_ms (uint16_t num) {

	for (unsigned int i = 0; i < num; i++){
 270:	21 96       	adiw	r28, 0x01	; 1
 272:	c0 17       	cp	r28, r16
 274:	d1 07       	cpc	r29, r17
 276:	08 f4       	brcc	.+2      	; 0x27a <sens_delay_ms+0xe6>
 278:	95 cf       	rjmp	.-214    	; 0x1a4 <sens_delay_ms+0x10>
				break;
			}
		}
		_delay_ms(1);
	}
}
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	08 95       	ret

00000284 <seg_all_off>:

//7セグをすべて消灯する関数
void seg_all_off (void) {

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	VPORTA_OUT = VPORTA_OUT & 0b00000001;
 284:	81 b1       	in	r24, 0x01	; 1
 286:	81 70       	andi	r24, 0x01	; 1
 288:	81 b9       	out	0x01, r24	; 1
	VPORTC_OUT = VPORTC_OUT & 0b11111110;
 28a:	89 b1       	in	r24, 0x09	; 9
 28c:	8e 7f       	andi	r24, 0xFE	; 254
 28e:	89 b9       	out	0x09, r24	; 9
	//ダイナミック点灯用トランジスタも全てOFF
	VPORTB_OUT = VPORTB_OUT & 0b11001111;
 290:	85 b1       	in	r24, 0x05	; 5
 292:	8f 7c       	andi	r24, 0xCF	; 207
 294:	85 b9       	out	0x05, r24	; 5
	VPORTC_OUT = VPORTC_OUT & 0b11110001;
 296:	89 b1       	in	r24, 0x09	; 9
 298:	81 7f       	andi	r24, 0xF1	; 241
 29a:	89 b9       	out	0x09, r24	; 9
 29c:	08 95       	ret

0000029e <change_mode>:
}

//モードを切り替える関数
//引数に0を指定した場合は次の定数のモードへ 定数を指定した場合はそのモードへ
void change_mode (uint8_t cmode) {
	if(cmode) {
 29e:	88 23       	and	r24, r24
 2a0:	19 f0       	breq	.+6      	; 0x2a8 <change_mode+0xa>
		mode = cmode;
 2a2:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <mode>
 2a6:	08 95       	ret
	}else if(mode == MODE_MIN_SET) {
 2a8:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <mode>
 2ac:	83 30       	cpi	r24, 0x03	; 3
 2ae:	21 f4       	brne	.+8      	; 0x2b8 <change_mode+0x1a>
		mode = MODE_CLOCK;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <mode>
 2b6:	08 95       	ret
	}else{
		mode++;
 2b8:	8f 5f       	subi	r24, 0xFF	; 255
 2ba:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <mode>
 2be:	08 95       	ret

000002c0 <__vector_10>:
	}
}

//TCA割り込み
ISR (TCA0_CMP0_vect) {
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	af 92       	push	r10
 2cc:	bf 92       	push	r11
 2ce:	cf 92       	push	r12
 2d0:	df 92       	push	r13
 2d2:	ef 92       	push	r14
 2d4:	ff 92       	push	r15
 2d6:	0f 93       	push	r16
 2d8:	1f 93       	push	r17
 2da:	2f 93       	push	r18
 2dc:	3f 93       	push	r19
 2de:	4f 93       	push	r20
 2e0:	5f 93       	push	r21
 2e2:	6f 93       	push	r22
 2e4:	7f 93       	push	r23
 2e6:	8f 93       	push	r24
 2e8:	9f 93       	push	r25
 2ea:	af 93       	push	r26
 2ec:	bf 93       	push	r27
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	ef 93       	push	r30
 2f4:	ff 93       	push	r31

	TCA0_SINGLE_CNT = 0;//カウントリセット
 2f6:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__RODATA_PM_OFFSET__+0x7f8a20>
 2fa:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__RODATA_PM_OFFSET__+0x7f8a21>
	TCA0_SINGLE_INTFLAGS = 0b00010000; //割り込み要求フラグを解除
 2fe:	80 e1       	ldi	r24, 0x10	; 16
 300:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>

	//wakeupが0ならセグをすべて消灯してそれ以外を実行しない
	//メインループのseg_all_off関数とsleep_mode関数の間にこの割り込みが入り中途半端に7セグが点灯した状態でスリープするのを防ぐ記述
	if(!wakeup) {
 304:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <wakeup>
 308:	90 91 20 38 	lds	r25, 0x3820	; 0x803820 <wakeup+0x1>
 30c:	89 2b       	or	r24, r25
 30e:	19 f4       	brne	.+6      	; 0x316 <__vector_10+0x56>
		seg_all_off();
 310:	0e 94 42 01 	call	0x284	; 0x284 <seg_all_off>
		return;
 314:	c7 c1       	rjmp	.+910    	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
	uint8_t dig1, dig2, dig3, dig4, dig5 = 0;
	uint8_t dig1c, dig2c, dig4c, dig5c;
	dig1c = dig2c = dig4c = dig5c = 0;

	//太陽電池の発電電圧とキャパシタの電圧を表示
	if(display_v && mode == MODE_CLOCK) {
 316:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <display_v>
 31a:	88 23       	and	r24, r24
 31c:	09 f4       	brne	.+2      	; 0x320 <__vector_10+0x60>
 31e:	6f c0       	rjmp	.+222    	; 0x3fe <__vector_10+0x13e>
 320:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <mode>
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	09 f0       	breq	.+2      	; 0x32a <__vector_10+0x6a>
 328:	6a c0       	rjmp	.+212    	; 0x3fe <__vector_10+0x13e>
		uint8_t spv = supply_v * 10;
 32a:	20 e0       	ldi	r18, 0x00	; 0
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	40 e2       	ldi	r20, 0x20	; 32
 330:	51 e4       	ldi	r21, 0x41	; 65
 332:	60 91 18 38 	lds	r22, 0x3818	; 0x803818 <supply_v>
 336:	70 91 19 38 	lds	r23, 0x3819	; 0x803819 <supply_v+0x1>
 33a:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <supply_v+0x2>
 33e:	90 91 1b 38 	lds	r25, 0x381B	; 0x80381b <supply_v+0x3>
 342:	0e 94 6f 06 	call	0xcde	; 0xcde <__mulsf3>
 346:	0e 94 89 05 	call	0xb12	; 0xb12 <__fixunssfsi>
 34a:	c6 2f       	mov	r28, r22
		uint8_t slv =  solar_v * 10;
 34c:	20 e0       	ldi	r18, 0x00	; 0
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	40 e2       	ldi	r20, 0x20	; 32
 352:	51 e4       	ldi	r21, 0x41	; 65
 354:	60 91 14 38 	lds	r22, 0x3814	; 0x803814 <solar_v>
 358:	70 91 15 38 	lds	r23, 0x3815	; 0x803815 <solar_v+0x1>
 35c:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <solar_v+0x2>
 360:	90 91 17 38 	lds	r25, 0x3817	; 0x803817 <solar_v+0x3>
 364:	0e 94 6f 06 	call	0xcde	; 0xcde <__mulsf3>
 368:	0e 94 89 05 	call	0xb12	; 0xb12 <__fixunssfsi>
		dig1  = seg[spv % 10];
 36c:	8d ec       	ldi	r24, 0xCD	; 205
 36e:	c8 9f       	mul	r28, r24
 370:	e1 2d       	mov	r30, r1
 372:	11 24       	eor	r1, r1
 374:	e6 95       	lsr	r30
 376:	e6 95       	lsr	r30
 378:	e6 95       	lsr	r30
 37a:	2e 2f       	mov	r18, r30
 37c:	22 0f       	add	r18, r18
 37e:	92 2f       	mov	r25, r18
 380:	99 0f       	add	r25, r25
 382:	99 0f       	add	r25, r25
 384:	92 0f       	add	r25, r18
 386:	c9 1b       	sub	r28, r25
 388:	ac 2f       	mov	r26, r28
 38a:	b0 e0       	ldi	r27, 0x00	; 0
 38c:	ad 5f       	subi	r26, 0xFD	; 253
 38e:	b7 4c       	sbci	r27, 0xC7	; 199
 390:	cc 91       	ld	r28, X
		dig2  = seg[(spv / 10) % 10];
 392:	e8 9f       	mul	r30, r24
 394:	91 2d       	mov	r25, r1
 396:	11 24       	eor	r1, r1
 398:	96 95       	lsr	r25
 39a:	96 95       	lsr	r25
 39c:	96 95       	lsr	r25
 39e:	99 0f       	add	r25, r25
 3a0:	29 2f       	mov	r18, r25
 3a2:	22 0f       	add	r18, r18
 3a4:	22 0f       	add	r18, r18
 3a6:	92 0f       	add	r25, r18
 3a8:	e9 1b       	sub	r30, r25
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	ed 5f       	subi	r30, 0xFD	; 253
 3ae:	f7 4c       	sbci	r31, 0xC7	; 199
 3b0:	d0 81       	ld	r29, Z
		dig3  = 0b00000000;
		dig4  = seg[slv % 10];
 3b2:	68 9f       	mul	r22, r24
 3b4:	e1 2d       	mov	r30, r1
 3b6:	11 24       	eor	r1, r1
 3b8:	e6 95       	lsr	r30
 3ba:	e6 95       	lsr	r30
 3bc:	e6 95       	lsr	r30
 3be:	2e 2f       	mov	r18, r30
 3c0:	22 0f       	add	r18, r18
 3c2:	92 2f       	mov	r25, r18
 3c4:	99 0f       	add	r25, r25
 3c6:	99 0f       	add	r25, r25
 3c8:	92 0f       	add	r25, r18
 3ca:	69 1b       	sub	r22, r25
 3cc:	a6 2f       	mov	r26, r22
 3ce:	b0 e0       	ldi	r27, 0x00	; 0
 3d0:	ad 5f       	subi	r26, 0xFD	; 253
 3d2:	b7 4c       	sbci	r27, 0xC7	; 199
 3d4:	1c 91       	ld	r17, X
		dig5  = seg[(slv / 10) % 10];
 3d6:	e8 9f       	mul	r30, r24
 3d8:	81 2d       	mov	r24, r1
 3da:	11 24       	eor	r1, r1
 3dc:	86 95       	lsr	r24
 3de:	86 95       	lsr	r24
 3e0:	86 95       	lsr	r24
 3e2:	88 0f       	add	r24, r24
 3e4:	98 2f       	mov	r25, r24
 3e6:	99 0f       	add	r25, r25
 3e8:	99 0f       	add	r25, r25
 3ea:	89 0f       	add	r24, r25
 3ec:	e8 1b       	sub	r30, r24
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	ed 5f       	subi	r30, 0xFD	; 253
 3f2:	f7 4c       	sbci	r31, 0xC7	; 199
 3f4:	00 81       	ld	r16, Z
		dig2c = dig5c = 0b00000001;//ドット(小数点)
 3f6:	bb 24       	eor	r11, r11
 3f8:	b3 94       	inc	r11
	if(display_v && mode == MODE_CLOCK) {
		uint8_t spv = supply_v * 10;
		uint8_t slv =  solar_v * 10;
		dig1  = seg[spv % 10];
		dig2  = seg[(spv / 10) % 10];
		dig3  = 0b00000000;
 3fa:	a1 2c       	mov	r10, r1
	uint8_t dig1, dig2, dig3, dig4, dig5 = 0;
	uint8_t dig1c, dig2c, dig4c, dig5c;
	dig1c = dig2c = dig4c = dig5c = 0;

	//太陽電池の発電電圧とキャパシタの電圧を表示
	if(display_v && mode == MODE_CLOCK) {
 3fc:	55 c0       	rjmp	.+170    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
		dig4  = seg[slv % 10];
		dig5  = seg[(slv / 10) % 10];
		dig2c = dig5c = 0b00000001;//ドット(小数点)

	}else{//時刻を表示
		dig1  = seg[min % 10];
 3fe:	c0 91 22 38 	lds	r28, 0x3822	; 0x803822 <min>
 402:	ed ec       	ldi	r30, 0xCD	; 205
 404:	ce 9f       	mul	r28, r30
 406:	a1 2d       	mov	r26, r1
 408:	11 24       	eor	r1, r1
 40a:	a6 95       	lsr	r26
 40c:	a6 95       	lsr	r26
 40e:	a6 95       	lsr	r26
 410:	9a 2f       	mov	r25, r26
 412:	99 0f       	add	r25, r25
 414:	89 2f       	mov	r24, r25
 416:	88 0f       	add	r24, r24
 418:	88 0f       	add	r24, r24
 41a:	89 0f       	add	r24, r25
 41c:	c8 1b       	sub	r28, r24
 41e:	d0 e0       	ldi	r29, 0x00	; 0
 420:	cd 5f       	subi	r28, 0xFD	; 253
 422:	d7 4c       	sbci	r29, 0xC7	; 199
 424:	c8 81       	ld	r28, Y
		dig2  = seg[(min / 10) % 10];
 426:	ae 9f       	mul	r26, r30
 428:	81 2d       	mov	r24, r1
 42a:	11 24       	eor	r1, r1
 42c:	86 95       	lsr	r24
 42e:	86 95       	lsr	r24
 430:	86 95       	lsr	r24
 432:	88 0f       	add	r24, r24
 434:	98 2f       	mov	r25, r24
 436:	99 0f       	add	r25, r25
 438:	99 0f       	add	r25, r25
 43a:	89 0f       	add	r24, r25
 43c:	a8 1b       	sub	r26, r24
 43e:	b0 e0       	ldi	r27, 0x00	; 0
 440:	ad 5f       	subi	r26, 0xFD	; 253
 442:	b7 4c       	sbci	r27, 0xC7	; 199
 444:	dc 91       	ld	r29, X
		dig3  = 0b00000110;
		dig4  = seg[hour % 10];
 446:	a0 91 21 38 	lds	r26, 0x3821	; 0x803821 <hour>
 44a:	ae 9f       	mul	r26, r30
 44c:	81 2d       	mov	r24, r1
 44e:	11 24       	eor	r1, r1
 450:	86 95       	lsr	r24
 452:	86 95       	lsr	r24
 454:	86 95       	lsr	r24
 456:	28 2f       	mov	r18, r24
 458:	22 0f       	add	r18, r18
 45a:	92 2f       	mov	r25, r18
 45c:	99 0f       	add	r25, r25
 45e:	99 0f       	add	r25, r25
 460:	92 0f       	add	r25, r18
 462:	a9 1b       	sub	r26, r25
 464:	b0 e0       	ldi	r27, 0x00	; 0
 466:	ad 5f       	subi	r26, 0xFD	; 253
 468:	b7 4c       	sbci	r27, 0xC7	; 199
 46a:	1c 91       	ld	r17, X

		//dig5のみ0なら不点灯にする(ゼロサプレス)
		uint8_t zerocheck = (hour / 10) % 10;
 46c:	8e 9f       	mul	r24, r30
 46e:	e1 2d       	mov	r30, r1
 470:	11 24       	eor	r1, r1
 472:	e6 95       	lsr	r30
 474:	e6 95       	lsr	r30
 476:	e6 95       	lsr	r30
 478:	ee 0f       	add	r30, r30
 47a:	9e 2f       	mov	r25, r30
 47c:	99 0f       	add	r25, r25
 47e:	99 0f       	add	r25, r25
 480:	e9 0f       	add	r30, r25
 482:	8e 1b       	sub	r24, r30
		if(zerocheck == 0) {
 484:	59 f0       	breq	.+22     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
			dig5 = 0b00000000;
		}else{
			dig5   = seg[zerocheck];
 486:	e8 2f       	mov	r30, r24
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	ed 5f       	subi	r30, 0xFD	; 253
 48c:	f7 4c       	sbci	r31, 0xC7	; 199
 48e:	00 81       	ld	r16, Z
	}

	static uint8_t sel = 0;
	uint8_t dig1, dig2, dig3, dig4, dig5 = 0;
	uint8_t dig1c, dig2c, dig4c, dig5c;
	dig1c = dig2c = dig4c = dig5c = 0;
 490:	b1 2c       	mov	r11, r1
		dig2c = dig5c = 0b00000001;//ドット(小数点)

	}else{//時刻を表示
		dig1  = seg[min % 10];
		dig2  = seg[(min / 10) % 10];
		dig3  = 0b00000110;
 492:	0f 2e       	mov	r0, r31
 494:	f6 e0       	ldi	r31, 0x06	; 6
 496:	af 2e       	mov	r10, r31
 498:	f0 2d       	mov	r31, r0
 49a:	06 c0       	rjmp	.+12     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
	}

	static uint8_t sel = 0;
	uint8_t dig1, dig2, dig3, dig4, dig5 = 0;
	uint8_t dig1c, dig2c, dig4c, dig5c;
	dig1c = dig2c = dig4c = dig5c = 0;
 49c:	b1 2c       	mov	r11, r1
		dig4  = seg[hour % 10];

		//dig5のみ0なら不点灯にする(ゼロサプレス)
		uint8_t zerocheck = (hour / 10) % 10;
		if(zerocheck == 0) {
			dig5 = 0b00000000;
 49e:	00 e0       	ldi	r16, 0x00	; 0
		dig2c = dig5c = 0b00000001;//ドット(小数点)

	}else{//時刻を表示
		dig1  = seg[min % 10];
		dig2  = seg[(min / 10) % 10];
		dig3  = 0b00000110;
 4a0:	0f 2e       	mov	r0, r31
 4a2:	f6 e0       	ldi	r31, 0x06	; 6
 4a4:	af 2e       	mov	r10, r31
 4a6:	f0 2d       	mov	r31, r0
	}

	//時刻設定時の点滅演出
	//点滅カウンター
	static uint16_t wink = 0;
	if(mode == MODE_HOUR_SET) {
 4a8:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <mode>
 4ac:	82 30       	cpi	r24, 0x02	; 2
 4ae:	a9 f4       	brne	.+42     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
		if(++wink < 512) dig4 = dig5 = 0b00000000;
 4b0:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <wink.3361>
 4b4:	90 91 10 38 	lds	r25, 0x3810	; 0x803810 <wink.3361+0x1>
 4b8:	01 96       	adiw	r24, 0x01	; 1
 4ba:	80 93 0f 38 	sts	0x380F, r24	; 0x80380f <wink.3361>
 4be:	90 93 10 38 	sts	0x3810, r25	; 0x803810 <wink.3361+0x1>
 4c2:	81 15       	cp	r24, r1
 4c4:	22 e0       	ldi	r18, 0x02	; 2
 4c6:	92 07       	cpc	r25, r18
 4c8:	20 f1       	brcs	.+72     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
		else if (wink > 1023) wink = 0;
 4ca:	81 15       	cp	r24, r1
 4cc:	94 40       	sbci	r25, 0x04	; 4
 4ce:	30 f1       	brcs	.+76     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 4d0:	10 92 0f 38 	sts	0x380F, r1	; 0x80380f <wink.3361>
 4d4:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <wink.3361+0x1>
 4d8:	21 c0       	rjmp	.+66     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
	}else if(mode == MODE_MIN_SET) {
 4da:	83 30       	cpi	r24, 0x03	; 3
 4dc:	a9 f4       	brne	.+42     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
		if(++wink < 512) dig1 = dig2 = 0b00000000;
 4de:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <wink.3361>
 4e2:	90 91 10 38 	lds	r25, 0x3810	; 0x803810 <wink.3361+0x1>
 4e6:	01 96       	adiw	r24, 0x01	; 1
 4e8:	80 93 0f 38 	sts	0x380F, r24	; 0x80380f <wink.3361>
 4ec:	90 93 10 38 	sts	0x3810, r25	; 0x803810 <wink.3361+0x1>
 4f0:	81 15       	cp	r24, r1
 4f2:	22 e0       	ldi	r18, 0x02	; 2
 4f4:	92 07       	cpc	r25, r18
 4f6:	80 f0       	brcs	.+32     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
		else if (wink > 1023) wink = 0;
 4f8:	81 15       	cp	r24, r1
 4fa:	94 40       	sbci	r25, 0x04	; 4
 4fc:	78 f0       	brcs	.+30     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 4fe:	10 92 0f 38 	sts	0x380F, r1	; 0x80380f <wink.3361>
 502:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <wink.3361+0x1>
 506:	0a c0       	rjmp	.+20     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
	}else{
		wink = 0;
 508:	10 92 0f 38 	sts	0x380F, r1	; 0x80380f <wink.3361>
 50c:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <wink.3361+0x1>
 510:	05 c0       	rjmp	.+10     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>

	//時刻設定時の点滅演出
	//点滅カウンター
	static uint16_t wink = 0;
	if(mode == MODE_HOUR_SET) {
		if(++wink < 512) dig4 = dig5 = 0b00000000;
 512:	00 e0       	ldi	r16, 0x00	; 0
 514:	10 e0       	ldi	r17, 0x00	; 0
 516:	02 c0       	rjmp	.+4      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
		else if (wink > 1023) wink = 0;
	}else if(mode == MODE_MIN_SET) {
		if(++wink < 512) dig1 = dig2 = 0b00000000;
 518:	d0 e0       	ldi	r29, 0x00	; 0
 51a:	c0 e0       	ldi	r28, 0x00	; 0
		wink = 0;
	}


	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();
 51c:	0e 94 42 01 	call	0x284	; 0x284 <seg_all_off>

	//7セグの明るさ調整
	//太陽電池の電圧によって周囲の明るさを判定し7セグの明るさを変化させる
	if(solar_v > 1.2 || discharge) {
 520:	c0 90 14 38 	lds	r12, 0x3814	; 0x803814 <solar_v>
 524:	d0 90 15 38 	lds	r13, 0x3815	; 0x803815 <solar_v+0x1>
 528:	e0 90 16 38 	lds	r14, 0x3816	; 0x803816 <solar_v+0x2>
 52c:	f0 90 17 38 	lds	r15, 0x3817	; 0x803817 <solar_v+0x3>
 530:	2a e9       	ldi	r18, 0x9A	; 154
 532:	39 e9       	ldi	r19, 0x99	; 153
 534:	49 e9       	ldi	r20, 0x99	; 153
 536:	5f e3       	ldi	r21, 0x3F	; 63
 538:	c7 01       	movw	r24, r14
 53a:	b6 01       	movw	r22, r12
 53c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__gesf2>
 540:	18 16       	cp	r1, r24
 542:	24 f0       	brlt	.+8      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 544:	80 91 11 38 	lds	r24, 0x3811	; 0x803811 <discharge>
 548:	88 23       	and	r24, r24
 54a:	21 f0       	breq	.+8      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
		brightness = 3;
 54c:	83 e0       	ldi	r24, 0x03	; 3
 54e:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 552:	11 c0       	rjmp	.+34     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
	}else if(solar_v > 0.5) {
 554:	20 e0       	ldi	r18, 0x00	; 0
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	40 e0       	ldi	r20, 0x00	; 0
 55a:	5f e3       	ldi	r21, 0x3F	; 63
 55c:	c7 01       	movw	r24, r14
 55e:	b6 01       	movw	r22, r12
 560:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__gesf2>
 564:	18 16       	cp	r1, r24
 566:	24 f4       	brge	.+8      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
		brightness = 2;
 568:	82 e0       	ldi	r24, 0x02	; 2
 56a:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 56e:	03 c0       	rjmp	.+6      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
	}else{
		brightness = 1;
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
	}

	//点灯判定
	uint8_t seg_on = 0;
	if(++bn_pwm_count > 7) bn_pwm_count = 0;
 576:	80 91 12 38 	lds	r24, 0x3812	; 0x803812 <bn_pwm_count>
 57a:	8f 5f       	subi	r24, 0xFF	; 255
 57c:	80 93 12 38 	sts	0x3812, r24	; 0x803812 <bn_pwm_count>
 580:	88 30       	cpi	r24, 0x08	; 8
 582:	10 f0       	brcs	.+4      	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 584:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <bn_pwm_count>

	if(brightness == 3) { //bn_pwm_countがいくつでも全てのタイミングで点灯
 588:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 58c:	83 30       	cpi	r24, 0x03	; 3
 58e:	81 f0       	breq	.+32     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
		seg_on = 1;
	}else if(brightness == 2) {
 590:	82 30       	cpi	r24, 0x02	; 2
 592:	31 f4       	brne	.+12     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
		if(bn_pwm_count % 2) { //bn_pwm_countが1、3、5、7のタイミングで点灯
 594:	80 91 12 38 	lds	r24, 0x3812	; 0x803812 <bn_pwm_count>
 598:	80 fd       	sbrc	r24, 0
 59a:	0c c0       	rjmp	.+24     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
	}else{
		brightness = 1;
	}

	//点灯判定
	uint8_t seg_on = 0;
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	0f c0       	rjmp	.+30     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
		seg_on = 1;
	}else if(brightness == 2) {
		if(bn_pwm_count % 2) { //bn_pwm_countが1、3、5、7のタイミングで点灯
			seg_on = 1;
		}
	}else if(brightness == 1) {
 5a0:	81 30       	cpi	r24, 0x01	; 1
 5a2:	51 f4       	brne	.+20     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
		if(!(bn_pwm_count % 4)) { //bn_pwm_countが0、4のタイミングで点灯
 5a4:	80 91 12 38 	lds	r24, 0x3812	; 0x803812 <bn_pwm_count>
 5a8:	83 70       	andi	r24, 0x03	; 3
 5aa:	41 f0       	breq	.+16     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
	}else{
		brightness = 1;
	}

	//点灯判定
	uint8_t seg_on = 0;
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	07 c0       	rjmp	.+14     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
	if(++bn_pwm_count > 7) bn_pwm_count = 0;

	if(brightness == 3) { //bn_pwm_countがいくつでも全てのタイミングで点灯
		seg_on = 1;
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	05 c0       	rjmp	.+10     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
	}else if(brightness == 2) {
		if(bn_pwm_count % 2) { //bn_pwm_countが1、3、5、7のタイミングで点灯
			seg_on = 1;
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	03 c0       	rjmp	.+6      	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
	}else{
		brightness = 1;
	}

	//点灯判定
	uint8_t seg_on = 0;
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	01 c0       	rjmp	.+2      	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
		if(bn_pwm_count % 2) { //bn_pwm_countが1、3、5、7のタイミングで点灯
			seg_on = 1;
		}
	}else if(brightness == 1) {
		if(!(bn_pwm_count % 4)) { //bn_pwm_countが0、4のタイミングで点灯
			seg_on = 1;
 5bc:	81 e0       	ldi	r24, 0x01	; 1
		}
	}

	//点灯実行
	if(seg_on) {
 5be:	88 23       	and	r24, r24
 5c0:	a9 f1       	breq	.+106    	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
		switch ( sel ) {
 5c2:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <__data_end>
 5c6:	82 30       	cpi	r24, 0x02	; 2
 5c8:	e1 f0       	breq	.+56     	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 5ca:	28 f4       	brcc	.+10     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5cc:	88 23       	and	r24, r24
 5ce:	41 f0       	breq	.+16     	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 5d0:	81 30       	cpi	r24, 0x01	; 1
 5d2:	71 f0       	breq	.+28     	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 5d4:	2b c0       	rjmp	.+86     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 5d6:	83 30       	cpi	r24, 0x03	; 3
 5d8:	c9 f0       	breq	.+50     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
 5da:	84 30       	cpi	r24, 0x04	; 4
 5dc:	f9 f0       	breq	.+62     	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 5de:	26 c0       	rjmp	.+76     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>

			case 0:
			VPORTB_OUT = VPORTB_OUT | 0b00010000;
 5e0:	85 b1       	in	r24, 0x05	; 5
 5e2:	80 61       	ori	r24, 0x10	; 16
 5e4:	85 b9       	out	0x05, r24	; 5
			VPORTA_OUT = dig1;
 5e6:	c1 b9       	out	0x01, r28	; 1
			VPORTC_OUT = (dig1c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 5e8:	89 b1       	in	r24, 0x09	; 9
 5ea:	8e 7f       	andi	r24, 0xFE	; 254
 5ec:	89 b9       	out	0x09, r24	; 9
			break;
 5ee:	1e c0       	rjmp	.+60     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>

			case 1:
			VPORTC_OUT = VPORTC_OUT | 0b00001000;
 5f0:	89 b1       	in	r24, 0x09	; 9
 5f2:	88 60       	ori	r24, 0x08	; 8
 5f4:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig2;
 5f6:	d1 b9       	out	0x01, r29	; 1
			VPORTC_OUT = (dig2c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 5f8:	89 b1       	in	r24, 0x09	; 9
 5fa:	8e 7f       	andi	r24, 0xFE	; 254
 5fc:	b8 2a       	or	r11, r24
 5fe:	b9 b8       	out	0x09, r11	; 9
			break;
 600:	15 c0       	rjmp	.+42     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>

			case 2:
			VPORTB_OUT = VPORTB_OUT | 0b00100000;
 602:	85 b1       	in	r24, 0x05	; 5
 604:	80 62       	ori	r24, 0x20	; 32
 606:	85 b9       	out	0x05, r24	; 5
			VPORTA_OUT = dig3;
 608:	a1 b8       	out	0x01, r10	; 1
			break;
 60a:	10 c0       	rjmp	.+32     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>

			case 3:
			VPORTC_OUT = VPORTC_OUT | 0b00000100;
 60c:	89 b1       	in	r24, 0x09	; 9
 60e:	84 60       	ori	r24, 0x04	; 4
 610:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig4;
 612:	11 b9       	out	0x01, r17	; 1
			VPORTC_OUT = (dig4c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 614:	89 b1       	in	r24, 0x09	; 9
 616:	8e 7f       	andi	r24, 0xFE	; 254
 618:	89 b9       	out	0x09, r24	; 9
			break;
 61a:	08 c0       	rjmp	.+16     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>

			case 4:
			VPORTC_OUT = VPORTC_OUT | 0b00000010;
 61c:	89 b1       	in	r24, 0x09	; 9
 61e:	82 60       	ori	r24, 0x02	; 2
 620:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig5;
 622:	01 b9       	out	0x01, r16	; 1
			VPORTC_OUT = (dig5c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 624:	89 b1       	in	r24, 0x09	; 9
 626:	8e 7f       	andi	r24, 0xFE	; 254
 628:	b8 2a       	or	r11, r24
 62a:	b9 b8       	out	0x09, r11	; 9
		}
	}


	//5回に1回やること
	if ( ++sel == 5 ) {
 62c:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <__data_end>
 630:	8f 5f       	subi	r24, 0xFF	; 255
 632:	80 93 0e 38 	sts	0x380E, r24	; 0x80380e <__data_end>
 636:	85 30       	cpi	r24, 0x05	; 5
 638:	a9 f5       	brne	.+106    	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
		//selの0~5トグル動作
		sel = 0;
 63a:	10 92 0e 38 	sts	0x380E, r1	; 0x80380e <__data_end>

		//スリープへ向けwakeupを減らす
		if(wakeup) wakeup--;
 63e:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <wakeup>
 642:	90 91 20 38 	lds	r25, 0x3820	; 0x803820 <wakeup+0x1>
 646:	00 97       	sbiw	r24, 0x00	; 0
 648:	29 f0       	breq	.+10     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 64a:	01 97       	sbiw	r24, 0x01	; 1
 64c:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 650:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>

		//電圧表示時間を減らす
		if(display_v) display_v--;
 654:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <display_v>
 658:	88 23       	and	r24, r24
 65a:	19 f0       	breq	.+6      	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
 65c:	81 50       	subi	r24, 0x01	; 1
 65e:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <display_v>

		//タクトスイッチが長押しされている場合、長押しカウントを加算
		if(VPORTB_IN & PIN1_bm) {
 662:	31 9b       	sbis	0x06, 1	; 6
 664:	05 c0       	rjmp	.+10     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
			long_push = 0;
 666:	10 92 1d 38 	sts	0x381D, r1	; 0x80381d <long_push>
 66a:	10 92 1e 38 	sts	0x381E, r1	; 0x80381e <long_push+0x1>
 66e:	1a c0       	rjmp	.+52     	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
		}else{
			if(++long_push > 1200) {
 670:	80 91 1d 38 	lds	r24, 0x381D	; 0x80381d <long_push>
 674:	90 91 1e 38 	lds	r25, 0x381E	; 0x80381e <long_push+0x1>
 678:	01 96       	adiw	r24, 0x01	; 1
 67a:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <long_push>
 67e:	90 93 1e 38 	sts	0x381E, r25	; 0x80381e <long_push+0x1>
 682:	81 3b       	cpi	r24, 0xB1	; 177
 684:	94 40       	sbci	r25, 0x04	; 4
 686:	70 f0       	brcs	.+28     	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
				long_push = 0;
 688:	10 92 1d 38 	sts	0x381D, r1	; 0x80381d <long_push>
 68c:	10 92 1e 38 	sts	0x381E, r1	; 0x80381e <long_push+0x1>
				RTC_CNT = 0; //時刻設定をした後、秒数が0から始まるようにする
 690:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 694:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
				change_mode(0);
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	0e 94 4f 01 	call	0x29e	; 0x29e <change_mode>
				change_mode_after = 1;
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <change_mode_after>
		}
	}



}
 6a4:	ff 91       	pop	r31
 6a6:	ef 91       	pop	r30
 6a8:	df 91       	pop	r29
 6aa:	cf 91       	pop	r28
 6ac:	bf 91       	pop	r27
 6ae:	af 91       	pop	r26
 6b0:	9f 91       	pop	r25
 6b2:	8f 91       	pop	r24
 6b4:	7f 91       	pop	r23
 6b6:	6f 91       	pop	r22
 6b8:	5f 91       	pop	r21
 6ba:	4f 91       	pop	r20
 6bc:	3f 91       	pop	r19
 6be:	2f 91       	pop	r18
 6c0:	1f 91       	pop	r17
 6c2:	0f 91       	pop	r16
 6c4:	ff 90       	pop	r15
 6c6:	ef 90       	pop	r14
 6c8:	df 90       	pop	r13
 6ca:	cf 90       	pop	r12
 6cc:	bf 90       	pop	r11
 6ce:	af 90       	pop	r10
 6d0:	0f 90       	pop	r0
 6d2:	0f be       	out	0x3f, r0	; 63
 6d4:	0f 90       	pop	r0
 6d6:	1f 90       	pop	r1
 6d8:	18 95       	reti

000006da <__vector_4>:

//外部割り込み PB0が変化したら 両方のエッジを検出する(片方エッジにしたいがそうするとなぜかスタンバイから復帰しない)
ISR(PORTB_PORT_vect) {
 6da:	1f 92       	push	r1
 6dc:	0f 92       	push	r0
 6de:	0f b6       	in	r0, 0x3f	; 63
 6e0:	0f 92       	push	r0
 6e2:	11 24       	eor	r1, r1
 6e4:	cf 92       	push	r12
 6e6:	df 92       	push	r13
 6e8:	ef 92       	push	r14
 6ea:	ff 92       	push	r15
 6ec:	2f 93       	push	r18
 6ee:	3f 93       	push	r19
 6f0:	4f 93       	push	r20
 6f2:	5f 93       	push	r21
 6f4:	6f 93       	push	r22
 6f6:	7f 93       	push	r23
 6f8:	8f 93       	push	r24
 6fa:	9f 93       	push	r25
 6fc:	af 93       	push	r26
 6fe:	bf 93       	push	r27
 700:	ef 93       	push	r30
 702:	ff 93       	push	r31
	
	PORTB_INTFLAGS = PORTB_INTFLAGS | 0b00000010; //割り込み要求フラグ解除
 704:	e9 e2       	ldi	r30, 0x29	; 41
 706:	f4 e0       	ldi	r31, 0x04	; 4
 708:	80 81       	ld	r24, Z
 70a:	82 60       	ori	r24, 0x02	; 2
 70c:	80 83       	st	Z, r24

	//赤外線センサー PB0がLowに切り替わったら何もせず返す 両方のエッジを検出するようにしているので立ち下がりエッジ割り込みはここで無効にする
	if(!(VPORTB_IN & PIN0_bm)) {
 70e:	30 9b       	sbis	0x06, 0	; 6
 710:	4b c0       	rjmp	.+150    	; 0x7a8 <__vector_4+0xce>
		return;
	}

	//赤外線センサー PB0がHighだったら一定時間起き上がらせる
	if(VPORTB_IN & PIN0_bm) {
 712:	30 9b       	sbis	0x06, 0	; 6
 714:	49 c0       	rjmp	.+146    	; 0x7a8 <__vector_4+0xce>

		//電源電圧に応じて起きている時間を決める
		if     (supply_v > 4.3) wakeup = 3200;
 716:	c0 90 18 38 	lds	r12, 0x3818	; 0x803818 <supply_v>
 71a:	d0 90 19 38 	lds	r13, 0x3819	; 0x803819 <supply_v+0x1>
 71e:	e0 90 1a 38 	lds	r14, 0x381A	; 0x80381a <supply_v+0x2>
 722:	f0 90 1b 38 	lds	r15, 0x381B	; 0x80381b <supply_v+0x3>
 726:	2a e9       	ldi	r18, 0x9A	; 154
 728:	39 e9       	ldi	r19, 0x99	; 153
 72a:	49 e8       	ldi	r20, 0x89	; 137
 72c:	50 e4       	ldi	r21, 0x40	; 64
 72e:	c7 01       	movw	r24, r14
 730:	b6 01       	movw	r22, r12
 732:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__gesf2>
 736:	18 16       	cp	r1, r24
 738:	3c f4       	brge	.+14     	; 0x748 <__vector_4+0x6e>
 73a:	80 e8       	ldi	r24, 0x80	; 128
 73c:	9c e0       	ldi	r25, 0x0C	; 12
 73e:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 742:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>
 746:	28 c0       	rjmp	.+80     	; 0x798 <__vector_4+0xbe>
		else if(supply_v > 3.3) wakeup = 2600;
 748:	23 e3       	ldi	r18, 0x33	; 51
 74a:	33 e3       	ldi	r19, 0x33	; 51
 74c:	43 e5       	ldi	r20, 0x53	; 83
 74e:	50 e4       	ldi	r21, 0x40	; 64
 750:	c7 01       	movw	r24, r14
 752:	b6 01       	movw	r22, r12
 754:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__gesf2>
 758:	18 16       	cp	r1, r24
 75a:	3c f4       	brge	.+14     	; 0x76a <__vector_4+0x90>
 75c:	88 e2       	ldi	r24, 0x28	; 40
 75e:	9a e0       	ldi	r25, 0x0A	; 10
 760:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 764:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>
 768:	17 c0       	rjmp	.+46     	; 0x798 <__vector_4+0xbe>
		else if(supply_v > 2.6) wakeup = 2000;
 76a:	26 e6       	ldi	r18, 0x66	; 102
 76c:	36 e6       	ldi	r19, 0x66	; 102
 76e:	46 e2       	ldi	r20, 0x26	; 38
 770:	50 e4       	ldi	r21, 0x40	; 64
 772:	c7 01       	movw	r24, r14
 774:	b6 01       	movw	r22, r12
 776:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__gesf2>
 77a:	18 16       	cp	r1, r24
 77c:	3c f4       	brge	.+14     	; 0x78c <__vector_4+0xb2>
 77e:	80 ed       	ldi	r24, 0xD0	; 208
 780:	97 e0       	ldi	r25, 0x07	; 7
 782:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 786:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>
 78a:	06 c0       	rjmp	.+12     	; 0x798 <__vector_4+0xbe>
		else wakeup = 1400;
 78c:	88 e7       	ldi	r24, 0x78	; 120
 78e:	95 e0       	ldi	r25, 0x05	; 5
 790:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 794:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>

		//起きたら一度だけ電圧測定する
		if(yet_v) {
 798:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <yet_v>
 79c:	88 23       	and	r24, r24
 79e:	21 f0       	breq	.+8      	; 0x7a8 <__vector_4+0xce>
			yet_v = 0;
 7a0:	10 92 01 38 	sts	0x3801, r1	; 0x803801 <yet_v>
			get_v();
 7a4:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
		}
		return;
	}

	return;
}
 7a8:	ff 91       	pop	r31
 7aa:	ef 91       	pop	r30
 7ac:	bf 91       	pop	r27
 7ae:	af 91       	pop	r26
 7b0:	9f 91       	pop	r25
 7b2:	8f 91       	pop	r24
 7b4:	7f 91       	pop	r23
 7b6:	6f 91       	pop	r22
 7b8:	5f 91       	pop	r21
 7ba:	4f 91       	pop	r20
 7bc:	3f 91       	pop	r19
 7be:	2f 91       	pop	r18
 7c0:	ff 90       	pop	r15
 7c2:	ef 90       	pop	r14
 7c4:	df 90       	pop	r13
 7c6:	cf 90       	pop	r12
 7c8:	0f 90       	pop	r0
 7ca:	0f be       	out	0x3f, r0	; 63
 7cc:	0f 90       	pop	r0
 7ce:	1f 90       	pop	r1
 7d0:	18 95       	reti

000007d2 <__vector_6>:

//リアルタイムクロック 比較一致割り込み
ISR(RTC_CNT_vect) {
 7d2:	1f 92       	push	r1
 7d4:	0f 92       	push	r0
 7d6:	0f b6       	in	r0, 0x3f	; 63
 7d8:	0f 92       	push	r0
 7da:	11 24       	eor	r1, r1
 7dc:	2f 93       	push	r18
 7de:	3f 93       	push	r19
 7e0:	4f 93       	push	r20
 7e2:	5f 93       	push	r21
 7e4:	6f 93       	push	r22
 7e6:	7f 93       	push	r23
 7e8:	8f 93       	push	r24
 7ea:	9f 93       	push	r25
 7ec:	af 93       	push	r26
 7ee:	bf 93       	push	r27
 7f0:	ef 93       	push	r30
 7f2:	ff 93       	push	r31
	RTC_CNT = 0;
 7f4:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 7f8:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
	RTC_INTFLAGS = RTC_INTFLAGS | 0b00000010;
 7fc:	e3 e4       	ldi	r30, 0x43	; 67
 7fe:	f1 e0       	ldi	r31, 0x01	; 1
 800:	80 81       	ld	r24, Z
 802:	82 60       	ori	r24, 0x02	; 2
 804:	80 83       	st	Z, r24

	//時計を進める
	if (mode == MODE_CLOCK && ++min >= 60) {
 806:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <mode>
 80a:	81 30       	cpi	r24, 0x01	; 1
 80c:	91 f4       	brne	.+36     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 80e:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <min>
 812:	8f 5f       	subi	r24, 0xFF	; 255
 814:	80 93 22 38 	sts	0x3822, r24	; 0x803822 <min>
 818:	8c 33       	cpi	r24, 0x3C	; 60
 81a:	58 f0       	brcs	.+22     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
		min = 0;
 81c:	10 92 22 38 	sts	0x3822, r1	; 0x803822 <min>
		if(++hour >= 24) hour = 0;
 820:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <hour>
 824:	8f 5f       	subi	r24, 0xFF	; 255
 826:	80 93 21 38 	sts	0x3821, r24	; 0x803821 <hour>
 82a:	88 31       	cpi	r24, 0x18	; 24
 82c:	10 f0       	brcs	.+4      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 82e:	10 92 21 38 	sts	0x3821, r1	; 0x803821 <hour>
	}
	
	//30分に1回やる処理
	if(!(min % 30)) {
 832:	90 91 22 38 	lds	r25, 0x3822	; 0x803822 <min>
 836:	89 e8       	ldi	r24, 0x89	; 137
 838:	98 9f       	mul	r25, r24
 83a:	81 2d       	mov	r24, r1
 83c:	11 24       	eor	r1, r1
 83e:	82 95       	swap	r24
 840:	8f 70       	andi	r24, 0x0F	; 15
 842:	2e e1       	ldi	r18, 0x1E	; 30
 844:	82 9f       	mul	r24, r18
 846:	90 19       	sub	r25, r0
 848:	11 24       	eor	r1, r1
 84a:	91 11       	cpse	r25, r1
 84c:	44 c0       	rjmp	.+136    	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>

		if(!wakeup){
 84e:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <wakeup>
 852:	90 91 20 38 	lds	r25, 0x3820	; 0x803820 <wakeup+0x1>
 856:	89 2b       	or	r24, r25
 858:	09 f0       	breq	.+2      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 85a:	3d c0       	rjmp	.+122    	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
			get_v();
 85c:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
			//低電圧再起動処理 起きてる時にやると一瞬7セグがちらつくので起きてない時(厳密には起きてるカウントがされていない時)にやる
			if(supply_v <= MIN_SUPPLY_V) {
 860:	60 91 18 38 	lds	r22, 0x3818	; 0x803818 <supply_v>
 864:	70 91 19 38 	lds	r23, 0x3819	; 0x803819 <supply_v+0x1>
 868:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <supply_v+0x2>
 86c:	90 91 1b 38 	lds	r25, 0x381B	; 0x80381b <supply_v+0x3>
 870:	2a e9       	ldi	r18, 0x9A	; 154
 872:	39 e9       	ldi	r19, 0x99	; 153
 874:	49 ed       	ldi	r20, 0xD9	; 217
 876:	5f e3       	ldi	r21, 0x3F	; 63
 878:	0e 94 12 05 	call	0xa24	; 0xa24 <__cmpsf2>
 87c:	18 16       	cp	r1, r24
 87e:	94 f0       	brlt	.+36     	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
				//停止処理
				//ウォッチドッグタイマを0.008秒で起動
				wdt_enable(0b00000001);//0.008秒の場合、右4桁をデータシート上の8CLKのレジスタ設定値にする
 880:	88 ed       	ldi	r24, 0xD8	; 216
 882:	a8 95       	wdr
 884:	84 bf       	out	0x34, r24	; 52
 886:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
 88a:	81 60       	ori	r24, 0x01	; 1
 88c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
 890:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__RODATA_PM_OFFSET__+0x7f8101>
 894:	81 fd       	sbrc	r24, 1
 896:	fc cf       	rjmp	.-8      	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 898:	87 ea       	ldi	r24, 0xA7	; 167
 89a:	91 e6       	ldi	r25, 0x61	; 97
 89c:	01 97       	sbiw	r24, 0x01	; 1
 89e:	f1 f7       	brne	.-4      	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 8a2:	00 00       	nop
				//待機(しているあいだにウォッチドッグリセットがかかる)
				_delay_ms(100);
			}
			//高電圧放電処理
			if(supply_v >= MAX_SUPPLY_V) {
 8a4:	60 91 18 38 	lds	r22, 0x3818	; 0x803818 <supply_v>
 8a8:	70 91 19 38 	lds	r23, 0x3819	; 0x803819 <supply_v+0x1>
 8ac:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <supply_v+0x2>
 8b0:	90 91 1b 38 	lds	r25, 0x381B	; 0x80381b <supply_v+0x3>
 8b4:	26 e6       	ldi	r18, 0x66	; 102
 8b6:	36 e6       	ldi	r19, 0x66	; 102
 8b8:	46 ea       	ldi	r20, 0xA6	; 166
 8ba:	50 e4       	ldi	r21, 0x40	; 64
 8bc:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__gesf2>
 8c0:	88 23       	and	r24, r24
 8c2:	4c f0       	brlt	.+18     	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
				wakeup = 6400;
 8c4:	80 e0       	ldi	r24, 0x00	; 0
 8c6:	99 e1       	ldi	r25, 0x19	; 25
 8c8:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 8cc:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>
				discharge = 1;
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <discharge>
		}

	}

	return;
}
 8d6:	ff 91       	pop	r31
 8d8:	ef 91       	pop	r30
 8da:	bf 91       	pop	r27
 8dc:	af 91       	pop	r26
 8de:	9f 91       	pop	r25
 8e0:	8f 91       	pop	r24
 8e2:	7f 91       	pop	r23
 8e4:	6f 91       	pop	r22
 8e6:	5f 91       	pop	r21
 8e8:	4f 91       	pop	r20
 8ea:	3f 91       	pop	r19
 8ec:	2f 91       	pop	r18
 8ee:	0f 90       	pop	r0
 8f0:	0f be       	out	0x3f, r0	; 63
 8f2:	0f 90       	pop	r0
 8f4:	1f 90       	pop	r1
 8f6:	18 95       	reti

000008f8 <main>:
int main(void) {

	//■□■――――――――――――――――――――――――――――――――――――■□■
	//		□ レジスタの設定
	//■□■――――――――――――――――――――――――――――――――――――■□■
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 8f8:	88 ed       	ldi	r24, 0xD8	; 216
 8fa:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLA = 0b00000000; //16/20 MHz内部オシレータ
 8fc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RODATA_PM_OFFSET__+0x7f8060>
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 900:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLB = 0b00000111; //16分周
 902:	97 e0       	ldi	r25, 0x07	; 7
 904:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>

	//入出力モード設定
	VPORTA_DIR = 0b11111111; //ポートA 
 908:	9f ef       	ldi	r25, 0xFF	; 255
 90a:	90 b9       	out	0x00, r25	; 0
	VPORTB_DIR = 0b11111100; //ポートB 
 90c:	2c ef       	ldi	r18, 0xFC	; 252
 90e:	24 b9       	out	0x04, r18	; 4
	VPORTC_DIR = 0b11111111; //ポートC
 910:	98 b9       	out	0x08, r25	; 8

	//出力の初期化
	VPORTA_OUT = 0b00000000; //ポートA
 912:	11 b8       	out	0x01, r1	; 1
	VPORTB_OUT = 0b00000000; //ポートB
 914:	15 b8       	out	0x05, r1	; 5
	VPORTC_OUT = 0b00000000; //ポートC
 916:	19 b8       	out	0x09, r1	; 9

	//焦電型赤外線センサー入力
	PORTB_PIN0CTRL = 0b00000001; //プルアップ無効 両方のエッジを検出する
 918:	91 e0       	ldi	r25, 0x01	; 1
 91a:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <__RODATA_PM_OFFSET__+0x7f8430>

	//タクトスイッチ入力
	PORTB_PIN1CTRL = 0b00001000; //プルアップ有効
 91e:	28 e0       	ldi	r18, 0x08	; 8
 920:	20 93 31 04 	sts	0x0431, r18	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>


	
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 924:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_XOSC32KCTRLA = 0b00000001; //外付け水晶振動子 イネーブル
 926:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__RODATA_PM_OFFSET__+0x7f807c>
	
	//RTC設定
	RTC_INTCTRL = 0b00000010; //比較一致割り込み許可
 92a:	82 e0       	ldi	r24, 0x02	; 2
 92c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__RODATA_PM_OFFSET__+0x7f8142>
	RTC_CLKSEL  = 0b00000010; //クロック選択 XOSC32Kからの32.768 kHz
 930:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <__RODATA_PM_OFFSET__+0x7f8147>
	//STATUS.CTRLABUSYフラグが1の間待機
	while((RTC_STATUS & 0b00000001));
 934:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7f8141>
 938:	80 fd       	sbrc	r24, 0
 93a:	fc cf       	rjmp	.-8      	; 0x934 <main+0x3c>
	RTC_CTRLA   = 0b11111001; //ｽﾀﾝﾊﾞｲ休止動作でもRTC許可 32768分周 RTC許可
 93c:	89 ef       	ldi	r24, 0xF9	; 249
 93e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__RODATA_PM_OFFSET__+0x7f8140>

	//割り込みたい間隔の秒数-1
	RTC_CMP = 59;
 942:	8b e3       	ldi	r24, 0x3B	; 59
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__RODATA_PM_OFFSET__+0x7f814c>
 94a:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__RODATA_PM_OFFSET__+0x7f814d>
	// //RTC PIT 周期割り込み設定
	// RTC_PITCTRLA = 0b01110001; //16384分周 周期割り込み計時器許可
	// RTC_PITINTCTRL = 0b00000001; //周期割り込み許可

	//タイマーA
	TCA0_SINGLE_CTRLA = 0b00001101; //1024分周 動作許可
 94e:	8d e0       	ldi	r24, 0x0D	; 13
 950:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
	TCA0_SINGLE_CTRLB = 0b00000000; //
 954:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
	TCA0_SINGLE_CMP0 = 1; // カウントがこの値に達したら割り込み(TCA0_CMP1_vect)が発生
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
 960:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__RODATA_PM_OFFSET__+0x7f8a29>
	TCA0_SINGLE_INTCTRL = 0b00010000; //CMP0割り込み許可
 964:	80 e1       	ldi	r24, 0x10	; 16
 966:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__RODATA_PM_OFFSET__+0x7f8a0a>

	//ADC設定
	ADC0_CTRLA = 0b00000001; //ADC Enable
 96a:	91 e0       	ldi	r25, 0x01	; 1
 96c:	90 93 00 06 	sts	0x0600, r25	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
	ADC0_CTRLB = 0b00000000; //累積なし
 970:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <__RODATA_PM_OFFSET__+0x7f8601>
	ADC0_CTRLC = 0b01010101; //VREF = VDD, プリスケーラ1/64
 974:	95 e5       	ldi	r25, 0x55	; 85
 976:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__RODATA_PM_OFFSET__+0x7f8602>
	VREF_CTRLA = 0b00010000; //内部基準電圧 1.1V
 97a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__RODATA_PM_OFFSET__+0x7f80a0>

	set_sleep_mode(SLEEP_MODE_STANDBY); //スリープモードを設定
 97e:	e0 e5       	ldi	r30, 0x50	; 80
 980:	f0 e0       	ldi	r31, 0x00	; 0
 982:	80 81       	ld	r24, Z
 984:	89 7f       	andi	r24, 0xF9	; 249
 986:	82 60       	ori	r24, 0x02	; 2
 988:	80 83       	st	Z, r24
 98a:	81 ee       	ldi	r24, 0xE1	; 225
 98c:	94 e0       	ldi	r25, 0x04	; 4
 98e:	01 97       	sbiw	r24, 0x01	; 1
 990:	f1 f7       	brne	.-4      	; 0x98e <main+0x96>
 992:	00 c0       	rjmp	.+0      	; 0x994 <main+0x9c>
 994:	00 00       	nop

	//少し待機
	_delay_ms(5);

	sei(); //割り込み許可
 996:	78 94       	sei
 998:	23 c0       	rjmp	.+70     	; 0x9e0 <main+0xe8>
	
	while (1) {

		//放電中ループ 起き続け3秒毎に電圧を計り下がっていたらブレイク
		while (discharge) {
			get_v();
 99a:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
			if(supply_v < (MAX_SUPPLY_V - 0.1)) {
 99e:	60 91 18 38 	lds	r22, 0x3818	; 0x803818 <supply_v>
 9a2:	70 91 19 38 	lds	r23, 0x3819	; 0x803819 <supply_v+0x1>
 9a6:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <supply_v+0x2>
 9aa:	90 91 1b 38 	lds	r25, 0x381B	; 0x80381b <supply_v+0x3>
 9ae:	23 e3       	ldi	r18, 0x33	; 51
 9b0:	33 e3       	ldi	r19, 0x33	; 51
 9b2:	43 ea       	ldi	r20, 0xA3	; 163
 9b4:	50 e4       	ldi	r21, 0x40	; 64
 9b6:	0e 94 12 05 	call	0xa24	; 0xa24 <__cmpsf2>
 9ba:	88 23       	and	r24, r24
 9bc:	3c f4       	brge	.+14     	; 0x9cc <main+0xd4>
				discharge = 0;
 9be:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <discharge>
				wakeup = 0;
 9c2:	10 92 1f 38 	sts	0x381F, r1	; 0x80381f <wakeup>
 9c6:	10 92 20 38 	sts	0x3820, r1	; 0x803820 <wakeup+0x1>
				break;
 9ca:	0e c0       	rjmp	.+28     	; 0x9e8 <main+0xf0>
			}
			sens_delay_ms(3000);
 9cc:	88 eb       	ldi	r24, 0xB8	; 184
 9ce:	9b e0       	ldi	r25, 0x0B	; 11
 9d0:	0e 94 ca 00 	call	0x194	; 0x194 <sens_delay_ms>
			wakeup = 6400;
 9d4:	80 e0       	ldi	r24, 0x00	; 0
 9d6:	99 e1       	ldi	r25, 0x19	; 25
 9d8:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <wakeup>
 9dc:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <wakeup+0x1>
	sei(); //割り込み許可
	
	while (1) {

		//放電中ループ 起き続け3秒毎に電圧を計り下がっていたらブレイク
		while (discharge) {
 9e0:	80 91 11 38 	lds	r24, 0x3811	; 0x803811 <discharge>
 9e4:	81 11       	cpse	r24, r1
 9e6:	d9 cf       	rjmp	.-78     	; 0x99a <main+0xa2>
			}
			sens_delay_ms(3000);
			wakeup = 6400;
		}

		if(!wakeup) {
 9e8:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <wakeup>
 9ec:	90 91 20 38 	lds	r25, 0x3820	; 0x803820 <wakeup+0x1>
 9f0:	89 2b       	or	r24, r25
 9f2:	99 f4       	brne	.+38     	; 0xa1a <main+0x122>
			//寝る準備
			seg_all_off();
 9f4:	0e 94 42 01 	call	0x284	; 0x284 <seg_all_off>
			change_mode(MODE_CLOCK);
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	0e 94 4f 01 	call	0x29e	; 0x29e <change_mode>
			display_v = 0;
 9fe:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <display_v>
			yet_v = 1;
 a02:	81 e0       	ldi	r24, 0x01	; 1
 a04:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <yet_v>
			//寝る
			sleep_mode();
 a08:	e0 e5       	ldi	r30, 0x50	; 80
 a0a:	f0 e0       	ldi	r31, 0x00	; 0
 a0c:	80 81       	ld	r24, Z
 a0e:	81 60       	ori	r24, 0x01	; 1
 a10:	80 83       	st	Z, r24
 a12:	88 95       	sleep
 a14:	80 81       	ld	r24, Z
 a16:	8e 7f       	andi	r24, 0xFE	; 254
 a18:	80 83       	st	Z, r24
		}
		
		sens_delay_ms(5);
 a1a:	85 e0       	ldi	r24, 0x05	; 5
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	0e 94 ca 00 	call	0x194	; 0x194 <sens_delay_ms>

	}
 a22:	de cf       	rjmp	.-68     	; 0x9e0 <main+0xe8>

00000a24 <__cmpsf2>:
 a24:	0e 94 f5 05 	call	0xbea	; 0xbea <__fp_cmp>
 a28:	08 f4       	brcc	.+2      	; 0xa2c <__cmpsf2+0x8>
 a2a:	81 e0       	ldi	r24, 0x01	; 1
 a2c:	08 95       	ret

00000a2e <__divsf3>:
 a2e:	0e 94 2b 05 	call	0xa56	; 0xa56 <__divsf3x>
 a32:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_round>
 a36:	0e 94 29 06 	call	0xc52	; 0xc52 <__fp_pscB>
 a3a:	58 f0       	brcs	.+22     	; 0xa52 <__divsf3+0x24>
 a3c:	0e 94 22 06 	call	0xc44	; 0xc44 <__fp_pscA>
 a40:	40 f0       	brcs	.+16     	; 0xa52 <__divsf3+0x24>
 a42:	29 f4       	brne	.+10     	; 0xa4e <__divsf3+0x20>
 a44:	5f 3f       	cpi	r21, 0xFF	; 255
 a46:	29 f0       	breq	.+10     	; 0xa52 <__divsf3+0x24>
 a48:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__fp_inf>
 a4c:	51 11       	cpse	r21, r1
 a4e:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__fp_szero>
 a52:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__fp_nan>

00000a56 <__divsf3x>:
 a56:	0e 94 41 06 	call	0xc82	; 0xc82 <__fp_split3>
 a5a:	68 f3       	brcs	.-38     	; 0xa36 <__divsf3+0x8>

00000a5c <__divsf3_pse>:
 a5c:	99 23       	and	r25, r25
 a5e:	b1 f3       	breq	.-20     	; 0xa4c <__divsf3+0x1e>
 a60:	55 23       	and	r21, r21
 a62:	91 f3       	breq	.-28     	; 0xa48 <__divsf3+0x1a>
 a64:	95 1b       	sub	r25, r21
 a66:	55 0b       	sbc	r21, r21
 a68:	bb 27       	eor	r27, r27
 a6a:	aa 27       	eor	r26, r26
 a6c:	62 17       	cp	r22, r18
 a6e:	73 07       	cpc	r23, r19
 a70:	84 07       	cpc	r24, r20
 a72:	38 f0       	brcs	.+14     	; 0xa82 <__divsf3_pse+0x26>
 a74:	9f 5f       	subi	r25, 0xFF	; 255
 a76:	5f 4f       	sbci	r21, 0xFF	; 255
 a78:	22 0f       	add	r18, r18
 a7a:	33 1f       	adc	r19, r19
 a7c:	44 1f       	adc	r20, r20
 a7e:	aa 1f       	adc	r26, r26
 a80:	a9 f3       	breq	.-22     	; 0xa6c <__divsf3_pse+0x10>
 a82:	35 d0       	rcall	.+106    	; 0xaee <__divsf3_pse+0x92>
 a84:	0e 2e       	mov	r0, r30
 a86:	3a f0       	brmi	.+14     	; 0xa96 <__divsf3_pse+0x3a>
 a88:	e0 e8       	ldi	r30, 0x80	; 128
 a8a:	32 d0       	rcall	.+100    	; 0xaf0 <__divsf3_pse+0x94>
 a8c:	91 50       	subi	r25, 0x01	; 1
 a8e:	50 40       	sbci	r21, 0x00	; 0
 a90:	e6 95       	lsr	r30
 a92:	00 1c       	adc	r0, r0
 a94:	ca f7       	brpl	.-14     	; 0xa88 <__divsf3_pse+0x2c>
 a96:	2b d0       	rcall	.+86     	; 0xaee <__divsf3_pse+0x92>
 a98:	fe 2f       	mov	r31, r30
 a9a:	29 d0       	rcall	.+82     	; 0xaee <__divsf3_pse+0x92>
 a9c:	66 0f       	add	r22, r22
 a9e:	77 1f       	adc	r23, r23
 aa0:	88 1f       	adc	r24, r24
 aa2:	bb 1f       	adc	r27, r27
 aa4:	26 17       	cp	r18, r22
 aa6:	37 07       	cpc	r19, r23
 aa8:	48 07       	cpc	r20, r24
 aaa:	ab 07       	cpc	r26, r27
 aac:	b0 e8       	ldi	r27, 0x80	; 128
 aae:	09 f0       	breq	.+2      	; 0xab2 <__divsf3_pse+0x56>
 ab0:	bb 0b       	sbc	r27, r27
 ab2:	80 2d       	mov	r24, r0
 ab4:	bf 01       	movw	r22, r30
 ab6:	ff 27       	eor	r31, r31
 ab8:	93 58       	subi	r25, 0x83	; 131
 aba:	5f 4f       	sbci	r21, 0xFF	; 255
 abc:	3a f0       	brmi	.+14     	; 0xacc <__divsf3_pse+0x70>
 abe:	9e 3f       	cpi	r25, 0xFE	; 254
 ac0:	51 05       	cpc	r21, r1
 ac2:	78 f0       	brcs	.+30     	; 0xae2 <__divsf3_pse+0x86>
 ac4:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__fp_inf>
 ac8:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__fp_szero>
 acc:	5f 3f       	cpi	r21, 0xFF	; 255
 ace:	e4 f3       	brlt	.-8      	; 0xac8 <__divsf3_pse+0x6c>
 ad0:	98 3e       	cpi	r25, 0xE8	; 232
 ad2:	d4 f3       	brlt	.-12     	; 0xac8 <__divsf3_pse+0x6c>
 ad4:	86 95       	lsr	r24
 ad6:	77 95       	ror	r23
 ad8:	67 95       	ror	r22
 ada:	b7 95       	ror	r27
 adc:	f7 95       	ror	r31
 ade:	9f 5f       	subi	r25, 0xFF	; 255
 ae0:	c9 f7       	brne	.-14     	; 0xad4 <__divsf3_pse+0x78>
 ae2:	88 0f       	add	r24, r24
 ae4:	91 1d       	adc	r25, r1
 ae6:	96 95       	lsr	r25
 ae8:	87 95       	ror	r24
 aea:	97 f9       	bld	r25, 7
 aec:	08 95       	ret
 aee:	e1 e0       	ldi	r30, 0x01	; 1
 af0:	66 0f       	add	r22, r22
 af2:	77 1f       	adc	r23, r23
 af4:	88 1f       	adc	r24, r24
 af6:	bb 1f       	adc	r27, r27
 af8:	62 17       	cp	r22, r18
 afa:	73 07       	cpc	r23, r19
 afc:	84 07       	cpc	r24, r20
 afe:	ba 07       	cpc	r27, r26
 b00:	20 f0       	brcs	.+8      	; 0xb0a <__divsf3_pse+0xae>
 b02:	62 1b       	sub	r22, r18
 b04:	73 0b       	sbc	r23, r19
 b06:	84 0b       	sbc	r24, r20
 b08:	ba 0b       	sbc	r27, r26
 b0a:	ee 1f       	adc	r30, r30
 b0c:	88 f7       	brcc	.-30     	; 0xaf0 <__divsf3_pse+0x94>
 b0e:	e0 95       	com	r30
 b10:	08 95       	ret

00000b12 <__fixunssfsi>:
 b12:	0e 94 49 06 	call	0xc92	; 0xc92 <__fp_splitA>
 b16:	88 f0       	brcs	.+34     	; 0xb3a <__fixunssfsi+0x28>
 b18:	9f 57       	subi	r25, 0x7F	; 127
 b1a:	98 f0       	brcs	.+38     	; 0xb42 <__fixunssfsi+0x30>
 b1c:	b9 2f       	mov	r27, r25
 b1e:	99 27       	eor	r25, r25
 b20:	b7 51       	subi	r27, 0x17	; 23
 b22:	b0 f0       	brcs	.+44     	; 0xb50 <__fixunssfsi+0x3e>
 b24:	e1 f0       	breq	.+56     	; 0xb5e <__fixunssfsi+0x4c>
 b26:	66 0f       	add	r22, r22
 b28:	77 1f       	adc	r23, r23
 b2a:	88 1f       	adc	r24, r24
 b2c:	99 1f       	adc	r25, r25
 b2e:	1a f0       	brmi	.+6      	; 0xb36 <__fixunssfsi+0x24>
 b30:	ba 95       	dec	r27
 b32:	c9 f7       	brne	.-14     	; 0xb26 <__fixunssfsi+0x14>
 b34:	14 c0       	rjmp	.+40     	; 0xb5e <__fixunssfsi+0x4c>
 b36:	b1 30       	cpi	r27, 0x01	; 1
 b38:	91 f0       	breq	.+36     	; 0xb5e <__fixunssfsi+0x4c>
 b3a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__fp_zero>
 b3e:	b1 e0       	ldi	r27, 0x01	; 1
 b40:	08 95       	ret
 b42:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_zero>
 b46:	67 2f       	mov	r22, r23
 b48:	78 2f       	mov	r23, r24
 b4a:	88 27       	eor	r24, r24
 b4c:	b8 5f       	subi	r27, 0xF8	; 248
 b4e:	39 f0       	breq	.+14     	; 0xb5e <__fixunssfsi+0x4c>
 b50:	b9 3f       	cpi	r27, 0xF9	; 249
 b52:	cc f3       	brlt	.-14     	; 0xb46 <__fixunssfsi+0x34>
 b54:	86 95       	lsr	r24
 b56:	77 95       	ror	r23
 b58:	67 95       	ror	r22
 b5a:	b3 95       	inc	r27
 b5c:	d9 f7       	brne	.-10     	; 0xb54 <__fixunssfsi+0x42>
 b5e:	3e f4       	brtc	.+14     	; 0xb6e <__fixunssfsi+0x5c>
 b60:	90 95       	com	r25
 b62:	80 95       	com	r24
 b64:	70 95       	com	r23
 b66:	61 95       	neg	r22
 b68:	7f 4f       	sbci	r23, 0xFF	; 255
 b6a:	8f 4f       	sbci	r24, 0xFF	; 255
 b6c:	9f 4f       	sbci	r25, 0xFF	; 255
 b6e:	08 95       	ret

00000b70 <__floatunsisf>:
 b70:	e8 94       	clt
 b72:	09 c0       	rjmp	.+18     	; 0xb86 <__floatsisf+0x12>

00000b74 <__floatsisf>:
 b74:	97 fb       	bst	r25, 7
 b76:	3e f4       	brtc	.+14     	; 0xb86 <__floatsisf+0x12>
 b78:	90 95       	com	r25
 b7a:	80 95       	com	r24
 b7c:	70 95       	com	r23
 b7e:	61 95       	neg	r22
 b80:	7f 4f       	sbci	r23, 0xFF	; 255
 b82:	8f 4f       	sbci	r24, 0xFF	; 255
 b84:	9f 4f       	sbci	r25, 0xFF	; 255
 b86:	99 23       	and	r25, r25
 b88:	a9 f0       	breq	.+42     	; 0xbb4 <__floatsisf+0x40>
 b8a:	f9 2f       	mov	r31, r25
 b8c:	96 e9       	ldi	r25, 0x96	; 150
 b8e:	bb 27       	eor	r27, r27
 b90:	93 95       	inc	r25
 b92:	f6 95       	lsr	r31
 b94:	87 95       	ror	r24
 b96:	77 95       	ror	r23
 b98:	67 95       	ror	r22
 b9a:	b7 95       	ror	r27
 b9c:	f1 11       	cpse	r31, r1
 b9e:	f8 cf       	rjmp	.-16     	; 0xb90 <__floatsisf+0x1c>
 ba0:	fa f4       	brpl	.+62     	; 0xbe0 <__floatsisf+0x6c>
 ba2:	bb 0f       	add	r27, r27
 ba4:	11 f4       	brne	.+4      	; 0xbaa <__floatsisf+0x36>
 ba6:	60 ff       	sbrs	r22, 0
 ba8:	1b c0       	rjmp	.+54     	; 0xbe0 <__floatsisf+0x6c>
 baa:	6f 5f       	subi	r22, 0xFF	; 255
 bac:	7f 4f       	sbci	r23, 0xFF	; 255
 bae:	8f 4f       	sbci	r24, 0xFF	; 255
 bb0:	9f 4f       	sbci	r25, 0xFF	; 255
 bb2:	16 c0       	rjmp	.+44     	; 0xbe0 <__floatsisf+0x6c>
 bb4:	88 23       	and	r24, r24
 bb6:	11 f0       	breq	.+4      	; 0xbbc <__floatsisf+0x48>
 bb8:	96 e9       	ldi	r25, 0x96	; 150
 bba:	11 c0       	rjmp	.+34     	; 0xbde <__floatsisf+0x6a>
 bbc:	77 23       	and	r23, r23
 bbe:	21 f0       	breq	.+8      	; 0xbc8 <__floatsisf+0x54>
 bc0:	9e e8       	ldi	r25, 0x8E	; 142
 bc2:	87 2f       	mov	r24, r23
 bc4:	76 2f       	mov	r23, r22
 bc6:	05 c0       	rjmp	.+10     	; 0xbd2 <__floatsisf+0x5e>
 bc8:	66 23       	and	r22, r22
 bca:	71 f0       	breq	.+28     	; 0xbe8 <__floatsisf+0x74>
 bcc:	96 e8       	ldi	r25, 0x86	; 134
 bce:	86 2f       	mov	r24, r22
 bd0:	70 e0       	ldi	r23, 0x00	; 0
 bd2:	60 e0       	ldi	r22, 0x00	; 0
 bd4:	2a f0       	brmi	.+10     	; 0xbe0 <__floatsisf+0x6c>
 bd6:	9a 95       	dec	r25
 bd8:	66 0f       	add	r22, r22
 bda:	77 1f       	adc	r23, r23
 bdc:	88 1f       	adc	r24, r24
 bde:	da f7       	brpl	.-10     	; 0xbd6 <__floatsisf+0x62>
 be0:	88 0f       	add	r24, r24
 be2:	96 95       	lsr	r25
 be4:	87 95       	ror	r24
 be6:	97 f9       	bld	r25, 7
 be8:	08 95       	ret

00000bea <__fp_cmp>:
 bea:	99 0f       	add	r25, r25
 bec:	00 08       	sbc	r0, r0
 bee:	55 0f       	add	r21, r21
 bf0:	aa 0b       	sbc	r26, r26
 bf2:	e0 e8       	ldi	r30, 0x80	; 128
 bf4:	fe ef       	ldi	r31, 0xFE	; 254
 bf6:	16 16       	cp	r1, r22
 bf8:	17 06       	cpc	r1, r23
 bfa:	e8 07       	cpc	r30, r24
 bfc:	f9 07       	cpc	r31, r25
 bfe:	c0 f0       	brcs	.+48     	; 0xc30 <__fp_cmp+0x46>
 c00:	12 16       	cp	r1, r18
 c02:	13 06       	cpc	r1, r19
 c04:	e4 07       	cpc	r30, r20
 c06:	f5 07       	cpc	r31, r21
 c08:	98 f0       	brcs	.+38     	; 0xc30 <__fp_cmp+0x46>
 c0a:	62 1b       	sub	r22, r18
 c0c:	73 0b       	sbc	r23, r19
 c0e:	84 0b       	sbc	r24, r20
 c10:	95 0b       	sbc	r25, r21
 c12:	39 f4       	brne	.+14     	; 0xc22 <__fp_cmp+0x38>
 c14:	0a 26       	eor	r0, r26
 c16:	61 f0       	breq	.+24     	; 0xc30 <__fp_cmp+0x46>
 c18:	23 2b       	or	r18, r19
 c1a:	24 2b       	or	r18, r20
 c1c:	25 2b       	or	r18, r21
 c1e:	21 f4       	brne	.+8      	; 0xc28 <__fp_cmp+0x3e>
 c20:	08 95       	ret
 c22:	0a 26       	eor	r0, r26
 c24:	09 f4       	brne	.+2      	; 0xc28 <__fp_cmp+0x3e>
 c26:	a1 40       	sbci	r26, 0x01	; 1
 c28:	a6 95       	lsr	r26
 c2a:	8f ef       	ldi	r24, 0xFF	; 255
 c2c:	81 1d       	adc	r24, r1
 c2e:	81 1d       	adc	r24, r1
 c30:	08 95       	ret

00000c32 <__fp_inf>:
 c32:	97 f9       	bld	r25, 7
 c34:	9f 67       	ori	r25, 0x7F	; 127
 c36:	80 e8       	ldi	r24, 0x80	; 128
 c38:	70 e0       	ldi	r23, 0x00	; 0
 c3a:	60 e0       	ldi	r22, 0x00	; 0
 c3c:	08 95       	ret

00000c3e <__fp_nan>:
 c3e:	9f ef       	ldi	r25, 0xFF	; 255
 c40:	80 ec       	ldi	r24, 0xC0	; 192
 c42:	08 95       	ret

00000c44 <__fp_pscA>:
 c44:	00 24       	eor	r0, r0
 c46:	0a 94       	dec	r0
 c48:	16 16       	cp	r1, r22
 c4a:	17 06       	cpc	r1, r23
 c4c:	18 06       	cpc	r1, r24
 c4e:	09 06       	cpc	r0, r25
 c50:	08 95       	ret

00000c52 <__fp_pscB>:
 c52:	00 24       	eor	r0, r0
 c54:	0a 94       	dec	r0
 c56:	12 16       	cp	r1, r18
 c58:	13 06       	cpc	r1, r19
 c5a:	14 06       	cpc	r1, r20
 c5c:	05 06       	cpc	r0, r21
 c5e:	08 95       	ret

00000c60 <__fp_round>:
 c60:	09 2e       	mov	r0, r25
 c62:	03 94       	inc	r0
 c64:	00 0c       	add	r0, r0
 c66:	11 f4       	brne	.+4      	; 0xc6c <__fp_round+0xc>
 c68:	88 23       	and	r24, r24
 c6a:	52 f0       	brmi	.+20     	; 0xc80 <__fp_round+0x20>
 c6c:	bb 0f       	add	r27, r27
 c6e:	40 f4       	brcc	.+16     	; 0xc80 <__fp_round+0x20>
 c70:	bf 2b       	or	r27, r31
 c72:	11 f4       	brne	.+4      	; 0xc78 <__fp_round+0x18>
 c74:	60 ff       	sbrs	r22, 0
 c76:	04 c0       	rjmp	.+8      	; 0xc80 <__fp_round+0x20>
 c78:	6f 5f       	subi	r22, 0xFF	; 255
 c7a:	7f 4f       	sbci	r23, 0xFF	; 255
 c7c:	8f 4f       	sbci	r24, 0xFF	; 255
 c7e:	9f 4f       	sbci	r25, 0xFF	; 255
 c80:	08 95       	ret

00000c82 <__fp_split3>:
 c82:	57 fd       	sbrc	r21, 7
 c84:	90 58       	subi	r25, 0x80	; 128
 c86:	44 0f       	add	r20, r20
 c88:	55 1f       	adc	r21, r21
 c8a:	59 f0       	breq	.+22     	; 0xca2 <__fp_splitA+0x10>
 c8c:	5f 3f       	cpi	r21, 0xFF	; 255
 c8e:	71 f0       	breq	.+28     	; 0xcac <__fp_splitA+0x1a>
 c90:	47 95       	ror	r20

00000c92 <__fp_splitA>:
 c92:	88 0f       	add	r24, r24
 c94:	97 fb       	bst	r25, 7
 c96:	99 1f       	adc	r25, r25
 c98:	61 f0       	breq	.+24     	; 0xcb2 <__fp_splitA+0x20>
 c9a:	9f 3f       	cpi	r25, 0xFF	; 255
 c9c:	79 f0       	breq	.+30     	; 0xcbc <__fp_splitA+0x2a>
 c9e:	87 95       	ror	r24
 ca0:	08 95       	ret
 ca2:	12 16       	cp	r1, r18
 ca4:	13 06       	cpc	r1, r19
 ca6:	14 06       	cpc	r1, r20
 ca8:	55 1f       	adc	r21, r21
 caa:	f2 cf       	rjmp	.-28     	; 0xc90 <__fp_split3+0xe>
 cac:	46 95       	lsr	r20
 cae:	f1 df       	rcall	.-30     	; 0xc92 <__fp_splitA>
 cb0:	08 c0       	rjmp	.+16     	; 0xcc2 <__fp_splitA+0x30>
 cb2:	16 16       	cp	r1, r22
 cb4:	17 06       	cpc	r1, r23
 cb6:	18 06       	cpc	r1, r24
 cb8:	99 1f       	adc	r25, r25
 cba:	f1 cf       	rjmp	.-30     	; 0xc9e <__fp_splitA+0xc>
 cbc:	86 95       	lsr	r24
 cbe:	71 05       	cpc	r23, r1
 cc0:	61 05       	cpc	r22, r1
 cc2:	08 94       	sec
 cc4:	08 95       	ret

00000cc6 <__fp_zero>:
 cc6:	e8 94       	clt

00000cc8 <__fp_szero>:
 cc8:	bb 27       	eor	r27, r27
 cca:	66 27       	eor	r22, r22
 ccc:	77 27       	eor	r23, r23
 cce:	cb 01       	movw	r24, r22
 cd0:	97 f9       	bld	r25, 7
 cd2:	08 95       	ret

00000cd4 <__gesf2>:
 cd4:	0e 94 f5 05 	call	0xbea	; 0xbea <__fp_cmp>
 cd8:	08 f4       	brcc	.+2      	; 0xcdc <__gesf2+0x8>
 cda:	8f ef       	ldi	r24, 0xFF	; 255
 cdc:	08 95       	ret

00000cde <__mulsf3>:
 cde:	0e 94 82 06 	call	0xd04	; 0xd04 <__mulsf3x>
 ce2:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_round>
 ce6:	0e 94 22 06 	call	0xc44	; 0xc44 <__fp_pscA>
 cea:	38 f0       	brcs	.+14     	; 0xcfa <__mulsf3+0x1c>
 cec:	0e 94 29 06 	call	0xc52	; 0xc52 <__fp_pscB>
 cf0:	20 f0       	brcs	.+8      	; 0xcfa <__mulsf3+0x1c>
 cf2:	95 23       	and	r25, r21
 cf4:	11 f0       	breq	.+4      	; 0xcfa <__mulsf3+0x1c>
 cf6:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__fp_inf>
 cfa:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__fp_nan>
 cfe:	11 24       	eor	r1, r1
 d00:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__fp_szero>

00000d04 <__mulsf3x>:
 d04:	0e 94 41 06 	call	0xc82	; 0xc82 <__fp_split3>
 d08:	70 f3       	brcs	.-36     	; 0xce6 <__mulsf3+0x8>

00000d0a <__mulsf3_pse>:
 d0a:	95 9f       	mul	r25, r21
 d0c:	c1 f3       	breq	.-16     	; 0xcfe <__mulsf3+0x20>
 d0e:	95 0f       	add	r25, r21
 d10:	50 e0       	ldi	r21, 0x00	; 0
 d12:	55 1f       	adc	r21, r21
 d14:	62 9f       	mul	r22, r18
 d16:	f0 01       	movw	r30, r0
 d18:	72 9f       	mul	r23, r18
 d1a:	bb 27       	eor	r27, r27
 d1c:	f0 0d       	add	r31, r0
 d1e:	b1 1d       	adc	r27, r1
 d20:	63 9f       	mul	r22, r19
 d22:	aa 27       	eor	r26, r26
 d24:	f0 0d       	add	r31, r0
 d26:	b1 1d       	adc	r27, r1
 d28:	aa 1f       	adc	r26, r26
 d2a:	64 9f       	mul	r22, r20
 d2c:	66 27       	eor	r22, r22
 d2e:	b0 0d       	add	r27, r0
 d30:	a1 1d       	adc	r26, r1
 d32:	66 1f       	adc	r22, r22
 d34:	82 9f       	mul	r24, r18
 d36:	22 27       	eor	r18, r18
 d38:	b0 0d       	add	r27, r0
 d3a:	a1 1d       	adc	r26, r1
 d3c:	62 1f       	adc	r22, r18
 d3e:	73 9f       	mul	r23, r19
 d40:	b0 0d       	add	r27, r0
 d42:	a1 1d       	adc	r26, r1
 d44:	62 1f       	adc	r22, r18
 d46:	83 9f       	mul	r24, r19
 d48:	a0 0d       	add	r26, r0
 d4a:	61 1d       	adc	r22, r1
 d4c:	22 1f       	adc	r18, r18
 d4e:	74 9f       	mul	r23, r20
 d50:	33 27       	eor	r19, r19
 d52:	a0 0d       	add	r26, r0
 d54:	61 1d       	adc	r22, r1
 d56:	23 1f       	adc	r18, r19
 d58:	84 9f       	mul	r24, r20
 d5a:	60 0d       	add	r22, r0
 d5c:	21 1d       	adc	r18, r1
 d5e:	82 2f       	mov	r24, r18
 d60:	76 2f       	mov	r23, r22
 d62:	6a 2f       	mov	r22, r26
 d64:	11 24       	eor	r1, r1
 d66:	9f 57       	subi	r25, 0x7F	; 127
 d68:	50 40       	sbci	r21, 0x00	; 0
 d6a:	9a f0       	brmi	.+38     	; 0xd92 <__mulsf3_pse+0x88>
 d6c:	f1 f0       	breq	.+60     	; 0xdaa <__mulsf3_pse+0xa0>
 d6e:	88 23       	and	r24, r24
 d70:	4a f0       	brmi	.+18     	; 0xd84 <__mulsf3_pse+0x7a>
 d72:	ee 0f       	add	r30, r30
 d74:	ff 1f       	adc	r31, r31
 d76:	bb 1f       	adc	r27, r27
 d78:	66 1f       	adc	r22, r22
 d7a:	77 1f       	adc	r23, r23
 d7c:	88 1f       	adc	r24, r24
 d7e:	91 50       	subi	r25, 0x01	; 1
 d80:	50 40       	sbci	r21, 0x00	; 0
 d82:	a9 f7       	brne	.-22     	; 0xd6e <__mulsf3_pse+0x64>
 d84:	9e 3f       	cpi	r25, 0xFE	; 254
 d86:	51 05       	cpc	r21, r1
 d88:	80 f0       	brcs	.+32     	; 0xdaa <__mulsf3_pse+0xa0>
 d8a:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__fp_inf>
 d8e:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__fp_szero>
 d92:	5f 3f       	cpi	r21, 0xFF	; 255
 d94:	e4 f3       	brlt	.-8      	; 0xd8e <__mulsf3_pse+0x84>
 d96:	98 3e       	cpi	r25, 0xE8	; 232
 d98:	d4 f3       	brlt	.-12     	; 0xd8e <__mulsf3_pse+0x84>
 d9a:	86 95       	lsr	r24
 d9c:	77 95       	ror	r23
 d9e:	67 95       	ror	r22
 da0:	b7 95       	ror	r27
 da2:	f7 95       	ror	r31
 da4:	e7 95       	ror	r30
 da6:	9f 5f       	subi	r25, 0xFF	; 255
 da8:	c1 f7       	brne	.-16     	; 0xd9a <__mulsf3_pse+0x90>
 daa:	fe 2b       	or	r31, r30
 dac:	88 0f       	add	r24, r24
 dae:	91 1d       	adc	r25, r1
 db0:	96 95       	lsr	r25
 db2:	87 95       	ror	r24
 db4:	97 f9       	bld	r25, 7
 db6:	08 95       	ret

00000db8 <_exit>:
 db8:	f8 94       	cli

00000dba <__stop_program>:
 dba:	ff cf       	rjmp	.-2      	; 0xdba <__stop_program>
