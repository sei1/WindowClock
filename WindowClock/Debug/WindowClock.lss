
WindowClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00803800  00000f16  00000faa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00803812  00803812  00000fbc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002126  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001abe  00000000  00000000  000031aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a74  00000000  00000000  00004c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  000056dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000de8  00000000  00000000  00005898  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007f0  00000000  00000000  00006680  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00006e70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 3b 04 	jmp	0x876	; 0x876 <__vector_4>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__vector_6>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 16 02 	jmp	0x42c	; 0x42c <__vector_10>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
  88:	18 e3       	ldi	r17, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	e6 e1       	ldi	r30, 0x16	; 22
  90:	ff e0       	ldi	r31, 0x0F	; 15
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 31       	cpi	r26, 0x12	; 18
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	28 e3       	ldi	r18, 0x38	; 56
  a0:	a2 e1       	ldi	r26, 0x12	; 18
  a2:	b8 e3       	ldi	r27, 0x38	; 56
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a2 33       	cpi	r26, 0x32	; 50
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 16 05 	call	0xa2c	; 0xa2c <main>
  b2:	0c 94 89 07 	jmp	0xf12	; 0xf12 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <get_v>:
// プログラム本文
//---------------------------------


//キャパシタに蓄えられた電源電圧と太陽電池の発電電圧を取得する関数
void get_v (void) {
  ba:	cf 92       	push	r12
  bc:	df 92       	push	r13
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
	
	uint16_t x = 0;
	uint16_t y = 0;

	//PB1をタクトスイッチ入力から一時的に太陽電池電圧の測定ピンに切り替える
	PORTB_PIN1CTRL = 0b00000000; //プルアップ無効 エッジを検出しない
  c6:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>
	VPORTB_DIR    |= 0b00000010; //出力モードに変更
  ca:	84 b1       	in	r24, 0x04	; 4
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	84 b9       	out	0x04, r24	; 4
	VPORTB_OUT    &= 0b11111101; //出力Low
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	8d 7f       	andi	r24, 0xFD	; 253
  d4:	85 b9       	out	0x05, r24	; 5

	//この状態でPB1の電圧を抜いている間に基準電圧1.1V / 電源電圧を測定しておく

	// 基準電圧1.1V / 電源電圧 を10bit(1024段階)で測定
	ADC0_MUXPOS = 0b00011101; //基準電圧
  d6:	8d e1       	ldi	r24, 0x1D	; 29
  d8:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7f8606>

	ADC0_CTRLA = 0b00000001; //ADC Enable
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>

	ADC0_COMMAND = 1;//AD変換開始
  e2:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
	while(ADC0_COMMAND);
  e6:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
  ea:	81 11       	cpse	r24, r1
  ec:	fc cf       	rjmp	.-8      	; 0xe6 <get_v+0x2c>
	ADC0_COMMAND = 0;//AD変換終了
  ee:	c8 e0       	ldi	r28, 0x08	; 8
  f0:	d6 e0       	ldi	r29, 0x06	; 6
  f2:	18 82       	st	Y, r1

	y = ADC0_RES;
  f4:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
  f8:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
	
	//電源電圧を算出
	supply_v = 1023 * 1.1 / y;
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 65 06 	call	0xcca	; 0xcca <__floatunsisf>
 104:	6b 01       	movw	r12, r22
 106:	7c 01       	movw	r14, r24
 108:	9b 01       	movw	r18, r22
 10a:	ac 01       	movw	r20, r24
 10c:	6a e9       	ldi	r22, 0x9A	; 154
 10e:	79 ea       	ldi	r23, 0xA9	; 169
 110:	8c e8       	ldi	r24, 0x8C	; 140
 112:	94 e4       	ldi	r25, 0x44	; 68
 114:	0e 94 c4 05 	call	0xb88	; 0xb88 <__divsf3>
 118:	60 93 27 38 	sts	0x3827, r22	; 0x803827 <supply_v>
 11c:	70 93 28 38 	sts	0x3828, r23	; 0x803828 <supply_v+0x1>
 120:	80 93 29 38 	sts	0x3829, r24	; 0x803829 <supply_v+0x2>
 124:	90 93 2a 38 	sts	0x382A, r25	; 0x80382a <supply_v+0x3>


	//PB1を入力モードに戻す
	VPORTB_DIR    &= 0b11111101; 
 128:	84 b1       	in	r24, 0x04	; 4
 12a:	8d 7f       	andi	r24, 0xFD	; 253
 12c:	84 b9       	out	0x04, r24	; 4

	//ADC入力ピンの選択
	// PB1ピンの電圧 / 電源電圧 を10bit(1024段階)で測定
	ADC0_MUXPOS = 0b00001010; //AIN10 = PB1
 12e:	8a e0       	ldi	r24, 0x0A	; 10
 130:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7f8606>

	ADC0_COMMAND = 1;//AD変換開始
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	88 83       	st	Y, r24
	while(ADC0_COMMAND);
 138:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
 13c:	81 11       	cpse	r24, r1
 13e:	fc cf       	rjmp	.-8      	; 0x138 <__EEPROM_REGION_LENGTH__+0x38>
	ADC0_COMMAND = 0;//AD変換終了
 140:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>

	ADC0_CTRLA = 0b00000000; //ADC Disable
 144:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>

	x = ADC0_RES;
 148:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
 14c:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>

	//PB1のプルアップを有効に戻す
	PORTB_PIN1CTRL = 0b00001001; //プルアップ有効 両方のエッジを検出する
 150:	89 e0       	ldi	r24, 0x09	; 9
 152:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>

	//太陽電池電圧を算出
	solar_v = x * 1.1 / y;
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 65 06 	call	0xcca	; 0xcca <__floatunsisf>
 15e:	2d ec       	ldi	r18, 0xCD	; 205
 160:	3c ec       	ldi	r19, 0xCC	; 204
 162:	4c e8       	ldi	r20, 0x8C	; 140
 164:	5f e3       	ldi	r21, 0x3F	; 63
 166:	0e 94 1c 07 	call	0xe38	; 0xe38 <__mulsf3>
 16a:	a7 01       	movw	r20, r14
 16c:	96 01       	movw	r18, r12
 16e:	0e 94 c4 05 	call	0xb88	; 0xb88 <__divsf3>
 172:	6b 01       	movw	r12, r22
 174:	7c 01       	movw	r14, r24
 176:	60 93 23 38 	sts	0x3823, r22	; 0x803823 <solar_v>
 17a:	70 93 24 38 	sts	0x3824, r23	; 0x803824 <solar_v+0x1>
 17e:	80 93 25 38 	sts	0x3825, r24	; 0x803825 <solar_v+0x2>
 182:	90 93 26 38 	sts	0x3826, r25	; 0x803826 <solar_v+0x3>


	//7セグの明るさ設定
	//太陽電池の電圧によって周囲の明るさを判定し7セグの明るさを変化させる
	if(solar_v > 2.0 || discharge) {
 186:	20 e0       	ldi	r18, 0x00	; 0
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	40 e0       	ldi	r20, 0x00	; 0
 18c:	50 e4       	ldi	r21, 0x40	; 64
 18e:	0e 94 17 07 	call	0xe2e	; 0xe2e <__gesf2>
 192:	18 16       	cp	r1, r24
 194:	24 f0       	brlt	.+8      	; 0x19e <__EEPROM_REGION_LENGTH__+0x9e>
 196:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <discharge>
 19a:	88 23       	and	r24, r24
 19c:	21 f0       	breq	.+8      	; 0x1a6 <__EEPROM_REGION_LENGTH__+0xa6>
		brightness = 6;
 19e:	86 e0       	ldi	r24, 0x06	; 6
 1a0:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <brightness>
 1a4:	3b c0       	rjmp	.+118    	; 0x21c <__EEPROM_REGION_LENGTH__+0x11c>
	}else if(solar_v > 1.4) {
 1a6:	23 e3       	ldi	r18, 0x33	; 51
 1a8:	33 e3       	ldi	r19, 0x33	; 51
 1aa:	43 eb       	ldi	r20, 0xB3	; 179
 1ac:	5f e3       	ldi	r21, 0x3F	; 63
 1ae:	c7 01       	movw	r24, r14
 1b0:	b6 01       	movw	r22, r12
 1b2:	0e 94 17 07 	call	0xe2e	; 0xe2e <__gesf2>
 1b6:	18 16       	cp	r1, r24
 1b8:	24 f4       	brge	.+8      	; 0x1c2 <__EEPROM_REGION_LENGTH__+0xc2>
		brightness = 5;
 1ba:	85 e0       	ldi	r24, 0x05	; 5
 1bc:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <brightness>
 1c0:	2d c0       	rjmp	.+90     	; 0x21c <__EEPROM_REGION_LENGTH__+0x11c>
	}else if(solar_v > 0.9) {
 1c2:	26 e6       	ldi	r18, 0x66	; 102
 1c4:	36 e6       	ldi	r19, 0x66	; 102
 1c6:	46 e6       	ldi	r20, 0x66	; 102
 1c8:	5f e3       	ldi	r21, 0x3F	; 63
 1ca:	c7 01       	movw	r24, r14
 1cc:	b6 01       	movw	r22, r12
 1ce:	0e 94 17 07 	call	0xe2e	; 0xe2e <__gesf2>
 1d2:	18 16       	cp	r1, r24
 1d4:	24 f4       	brge	.+8      	; 0x1de <__EEPROM_REGION_LENGTH__+0xde>
		brightness = 4;
 1d6:	84 e0       	ldi	r24, 0x04	; 4
 1d8:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <brightness>
 1dc:	1f c0       	rjmp	.+62     	; 0x21c <__EEPROM_REGION_LENGTH__+0x11c>
	}else if(solar_v > 0.6) {
 1de:	2a e9       	ldi	r18, 0x9A	; 154
 1e0:	39 e9       	ldi	r19, 0x99	; 153
 1e2:	49 e1       	ldi	r20, 0x19	; 25
 1e4:	5f e3       	ldi	r21, 0x3F	; 63
 1e6:	c7 01       	movw	r24, r14
 1e8:	b6 01       	movw	r22, r12
 1ea:	0e 94 17 07 	call	0xe2e	; 0xe2e <__gesf2>
 1ee:	18 16       	cp	r1, r24
 1f0:	24 f4       	brge	.+8      	; 0x1fa <__EEPROM_REGION_LENGTH__+0xfa>
		brightness = 3;
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <brightness>
 1f8:	11 c0       	rjmp	.+34     	; 0x21c <__EEPROM_REGION_LENGTH__+0x11c>
	}else if(solar_v > 0.3) {
 1fa:	2a e9       	ldi	r18, 0x9A	; 154
 1fc:	39 e9       	ldi	r19, 0x99	; 153
 1fe:	49 e9       	ldi	r20, 0x99	; 153
 200:	5e e3       	ldi	r21, 0x3E	; 62
 202:	c7 01       	movw	r24, r14
 204:	b6 01       	movw	r22, r12
 206:	0e 94 17 07 	call	0xe2e	; 0xe2e <__gesf2>
 20a:	18 16       	cp	r1, r24
 20c:	24 f4       	brge	.+8      	; 0x216 <__EEPROM_REGION_LENGTH__+0x116>
		brightness = 2;
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <brightness>
 214:	03 c0       	rjmp	.+6      	; 0x21c <__EEPROM_REGION_LENGTH__+0x11c>
	}else{
		brightness = 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <brightness>
	}

	//電圧を7セグに表示する準備 ここで行っておくことで計算が1回で済みTCA割り込みの動作が軽快になる
	uint8_t spv = supply_v * 10;
 21c:	20 e0       	ldi	r18, 0x00	; 0
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	40 e2       	ldi	r20, 0x20	; 32
 222:	51 e4       	ldi	r21, 0x41	; 65
 224:	60 91 27 38 	lds	r22, 0x3827	; 0x803827 <supply_v>
 228:	70 91 28 38 	lds	r23, 0x3828	; 0x803828 <supply_v+0x1>
 22c:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <supply_v+0x2>
 230:	90 91 2a 38 	lds	r25, 0x382A	; 0x80382a <supply_v+0x3>
 234:	0e 94 1c 07 	call	0xe38	; 0xe38 <__mulsf3>
 238:	0e 94 36 06 	call	0xc6c	; 0xc6c <__fixunssfsi>
 23c:	c6 2f       	mov	r28, r22
	uint8_t slv =  solar_v * 10;
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	40 e2       	ldi	r20, 0x20	; 32
 244:	51 e4       	ldi	r21, 0x41	; 65
 246:	c7 01       	movw	r24, r14
 248:	b6 01       	movw	r22, r12
 24a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__mulsf3>
 24e:	0e 94 36 06 	call	0xc6c	; 0xc6c <__fixunssfsi>
	v_dig1  = seg[spv % 10];
 252:	8d ec       	ldi	r24, 0xCD	; 205
 254:	c8 9f       	mul	r28, r24
 256:	e1 2d       	mov	r30, r1
 258:	11 24       	eor	r1, r1
 25a:	e6 95       	lsr	r30
 25c:	e6 95       	lsr	r30
 25e:	e6 95       	lsr	r30
 260:	2e 2f       	mov	r18, r30
 262:	22 0f       	add	r18, r18
 264:	92 2f       	mov	r25, r18
 266:	99 0f       	add	r25, r25
 268:	99 0f       	add	r25, r25
 26a:	92 0f       	add	r25, r18
 26c:	c9 1b       	sub	r28, r25
 26e:	ac 2f       	mov	r26, r28
 270:	b0 e0       	ldi	r27, 0x00	; 0
 272:	a8 5f       	subi	r26, 0xF8	; 248
 274:	b7 4c       	sbci	r27, 0xC7	; 199
 276:	9c 91       	ld	r25, X
 278:	90 93 1d 38 	sts	0x381D, r25	; 0x80381d <v_dig1>
	v_dig2  = seg[(spv / 10) % 10];
 27c:	e8 9f       	mul	r30, r24
 27e:	91 2d       	mov	r25, r1
 280:	11 24       	eor	r1, r1
 282:	96 95       	lsr	r25
 284:	96 95       	lsr	r25
 286:	96 95       	lsr	r25
 288:	99 0f       	add	r25, r25
 28a:	29 2f       	mov	r18, r25
 28c:	22 0f       	add	r18, r18
 28e:	22 0f       	add	r18, r18
 290:	92 0f       	add	r25, r18
 292:	e9 1b       	sub	r30, r25
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	e8 5f       	subi	r30, 0xF8	; 248
 298:	f7 4c       	sbci	r31, 0xC7	; 199
 29a:	90 81       	ld	r25, Z
 29c:	90 93 1c 38 	sts	0x381C, r25	; 0x80381c <v_dig2>
	v_dig4  = seg[slv % 10];
 2a0:	68 9f       	mul	r22, r24
 2a2:	e1 2d       	mov	r30, r1
 2a4:	11 24       	eor	r1, r1
 2a6:	e6 95       	lsr	r30
 2a8:	e6 95       	lsr	r30
 2aa:	e6 95       	lsr	r30
 2ac:	2e 2f       	mov	r18, r30
 2ae:	22 0f       	add	r18, r18
 2b0:	92 2f       	mov	r25, r18
 2b2:	99 0f       	add	r25, r25
 2b4:	99 0f       	add	r25, r25
 2b6:	92 0f       	add	r25, r18
 2b8:	69 1b       	sub	r22, r25
 2ba:	a6 2f       	mov	r26, r22
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
 2be:	a8 5f       	subi	r26, 0xF8	; 248
 2c0:	b7 4c       	sbci	r27, 0xC7	; 199
 2c2:	9c 91       	ld	r25, X
 2c4:	90 93 1b 38 	sts	0x381B, r25	; 0x80381b <v_dig4>
	v_dig5  = seg[(slv / 10) % 10];
 2c8:	e8 9f       	mul	r30, r24
 2ca:	81 2d       	mov	r24, r1
 2cc:	11 24       	eor	r1, r1
 2ce:	86 95       	lsr	r24
 2d0:	86 95       	lsr	r24
 2d2:	86 95       	lsr	r24
 2d4:	88 0f       	add	r24, r24
 2d6:	98 2f       	mov	r25, r24
 2d8:	99 0f       	add	r25, r25
 2da:	99 0f       	add	r25, r25
 2dc:	89 0f       	add	r24, r25
 2de:	e8 1b       	sub	r30, r24
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	e8 5f       	subi	r30, 0xF8	; 248
 2e4:	f7 4c       	sbci	r31, 0xC7	; 199
 2e6:	80 81       	ld	r24, Z
 2e8:	80 93 1a 38 	sts	0x381A, r24	; 0x80381a <v_dig5>
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	ff 90       	pop	r15
 2f2:	ef 90       	pop	r14
 2f4:	df 90       	pop	r13
 2f6:	cf 90       	pop	r12
 2f8:	08 95       	ret

000002fa <sens_delay_ms>:

//ボタン操作を受け付けながら待機する関数
void sens_delay_ms (uint16_t num) {
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	8c 01       	movw	r16, r24

	for (unsigned int i = 0; i < num; i++){
 304:	c0 e0       	ldi	r28, 0x00	; 0
 306:	d0 e0       	ldi	r29, 0x00	; 0
 308:	6d c0       	rjmp	.+218    	; 0x3e4 <sens_delay_ms+0xea>
		if(!(VPORTB_IN & PIN1_bm)) {
 30a:	31 99       	sbic	0x06, 1	; 6
 30c:	64 c0       	rjmp	.+200    	; 0x3d6 <sens_delay_ms+0xdc>

			//ここにタクトスイッチが押された時の動作を記述
			wakeup = 4000;
 30e:	80 ea       	ldi	r24, 0xA0	; 160
 310:	9f e0       	ldi	r25, 0x0F	; 15
 312:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <wakeup>
 316:	90 93 2f 38 	sts	0x382F, r25	; 0x80382f <wakeup+0x1>
		
			switch (mode) {
 31a:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <mode>
 31e:	82 30       	cpi	r24, 0x02	; 2
 320:	01 f1       	breq	.+64     	; 0x362 <sens_delay_ms+0x68>
 322:	83 30       	cpi	r24, 0x03	; 3
 324:	b9 f1       	breq	.+110    	; 0x394 <sens_delay_ms+0x9a>
 326:	81 30       	cpi	r24, 0x01	; 1
 328:	09 f0       	breq	.+2      	; 0x32c <sens_delay_ms+0x32>
 32a:	55 c0       	rjmp	.+170    	; 0x3d6 <sens_delay_ms+0xdc>
				case MODE_CLOCK:
					while(!(VPORTB_IN & PIN1_bm));
 32c:	31 9b       	sbis	0x06, 1	; 6
 32e:	fe cf       	rjmp	.-4      	; 0x32c <sens_delay_ms+0x32>
					if(change_mode_after) {
 330:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <change_mode_after>
 334:	88 23       	and	r24, r24
 336:	19 f0       	breq	.+6      	; 0x33e <sens_delay_ms+0x44>
						change_mode_after = 0;
 338:	10 92 2b 38 	sts	0x382B, r1	; 0x80382b <change_mode_after>
 33c:	4c c0       	rjmp	.+152    	; 0x3d6 <sens_delay_ms+0xdc>
					}else{
						//電圧の取得
						get_v();
 33e:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
						display_v = 200;
 342:	88 ec       	ldi	r24, 0xC8	; 200
 344:	80 93 22 38 	sts	0x3822, r24	; 0x803822 <display_v>
						wakeup = 800; //電圧表示だけなら長く表示する必要ないのでwakeup値上書き
 348:	80 e2       	ldi	r24, 0x20	; 32
 34a:	93 e0       	ldi	r25, 0x03	; 3
 34c:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <wakeup>
 350:	90 93 2f 38 	sts	0x382F, r25	; 0x80382f <wakeup+0x1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 354:	87 ea       	ldi	r24, 0xA7	; 167
 356:	91 e6       	ldi	r25, 0x61	; 97
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <sens_delay_ms+0x5e>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <sens_delay_ms+0x64>
 35e:	00 00       	nop
 360:	3a c0       	rjmp	.+116    	; 0x3d6 <sens_delay_ms+0xdc>
						_delay_ms(100);
					}
				break;

				case MODE_HOUR_SET:
					while(!(VPORTB_IN & PIN1_bm));
 362:	31 9b       	sbis	0x06, 1	; 6
 364:	fe cf       	rjmp	.-4      	; 0x362 <sens_delay_ms+0x68>
					if(change_mode_after) {
 366:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <change_mode_after>
 36a:	88 23       	and	r24, r24
 36c:	19 f0       	breq	.+6      	; 0x374 <sens_delay_ms+0x7a>
						change_mode_after = 0;
 36e:	10 92 2b 38 	sts	0x382B, r1	; 0x80382b <change_mode_after>
 372:	31 c0       	rjmp	.+98     	; 0x3d6 <sens_delay_ms+0xdc>
					}else{
						if(++hour >= 24) hour = 0;
 374:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <hour>
 378:	8f 5f       	subi	r24, 0xFF	; 255
 37a:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <hour>
 37e:	88 31       	cpi	r24, 0x18	; 24
 380:	10 f0       	brcs	.+4      	; 0x386 <sens_delay_ms+0x8c>
 382:	10 92 30 38 	sts	0x3830, r1	; 0x803830 <hour>
 386:	87 ea       	ldi	r24, 0xA7	; 167
 388:	91 e6       	ldi	r25, 0x61	; 97
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <sens_delay_ms+0x90>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <sens_delay_ms+0x96>
 390:	00 00       	nop
 392:	21 c0       	rjmp	.+66     	; 0x3d6 <sens_delay_ms+0xdc>
						_delay_ms(100);
					}
				break;

				case MODE_MIN_SET:
					while(!(VPORTB_IN & PIN1_bm));
 394:	31 9b       	sbis	0x06, 1	; 6
 396:	fe cf       	rjmp	.-4      	; 0x394 <sens_delay_ms+0x9a>
					if(change_mode_after) {
 398:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <change_mode_after>
 39c:	88 23       	and	r24, r24
 39e:	19 f0       	breq	.+6      	; 0x3a6 <sens_delay_ms+0xac>
						change_mode_after = 0;
 3a0:	10 92 2b 38 	sts	0x382B, r1	; 0x80382b <change_mode_after>
 3a4:	18 c0       	rjmp	.+48     	; 0x3d6 <sens_delay_ms+0xdc>
					}else{
						if(++min >= 60) {
 3a6:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <min>
 3aa:	8f 5f       	subi	r24, 0xFF	; 255
 3ac:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <min>
 3b0:	8c 33       	cpi	r24, 0x3C	; 60
 3b2:	58 f0       	brcs	.+22     	; 0x3ca <sens_delay_ms+0xd0>
							min = 0;
 3b4:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <min>
							if(++hour >= 24) hour = 0;
 3b8:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <hour>
 3bc:	8f 5f       	subi	r24, 0xFF	; 255
 3be:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <hour>
 3c2:	88 31       	cpi	r24, 0x18	; 24
 3c4:	10 f0       	brcs	.+4      	; 0x3ca <sens_delay_ms+0xd0>
 3c6:	10 92 30 38 	sts	0x3830, r1	; 0x803830 <hour>
 3ca:	87 ea       	ldi	r24, 0xA7	; 167
 3cc:	91 e6       	ldi	r25, 0x61	; 97
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <sens_delay_ms+0xd4>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <sens_delay_ms+0xda>
 3d4:	00 00       	nop
 3d6:	89 ef       	ldi	r24, 0xF9	; 249
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <sens_delay_ms+0xe0>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <sens_delay_ms+0xe6>
 3e0:	00 00       	nop
}

//ボタン操作を受け付けながら待機する関数
void sens_delay_ms (uint16_t num) {

	for (unsigned int i = 0; i < num; i++){
 3e2:	21 96       	adiw	r28, 0x01	; 1
 3e4:	c0 17       	cp	r28, r16
 3e6:	d1 07       	cpc	r29, r17
 3e8:	08 f4       	brcc	.+2      	; 0x3ec <sens_delay_ms+0xf2>
 3ea:	8f cf       	rjmp	.-226    	; 0x30a <sens_delay_ms+0x10>
				break;
			}
		}
		_delay_ms(1);
	}
}
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	08 95       	ret

000003f6 <seg_all_off>:

//7セグをすべて消灯する関数
void seg_all_off (void) {

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	VPORTA_OUT &= 0b00000001;
 3f6:	81 b1       	in	r24, 0x01	; 1
 3f8:	81 70       	andi	r24, 0x01	; 1
 3fa:	81 b9       	out	0x01, r24	; 1
	VPORTC_OUT &= 0b11110000; //PC1～3はダイナミック点灯用トランジスタ。これらもOFF
 3fc:	89 b1       	in	r24, 0x09	; 9
 3fe:	80 7f       	andi	r24, 0xF0	; 240
 400:	89 b9       	out	0x09, r24	; 9
	//ダイナミック点灯用トランジスタも全てOFF
	VPORTB_OUT &= 0b11001111;
 402:	85 b1       	in	r24, 0x05	; 5
 404:	8f 7c       	andi	r24, 0xCF	; 207
 406:	85 b9       	out	0x05, r24	; 5
 408:	08 95       	ret

0000040a <change_mode>:
}

//モードを切り替える関数
//引数に0を指定した場合は次の定数のモードへ 定数を指定した場合はそのモードへ
void change_mode (uint8_t cmode) {
	if(cmode) {
 40a:	88 23       	and	r24, r24
 40c:	19 f0       	breq	.+6      	; 0x414 <change_mode+0xa>
		mode = cmode;
 40e:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <mode>
 412:	08 95       	ret
	}else if(mode == MODE_MIN_SET) {
 414:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <mode>
 418:	83 30       	cpi	r24, 0x03	; 3
 41a:	21 f4       	brne	.+8      	; 0x424 <change_mode+0x1a>
		mode = MODE_CLOCK;
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <mode>
 422:	08 95       	ret
	}else{
		mode++;
 424:	8f 5f       	subi	r24, 0xFF	; 255
 426:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <mode>
 42a:	08 95       	ret

0000042c <__vector_10>:
	}
}

//TCA割り込み
ISR (TCA0_CMP0_vect) {
 42c:	1f 92       	push	r1
 42e:	0f 92       	push	r0
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	0f 92       	push	r0
 434:	11 24       	eor	r1, r1
 436:	ef 92       	push	r14
 438:	ff 92       	push	r15
 43a:	0f 93       	push	r16
 43c:	1f 93       	push	r17
 43e:	2f 93       	push	r18
 440:	3f 93       	push	r19
 442:	4f 93       	push	r20
 444:	5f 93       	push	r21
 446:	6f 93       	push	r22
 448:	7f 93       	push	r23
 44a:	8f 93       	push	r24
 44c:	9f 93       	push	r25
 44e:	af 93       	push	r26
 450:	bf 93       	push	r27
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	ef 93       	push	r30
 458:	ff 93       	push	r31

	TCA0_SINGLE_CNT = 0;//カウントリセット
 45a:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__RODATA_PM_OFFSET__+0x7f8a20>
 45e:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__RODATA_PM_OFFSET__+0x7f8a21>
	TCA0_SINGLE_INTFLAGS |= 0b00010000; //割り込み要求フラグを解除
 462:	eb e0       	ldi	r30, 0x0B	; 11
 464:	fa e0       	ldi	r31, 0x0A	; 10
 466:	80 81       	ld	r24, Z
 468:	80 61       	ori	r24, 0x10	; 16
 46a:	80 83       	st	Z, r24

	//wakeupが0ならセグをすべて消灯してそれ以外を実行しない
	//メインループのseg_all_off関数とsleep_mode関数の間にこの割り込みが入り中途半端に7セグが点灯した状態でスリープするのを防ぐ記述
	if(!wakeup) {
 46c:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <wakeup>
 470:	90 91 2f 38 	lds	r25, 0x382F	; 0x80382f <wakeup+0x1>
 474:	89 2b       	or	r24, r25
 476:	19 f4       	brne	.+6      	; 0x47e <__vector_10+0x52>
		seg_all_off();
 478:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <seg_all_off>
		return;
 47c:	e5 c1       	rjmp	.+970    	; 0x848 <__DATA_REGION_LENGTH__+0x48>
	//現状このドットは使用していないのでコメントアウト 使うときは有効化してください
	//uint8_t dig1c, dig4c,;
	//dig1c = di45c = 0;

	//太陽電池の発電電圧とキャパシタの電圧を表示
	if(display_v && mode == MODE_CLOCK) {
 47e:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <display_v>
 482:	88 23       	and	r24, r24
 484:	81 f0       	breq	.+32     	; 0x4a6 <__vector_10+0x7a>
 486:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <mode>
 48a:	81 30       	cpi	r24, 0x01	; 1
 48c:	61 f4       	brne	.+24     	; 0x4a6 <__vector_10+0x7a>
		dig1  = v_dig1;
 48e:	c0 91 1d 38 	lds	r28, 0x381D	; 0x80381d <v_dig1>
		dig2  = v_dig2;
 492:	d0 91 1c 38 	lds	r29, 0x381C	; 0x80381c <v_dig2>
		dig3  = 0b00000000;
		dig4  = v_dig4;
 496:	10 91 1b 38 	lds	r17, 0x381B	; 0x80381b <v_dig4>
		dig5  = v_dig5;
 49a:	00 91 1a 38 	lds	r16, 0x381A	; 0x80381a <v_dig5>
		dig2c = dig5c = 0b00000001;//ドット(小数点)
 49e:	ee 24       	eor	r14, r14
 4a0:	e3 94       	inc	r14

	//太陽電池の発電電圧とキャパシタの電圧を表示
	if(display_v && mode == MODE_CLOCK) {
		dig1  = v_dig1;
		dig2  = v_dig2;
		dig3  = 0b00000000;
 4a2:	f1 2c       	mov	r15, r1
		dig4  = v_dig4;
		dig5  = v_dig5;
		dig2c = dig5c = 0b00000001;//ドット(小数点)
 4a4:	91 c0       	rjmp	.+290    	; 0x5c8 <__vector_10+0x19c>

	}else if(unset && mode == MODE_CLOCK) {//時計未設定なら全てハイフンで上書き
 4a6:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <unset>
 4aa:	88 23       	and	r24, r24
 4ac:	29 f0       	breq	.+10     	; 0x4b8 <__vector_10+0x8c>
 4ae:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <mode>
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	09 f4       	brne	.+2      	; 0x4b8 <__vector_10+0x8c>
 4b6:	7f c0       	rjmp	.+254    	; 0x5b6 <__vector_10+0x18a>
		dig3 = 0b00000110;

	}else{//時刻を表示

		//時刻が更新されていれば表示を刷新するための計算を行う。更新されていなければ前回表示したものをそのまま表示
		if(old_min != min || old_hour != hour) {
 4b8:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <old_min>
 4bc:	c0 91 31 38 	lds	r28, 0x3831	; 0x803831 <min>
 4c0:	8c 13       	cpse	r24, r28
 4c2:	07 c0       	rjmp	.+14     	; 0x4d2 <__vector_10+0xa6>
 4c4:	90 91 01 38 	lds	r25, 0x3801	; 0x803801 <old_hour>
 4c8:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <hour>
 4cc:	98 17       	cp	r25, r24
 4ce:	09 f4       	brne	.+2      	; 0x4d2 <__vector_10+0xa6>
 4d0:	66 c0       	rjmp	.+204    	; 0x59e <__vector_10+0x172>
			//これまでの値を古い値を格納する変数に移し替える
			old_min = min;
 4d2:	c0 93 02 38 	sts	0x3802, r28	; 0x803802 <old_min>
			old_hour = hour;
 4d6:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <hour>
 4da:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <old_hour>

			//12時間表記設定と24時間表記設定で表示を切り替える
			uint8_t display_hour = 0;
			if(system12) {
 4de:	90 91 03 38 	lds	r25, 0x3803	; 0x803803 <system12>
 4e2:	99 23       	and	r25, r25
 4e4:	31 f0       	breq	.+12     	; 0x4f2 <__vector_10+0xc6>
				if(!hour) display_hour = 12; //0時を12時と表記
 4e6:	88 23       	and	r24, r24
 4e8:	31 f0       	breq	.+12     	; 0x4f6 <__vector_10+0xca>
				else if (hour > 12) display_hour = hour - 12; //13時以降を1時、2時…と表す
 4ea:	8d 30       	cpi	r24, 0x0D	; 13
 4ec:	28 f0       	brcs	.+10     	; 0x4f8 <__vector_10+0xcc>
 4ee:	8c 50       	subi	r24, 0x0C	; 12
 4f0:	03 c0       	rjmp	.+6      	; 0x4f8 <__vector_10+0xcc>
			//これまでの値を古い値を格納する変数に移し替える
			old_min = min;
			old_hour = hour;

			//12時間表記設定と24時間表記設定で表示を切り替える
			uint8_t display_hour = 0;
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <__vector_10+0xcc>
			if(system12) {
				if(!hour) display_hour = 12; //0時を12時と表記
 4f6:	8c e0       	ldi	r24, 0x0C	; 12
				else if (hour > 12) display_hour = hour - 12; //13時以降を1時、2時…と表す
				else display_hour = hour;
			}

			old_dig1 = dig1  = seg[min % 10];
 4f8:	ed ec       	ldi	r30, 0xCD	; 205
 4fa:	ce 9f       	mul	r28, r30
 4fc:	a1 2d       	mov	r26, r1
 4fe:	11 24       	eor	r1, r1
 500:	a6 95       	lsr	r26
 502:	a6 95       	lsr	r26
 504:	a6 95       	lsr	r26
 506:	2a 2f       	mov	r18, r26
 508:	22 0f       	add	r18, r18
 50a:	92 2f       	mov	r25, r18
 50c:	99 0f       	add	r25, r25
 50e:	99 0f       	add	r25, r25
 510:	92 0f       	add	r25, r18
 512:	c9 1b       	sub	r28, r25
 514:	d0 e0       	ldi	r29, 0x00	; 0
 516:	c8 5f       	subi	r28, 0xF8	; 248
 518:	d7 4c       	sbci	r29, 0xC7	; 199
 51a:	c8 81       	ld	r28, Y
 51c:	c0 93 19 38 	sts	0x3819, r28	; 0x803819 <old_dig1>
			old_dig2 = dig2  = seg[(min / 10) % 10];
 520:	ae 9f       	mul	r26, r30
 522:	91 2d       	mov	r25, r1
 524:	11 24       	eor	r1, r1
 526:	96 95       	lsr	r25
 528:	96 95       	lsr	r25
 52a:	96 95       	lsr	r25
 52c:	99 0f       	add	r25, r25
 52e:	29 2f       	mov	r18, r25
 530:	22 0f       	add	r18, r18
 532:	22 0f       	add	r18, r18
 534:	92 0f       	add	r25, r18
 536:	a9 1b       	sub	r26, r25
 538:	b0 e0       	ldi	r27, 0x00	; 0
 53a:	a8 5f       	subi	r26, 0xF8	; 248
 53c:	b7 4c       	sbci	r27, 0xC7	; 199
 53e:	dc 91       	ld	r29, X
 540:	d0 93 18 38 	sts	0x3818, r29	; 0x803818 <old_dig2>
			old_dig4 = dig4  = seg[display_hour % 10];
 544:	8e 9f       	mul	r24, r30
 546:	91 2d       	mov	r25, r1
 548:	11 24       	eor	r1, r1
 54a:	96 95       	lsr	r25
 54c:	96 95       	lsr	r25
 54e:	96 95       	lsr	r25
 550:	39 2f       	mov	r19, r25
 552:	33 0f       	add	r19, r19
 554:	23 2f       	mov	r18, r19
 556:	22 0f       	add	r18, r18
 558:	22 0f       	add	r18, r18
 55a:	23 0f       	add	r18, r19
 55c:	82 1b       	sub	r24, r18
 55e:	a8 2f       	mov	r26, r24
 560:	b0 e0       	ldi	r27, 0x00	; 0
 562:	a8 5f       	subi	r26, 0xF8	; 248
 564:	b7 4c       	sbci	r27, 0xC7	; 199
 566:	1c 91       	ld	r17, X
 568:	10 93 17 38 	sts	0x3817, r17	; 0x803817 <old_dig4>

			//dig5のみ0なら不点灯にする(ゼロサプレス)
			uint8_t dig5_num = (display_hour / 10) % 10;
 56c:	9e 9f       	mul	r25, r30
 56e:	e1 2d       	mov	r30, r1
 570:	11 24       	eor	r1, r1
 572:	e6 95       	lsr	r30
 574:	e6 95       	lsr	r30
 576:	e6 95       	lsr	r30
 578:	ee 0f       	add	r30, r30
 57a:	8e 2f       	mov	r24, r30
 57c:	88 0f       	add	r24, r24
 57e:	88 0f       	add	r24, r24
 580:	e8 0f       	add	r30, r24
 582:	9e 1b       	sub	r25, r30
			if(dig5_num) {
 584:	41 f0       	breq	.+16     	; 0x596 <__vector_10+0x16a>
				old_dig5 = dig5 = seg[dig5_num];
 586:	e9 2f       	mov	r30, r25
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	e8 5f       	subi	r30, 0xF8	; 248
 58c:	f7 4c       	sbci	r31, 0xC7	; 199
 58e:	00 81       	ld	r16, Z
 590:	00 93 16 38 	sts	0x3816, r16	; 0x803816 <old_dig5>
 594:	0c c0       	rjmp	.+24     	; 0x5ae <__vector_10+0x182>
			}else{
				old_dig5 = dig5 = 0b00000000;
 596:	10 92 16 38 	sts	0x3816, r1	; 0x803816 <old_dig5>
 59a:	00 e0       	ldi	r16, 0x00	; 0
 59c:	08 c0       	rjmp	.+16     	; 0x5ae <__vector_10+0x182>
			}

		}else{
			dig1 = old_dig1;
 59e:	c0 91 19 38 	lds	r28, 0x3819	; 0x803819 <old_dig1>
			dig2 = old_dig2;
 5a2:	d0 91 18 38 	lds	r29, 0x3818	; 0x803818 <old_dig2>
			dig4 = old_dig4;
 5a6:	10 91 17 38 	lds	r17, 0x3817	; 0x803817 <old_dig4>
			dig5 = old_dig5;
 5aa:	00 91 16 38 	lds	r16, 0x3816	; 0x803816 <old_dig5>
		}

		dig3  = colon;
 5ae:	f0 90 15 38 	lds	r15, 0x3815	; 0x803815 <colon.3364>

	static uint8_t out_dig = 0;//発光させる桁
	static uint8_t colon = 0;//点滅コロン
	uint8_t dig1, dig2, dig3, dig4, dig5 = 0;
	uint8_t dig2c, dig5c;
	dig2c = dig5c = 0;
 5b2:	e1 2c       	mov	r14, r1
 5b4:	09 c0       	rjmp	.+18     	; 0x5c8 <__vector_10+0x19c>
 5b6:	e1 2c       	mov	r14, r1
		dig4  = v_dig4;
		dig5  = v_dig5;
		dig2c = dig5c = 0b00000001;//ドット(小数点)

	}else if(unset && mode == MODE_CLOCK) {//時計未設定なら全てハイフンで上書き
		dig1 = dig2 = dig4 = dig5 = 0b10000000;
 5b8:	00 e8       	ldi	r16, 0x80	; 128
 5ba:	10 e8       	ldi	r17, 0x80	; 128
		dig3 = 0b00000110;
 5bc:	0f 2e       	mov	r0, r31
 5be:	f6 e0       	ldi	r31, 0x06	; 6
 5c0:	ff 2e       	mov	r15, r31
 5c2:	f0 2d       	mov	r31, r0
		dig4  = v_dig4;
		dig5  = v_dig5;
		dig2c = dig5c = 0b00000001;//ドット(小数点)

	}else if(unset && mode == MODE_CLOCK) {//時計未設定なら全てハイフンで上書き
		dig1 = dig2 = dig4 = dig5 = 0b10000000;
 5c4:	d0 e8       	ldi	r29, 0x80	; 128
 5c6:	c0 e8       	ldi	r28, 0x80	; 128
	}

	//時刻設定時の点滅演出
	//点滅カウンター
	static uint16_t wink = 0;
	if(mode == MODE_HOUR_SET) {
 5c8:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <mode>
 5cc:	82 30       	cpi	r24, 0x02	; 2
 5ce:	a9 f4       	brne	.+42     	; 0x5fa <__vector_10+0x1ce>
		if(++wink < 512) dig4 = dig5 = 0b00000000;
 5d0:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <wink.3374>
 5d4:	90 91 14 38 	lds	r25, 0x3814	; 0x803814 <wink.3374+0x1>
 5d8:	01 96       	adiw	r24, 0x01	; 1
 5da:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <wink.3374>
 5de:	90 93 14 38 	sts	0x3814, r25	; 0x803814 <wink.3374+0x1>
 5e2:	81 15       	cp	r24, r1
 5e4:	22 e0       	ldi	r18, 0x02	; 2
 5e6:	92 07       	cpc	r25, r18
 5e8:	20 f1       	brcs	.+72     	; 0x632 <__vector_10+0x206>
		else if (wink > 1023) wink = 0;
 5ea:	81 15       	cp	r24, r1
 5ec:	94 40       	sbci	r25, 0x04	; 4
 5ee:	30 f1       	brcs	.+76     	; 0x63c <__vector_10+0x210>
 5f0:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <wink.3374>
 5f4:	10 92 14 38 	sts	0x3814, r1	; 0x803814 <wink.3374+0x1>
 5f8:	21 c0       	rjmp	.+66     	; 0x63c <__vector_10+0x210>
	}else if(mode == MODE_MIN_SET) {
 5fa:	83 30       	cpi	r24, 0x03	; 3
 5fc:	a9 f4       	brne	.+42     	; 0x628 <__vector_10+0x1fc>
		if(++wink < 512) dig1 = dig2 = 0b00000000;
 5fe:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <wink.3374>
 602:	90 91 14 38 	lds	r25, 0x3814	; 0x803814 <wink.3374+0x1>
 606:	01 96       	adiw	r24, 0x01	; 1
 608:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <wink.3374>
 60c:	90 93 14 38 	sts	0x3814, r25	; 0x803814 <wink.3374+0x1>
 610:	81 15       	cp	r24, r1
 612:	22 e0       	ldi	r18, 0x02	; 2
 614:	92 07       	cpc	r25, r18
 616:	80 f0       	brcs	.+32     	; 0x638 <__vector_10+0x20c>
		else if (wink > 1023) wink = 0;
 618:	81 15       	cp	r24, r1
 61a:	94 40       	sbci	r25, 0x04	; 4
 61c:	78 f0       	brcs	.+30     	; 0x63c <__vector_10+0x210>
 61e:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <wink.3374>
 622:	10 92 14 38 	sts	0x3814, r1	; 0x803814 <wink.3374+0x1>
 626:	0a c0       	rjmp	.+20     	; 0x63c <__vector_10+0x210>
	}else{
		wink = 0;
 628:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <wink.3374>
 62c:	10 92 14 38 	sts	0x3814, r1	; 0x803814 <wink.3374+0x1>
 630:	05 c0       	rjmp	.+10     	; 0x63c <__vector_10+0x210>

	//時刻設定時の点滅演出
	//点滅カウンター
	static uint16_t wink = 0;
	if(mode == MODE_HOUR_SET) {
		if(++wink < 512) dig4 = dig5 = 0b00000000;
 632:	00 e0       	ldi	r16, 0x00	; 0
 634:	10 e0       	ldi	r17, 0x00	; 0
 636:	02 c0       	rjmp	.+4      	; 0x63c <__vector_10+0x210>
		else if (wink > 1023) wink = 0;
	}else if(mode == MODE_MIN_SET) {
		if(++wink < 512) dig1 = dig2 = 0b00000000;
 638:	d0 e0       	ldi	r29, 0x00	; 0
 63a:	c0 e0       	ldi	r28, 0x00	; 0
		wink = 0;
	}


	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();
 63c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <seg_all_off>

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
	static uint8_t bn_pwm_count = 1; //7セグを間欠で点灯させるために0～12までを繰り返し数えるカウンター

	if(++bn_pwm_count > 24) bn_pwm_count = 1;
 640:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 644:	8f 5f       	subi	r24, 0xFF	; 255
 646:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 64a:	89 31       	cpi	r24, 0x19	; 25
 64c:	18 f0       	brcs	.+6      	; 0x654 <__vector_10+0x228>
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>

	//間欠点灯で明るさを調整
	switch (brightness) {
 654:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <brightness>
 658:	83 30       	cpi	r24, 0x03	; 3
 65a:	19 f1       	breq	.+70     	; 0x6a2 <__vector_10+0x276>
 65c:	28 f4       	brcc	.+10     	; 0x668 <__vector_10+0x23c>
 65e:	81 30       	cpi	r24, 0x01	; 1
 660:	51 f0       	breq	.+20     	; 0x676 <__vector_10+0x24a>
 662:	82 30       	cpi	r24, 0x02	; 2
 664:	91 f0       	breq	.+36     	; 0x68a <__vector_10+0x25e>
 666:	05 c0       	rjmp	.+10     	; 0x672 <__vector_10+0x246>
 668:	85 30       	cpi	r24, 0x05	; 5
 66a:	71 f1       	breq	.+92     	; 0x6c8 <__vector_10+0x29c>
 66c:	f8 f0       	brcs	.+62     	; 0x6ac <__vector_10+0x280>
 66e:	86 30       	cpi	r24, 0x06	; 6
 670:	89 f1       	breq	.+98     	; 0x6d4 <__vector_10+0x2a8>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	44 c0       	rjmp	.+136    	; 0x6fe <__vector_10+0x2d2>
	//間欠点灯で明るさを調整
	switch (brightness) {

		case 1: //12.5% bn_pwm_countが8,16,24のタイミングで点灯
			if(
				bn_pwm_count == 8  ||
 676:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>

	//間欠点灯で明るさを調整
	switch (brightness) {

		case 1: //12.5% bn_pwm_countが8,16,24のタイミングで点灯
			if(
 67a:	88 30       	cpi	r24, 0x08	; 8
 67c:	69 f1       	breq	.+90     	; 0x6d8 <__vector_10+0x2ac>
				bn_pwm_count == 8  ||
 67e:	80 31       	cpi	r24, 0x10	; 16
 680:	69 f1       	breq	.+90     	; 0x6dc <__vector_10+0x2b0>
				bn_pwm_count == 16 ||
 682:	88 31       	cpi	r24, 0x18	; 24
 684:	69 f1       	breq	.+90     	; 0x6e0 <__vector_10+0x2b4>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	3a c0       	rjmp	.+116    	; 0x6fe <__vector_10+0x2d2>
			}
		break;

		case 2: //16.67% bn_pwm_countが6,12,18,24のタイミングで点灯
			if(
				bn_pwm_count == 6  ||
 68a:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
				seg_on = 1;
			}
		break;

		case 2: //16.67% bn_pwm_countが6,12,18,24のタイミングで点灯
			if(
 68e:	86 30       	cpi	r24, 0x06	; 6
 690:	49 f1       	breq	.+82     	; 0x6e4 <__vector_10+0x2b8>
				bn_pwm_count == 6  ||
 692:	8c 30       	cpi	r24, 0x0C	; 12
 694:	49 f1       	breq	.+82     	; 0x6e8 <__vector_10+0x2bc>
				bn_pwm_count == 12 ||
 696:	82 31       	cpi	r24, 0x12	; 18
 698:	49 f1       	breq	.+82     	; 0x6ec <__vector_10+0x2c0>
				bn_pwm_count == 18 ||
 69a:	88 31       	cpi	r24, 0x18	; 24
 69c:	49 f1       	breq	.+82     	; 0x6f0 <__vector_10+0x2c4>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	2e c0       	rjmp	.+92     	; 0x6fe <__vector_10+0x2d2>
				seg_on = 1;
			}
		break;

		case 3: //25% bn_pwm_countが4,8,12,16,20,24のタイミングで点灯
			if(bn_pwm_count % 4) {
 6a2:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 6a6:	83 70       	andi	r24, 0x03	; 3
 6a8:	29 f5       	brne	.+74     	; 0x6f4 <__vector_10+0x2c8>
 6aa:	29 c0       	rjmp	.+82     	; 0x6fe <__vector_10+0x2d2>
				seg_on = 1;
			}
		break;

		case 4: //33.33% bn_pwm_countが3,6,9,12,15,18,21,24のタイミングで点灯
			if(bn_pwm_count % 3) {
 6ac:	90 91 00 38 	lds	r25, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 6b0:	8b ea       	ldi	r24, 0xAB	; 171
 6b2:	98 9f       	mul	r25, r24
 6b4:	81 2d       	mov	r24, r1
 6b6:	11 24       	eor	r1, r1
 6b8:	86 95       	lsr	r24
 6ba:	28 2f       	mov	r18, r24
 6bc:	22 0f       	add	r18, r18
 6be:	82 0f       	add	r24, r18
 6c0:	98 13       	cpse	r25, r24
 6c2:	1a c0       	rjmp	.+52     	; 0x6f8 <__vector_10+0x2cc>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	1b c0       	rjmp	.+54     	; 0x6fe <__vector_10+0x2d2>
				seg_on = 1;
			}
		break;

		case 5: //50% bn_pwm_countが2,4,6,8,10,12,14,16,18,20,22,24のタイミングで点灯
			if(bn_pwm_count % 2) {
 6c8:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 6cc:	80 fd       	sbrc	r24, 0
 6ce:	16 c0       	rjmp	.+44     	; 0x6fc <__vector_10+0x2d0>

	//他のセグメントを一瞬でも光らせないようPA1~7までとPC0を一度全て消灯
	seg_all_off();

	//明るさ設定値に応じた点灯判定
	uint8_t seg_on = 0; //1を入れるとセグがONになる
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	15 c0       	rjmp	.+42     	; 0x6fe <__vector_10+0x2d2>
				seg_on = 1;
			}
		break;

		case 6: //100% bn_pwm_countがいくつでも全てのタイミングで点灯
			seg_on = 1;
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	13 c0       	rjmp	.+38     	; 0x6fe <__vector_10+0x2d2>
			if(
				bn_pwm_count == 8  ||
				bn_pwm_count == 16 ||
				bn_pwm_count == 24
			) {
				seg_on = 1;
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	11 c0       	rjmp	.+34     	; 0x6fe <__vector_10+0x2d2>
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	0f c0       	rjmp	.+30     	; 0x6fe <__vector_10+0x2d2>
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	0d c0       	rjmp	.+26     	; 0x6fe <__vector_10+0x2d2>
				bn_pwm_count == 6  ||
				bn_pwm_count == 12 ||
				bn_pwm_count == 18 ||
				bn_pwm_count == 24
			) {
				seg_on = 1;
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	0b c0       	rjmp	.+22     	; 0x6fe <__vector_10+0x2d2>
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	09 c0       	rjmp	.+18     	; 0x6fe <__vector_10+0x2d2>
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	07 c0       	rjmp	.+14     	; 0x6fe <__vector_10+0x2d2>
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	05 c0       	rjmp	.+10     	; 0x6fe <__vector_10+0x2d2>
			}
		break;

		case 3: //25% bn_pwm_countが4,8,12,16,20,24のタイミングで点灯
			if(bn_pwm_count % 4) {
				seg_on = 1;
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	03 c0       	rjmp	.+6      	; 0x6fe <__vector_10+0x2d2>
			}
		break;

		case 4: //33.33% bn_pwm_countが3,6,9,12,15,18,21,24のタイミングで点灯
			if(bn_pwm_count % 3) {
				seg_on = 1;
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	01 c0       	rjmp	.+2      	; 0x6fe <__vector_10+0x2d2>
			}
		break;

		case 5: //50% bn_pwm_countが2,4,6,8,10,12,14,16,18,20,22,24のタイミングで点灯
			if(bn_pwm_count % 2) {
				seg_on = 1;
 6fc:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}

	//点灯実行
	//if(0) { //デバッグ用
	if(seg_on) {
 6fe:	88 23       	and	r24, r24
 700:	d9 f1       	breq	.+118    	; 0x778 <__vector_10+0x34c>
		switch (out_dig) {
 702:	80 91 12 38 	lds	r24, 0x3812	; 0x803812 <__data_end>
 706:	82 30       	cpi	r24, 0x02	; 2
 708:	e9 f0       	breq	.+58     	; 0x744 <__vector_10+0x318>
 70a:	28 f4       	brcc	.+10     	; 0x716 <__vector_10+0x2ea>
 70c:	88 23       	and	r24, r24
 70e:	41 f0       	breq	.+16     	; 0x720 <__vector_10+0x2f4>
 710:	81 30       	cpi	r24, 0x01	; 1
 712:	59 f0       	breq	.+22     	; 0x72a <__vector_10+0x2fe>
 714:	31 c0       	rjmp	.+98     	; 0x778 <__vector_10+0x34c>
 716:	83 30       	cpi	r24, 0x03	; 3
 718:	e1 f0       	breq	.+56     	; 0x752 <__vector_10+0x326>
 71a:	84 30       	cpi	r24, 0x04	; 4
 71c:	f9 f0       	breq	.+62     	; 0x75c <__vector_10+0x330>
 71e:	2c c0       	rjmp	.+88     	; 0x778 <__vector_10+0x34c>

			case 0:
			VPORTB_OUT |= 0b00010000;
 720:	85 b1       	in	r24, 0x05	; 5
 722:	80 61       	ori	r24, 0x10	; 16
 724:	85 b9       	out	0x05, r24	; 5
			VPORTA_OUT = dig1;
 726:	c1 b9       	out	0x01, r28	; 1
			//現状このドットは使用していないのでコメントアウト 使うときは有効化してください
			//VPORTC_OUT = (dig1c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
			break;
 728:	27 c0       	rjmp	.+78     	; 0x778 <__vector_10+0x34c>

			case 1:
			VPORTC_OUT |= 0b00001000;
 72a:	89 b1       	in	r24, 0x09	; 9
 72c:	88 60       	ori	r24, 0x08	; 8
 72e:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig2;
 730:	d1 b9       	out	0x01, r29	; 1
			if(display_v) VPORTC_OUT = (dig2c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 732:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <display_v>
 736:	88 23       	and	r24, r24
 738:	f9 f0       	breq	.+62     	; 0x778 <__vector_10+0x34c>
 73a:	89 b1       	in	r24, 0x09	; 9
 73c:	8e 7f       	andi	r24, 0xFE	; 254
 73e:	e8 2a       	or	r14, r24
 740:	e9 b8       	out	0x09, r14	; 9
 742:	1a c0       	rjmp	.+52     	; 0x778 <__vector_10+0x34c>
			break;

			case 2:
			if(dig3) { //電力消費削減のため、コロンが消灯している時はカソード側トランジスタも開けない
 744:	ff 20       	and	r15, r15
 746:	c1 f0       	breq	.+48     	; 0x778 <__vector_10+0x34c>
				VPORTB_OUT |= 0b00100000;
 748:	85 b1       	in	r24, 0x05	; 5
 74a:	80 62       	ori	r24, 0x20	; 32
 74c:	85 b9       	out	0x05, r24	; 5
				VPORTA_OUT = dig3;
 74e:	f1 b8       	out	0x01, r15	; 1
 750:	13 c0       	rjmp	.+38     	; 0x778 <__vector_10+0x34c>
			}
			break;

			case 3:
			VPORTC_OUT |= 0b00000100;
 752:	89 b1       	in	r24, 0x09	; 9
 754:	84 60       	ori	r24, 0x04	; 4
 756:	89 b9       	out	0x09, r24	; 9
			VPORTA_OUT = dig4;
 758:	11 b9       	out	0x01, r17	; 1
			//現状このドットは使用していないのでコメントアウト 使うときは有効化してください
			//VPORTC_OUT = (dig4c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
			break;
 75a:	0e c0       	rjmp	.+28     	; 0x778 <__vector_10+0x34c>

			case 4:
			if(dig5) { //電力消費削減のため、dig5がゼロサプレスされていればカソード側トランジスタも開けない
 75c:	00 23       	and	r16, r16
 75e:	61 f0       	breq	.+24     	; 0x778 <__vector_10+0x34c>
				VPORTC_OUT |= 0b00000010;
 760:	89 b1       	in	r24, 0x09	; 9
 762:	82 60       	ori	r24, 0x02	; 2
 764:	89 b9       	out	0x09, r24	; 9
				VPORTA_OUT = dig5;
 766:	01 b9       	out	0x01, r16	; 1
				if(display_v) VPORTC_OUT = (dig5c  & 0b00000001) | (VPORTC_OUT & 0b11111110);//PC1～7に影響を与えないようマスク処理をしてPC0に値を代入
 768:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <display_v>
 76c:	88 23       	and	r24, r24
 76e:	21 f0       	breq	.+8      	; 0x778 <__vector_10+0x34c>
 770:	89 b1       	in	r24, 0x09	; 9
 772:	8e 7f       	andi	r24, 0xFE	; 254
 774:	e8 2a       	or	r14, r24
 776:	e9 b8       	out	0x09, r14	; 9
		}
	}


	//5回に1回やること
	if (++out_dig == 5) {
 778:	80 91 12 38 	lds	r24, 0x3812	; 0x803812 <__data_end>
 77c:	8f 5f       	subi	r24, 0xFF	; 255
 77e:	80 93 12 38 	sts	0x3812, r24	; 0x803812 <__data_end>
 782:	85 30       	cpi	r24, 0x05	; 5
 784:	09 f0       	breq	.+2      	; 0x788 <__vector_10+0x35c>
 786:	60 c0       	rjmp	.+192    	; 0x848 <__DATA_REGION_LENGTH__+0x48>
		//out_digの0~5トグル動作
		out_dig = 0;
 788:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <__data_end>

		//コロンの点滅動作
		if(!(RTC_CNTL & 0b00000001) || mode != MODE_CLOCK) { //コロンの点滅
 78c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 790:	80 ff       	sbrs	r24, 0
 792:	04 c0       	rjmp	.+8      	; 0x79c <__vector_10+0x370>
 794:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <mode>
 798:	81 30       	cpi	r24, 0x01	; 1
 79a:	21 f0       	breq	.+8      	; 0x7a4 <__vector_10+0x378>
			colon = 0b00000110;
 79c:	86 e0       	ldi	r24, 0x06	; 6
 79e:	80 93 15 38 	sts	0x3815, r24	; 0x803815 <colon.3364>
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <__vector_10+0x37c>
		}else{
			colon = 0b00000000;
 7a4:	10 92 15 38 	sts	0x3815, r1	; 0x803815 <colon.3364>
		}

		//スリープへ向けwakeupを減らす
		if(wakeup) wakeup--;
 7a8:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <wakeup>
 7ac:	90 91 2f 38 	lds	r25, 0x382F	; 0x80382f <wakeup+0x1>
 7b0:	00 97       	sbiw	r24, 0x00	; 0
 7b2:	29 f0       	breq	.+10     	; 0x7be <__vector_10+0x392>
 7b4:	01 97       	sbiw	r24, 0x01	; 1
 7b6:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <wakeup>
 7ba:	90 93 2f 38 	sts	0x382F, r25	; 0x80382f <wakeup+0x1>

		//電圧表示時間を減らす
		if(display_v) display_v--;
 7be:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <display_v>
 7c2:	88 23       	and	r24, r24
 7c4:	19 f0       	breq	.+6      	; 0x7cc <__vector_10+0x3a0>
 7c6:	81 50       	subi	r24, 0x01	; 1
 7c8:	80 93 22 38 	sts	0x3822, r24	; 0x803822 <display_v>

		//タクトスイッチが長押しされている場合、長押しカウントを加算
		if(VPORTB_IN & PIN1_bm) {
 7cc:	31 9b       	sbis	0x06, 1	; 6
 7ce:	05 c0       	rjmp	.+10     	; 0x7da <__vector_10+0x3ae>
			long_push = 0;
 7d0:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <long_push>
 7d4:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <long_push+0x1>
 7d8:	37 c0       	rjmp	.+110    	; 0x848 <__DATA_REGION_LENGTH__+0x48>
		}else{
			if(++long_push > 1000) {
 7da:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <long_push>
 7de:	90 91 2d 38 	lds	r25, 0x382D	; 0x80382d <long_push+0x1>
 7e2:	01 96       	adiw	r24, 0x01	; 1
 7e4:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <long_push>
 7e8:	90 93 2d 38 	sts	0x382D, r25	; 0x80382d <long_push+0x1>
 7ec:	89 3e       	cpi	r24, 0xE9	; 233
 7ee:	93 40       	sbci	r25, 0x03	; 3
 7f0:	58 f1       	brcs	.+86     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
				long_push = 0;
 7f2:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <long_push>
 7f6:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <long_push+0x1>
				if(unset) {
 7fa:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <unset>
 7fe:	88 23       	and	r24, r24
 800:	31 f0       	breq	.+12     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
					unset = 0; //時刻未設定フラグを折る
 802:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <unset>
					hour = min = 0;
 806:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <min>
 80a:	10 92 30 38 	sts	0x3830, r1	; 0x803830 <hour>
				}
				RTC_CNT = 0; //時刻設定をした後、秒数が0から始まるようにする
 80e:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 812:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
				change_mode(0);
 816:	80 e0       	ldi	r24, 0x00	; 0
 818:	0e 94 05 02 	call	0x40a	; 0x40a <change_mode>
				change_mode_after = 1;
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <change_mode_after>

				//スリープを挟まず3回連続で時刻合わせを行った場合は24時間表記に切り替える
				if(mode == MODE_HOUR_SET) {
 822:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <mode>
 826:	82 30       	cpi	r24, 0x02	; 2
 828:	79 f4       	brne	.+30     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
					s24count++;
 82a:	80 91 20 38 	lds	r24, 0x3820	; 0x803820 <s24count>
 82e:	8f 5f       	subi	r24, 0xFF	; 255
 830:	80 93 20 38 	sts	0x3820, r24	; 0x803820 <s24count>
					if(s24count >= 3) {
 834:	83 30       	cpi	r24, 0x03	; 3
 836:	28 f0       	brcs	.+10     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
						s24count = 0;
 838:	10 92 20 38 	sts	0x3820, r1	; 0x803820 <s24count>
						system12 = 0;
 83c:	10 92 03 38 	sts	0x3803, r1	; 0x803803 <system12>
 840:	03 c0       	rjmp	.+6      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
					}else{
						system12 = 1;
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <system12>
				}
			}
		}
	}

}
 848:	ff 91       	pop	r31
 84a:	ef 91       	pop	r30
 84c:	df 91       	pop	r29
 84e:	cf 91       	pop	r28
 850:	bf 91       	pop	r27
 852:	af 91       	pop	r26
 854:	9f 91       	pop	r25
 856:	8f 91       	pop	r24
 858:	7f 91       	pop	r23
 85a:	6f 91       	pop	r22
 85c:	5f 91       	pop	r21
 85e:	4f 91       	pop	r20
 860:	3f 91       	pop	r19
 862:	2f 91       	pop	r18
 864:	1f 91       	pop	r17
 866:	0f 91       	pop	r16
 868:	ff 90       	pop	r15
 86a:	ef 90       	pop	r14
 86c:	0f 90       	pop	r0
 86e:	0f be       	out	0x3f, r0	; 63
 870:	0f 90       	pop	r0
 872:	1f 90       	pop	r1
 874:	18 95       	reti

00000876 <__vector_4>:

//外部割り込み PB0が変化したら 両方のエッジを検出する(片方エッジにしたいがそうするとなぜかスタンバイから復帰しない)
ISR(PORTB_PORT_vect) {
 876:	1f 92       	push	r1
 878:	0f 92       	push	r0
 87a:	0f b6       	in	r0, 0x3f	; 63
 87c:	0f 92       	push	r0
 87e:	11 24       	eor	r1, r1
 880:	2f 93       	push	r18
 882:	3f 93       	push	r19
 884:	4f 93       	push	r20
 886:	5f 93       	push	r21
 888:	6f 93       	push	r22
 88a:	7f 93       	push	r23
 88c:	8f 93       	push	r24
 88e:	9f 93       	push	r25
 890:	af 93       	push	r26
 892:	bf 93       	push	r27
 894:	ef 93       	push	r30
 896:	ff 93       	push	r31
	
	PORTB_INTFLAGS |= 0b00000010; //割り込み要求フラグ解除
 898:	e9 e2       	ldi	r30, 0x29	; 41
 89a:	f4 e0       	ldi	r31, 0x04	; 4
 89c:	80 81       	ld	r24, Z
 89e:	82 60       	ori	r24, 0x02	; 2
 8a0:	80 83       	st	Z, r24

	//赤外線センサー PB0がLowに切り替わったら何もせず返す 両方のエッジを検出するようにしているので立ち下がりエッジ割り込みはここで無効にする
	if(!(VPORTB_IN & PIN0_bm)) {
 8a2:	30 9b       	sbis	0x06, 0	; 6
 8a4:	29 c0       	rjmp	.+82     	; 0x8f8 <__vector_4+0x82>
		return;
	}

	//赤外線センサー PB0がHighだったら一定時間起き上がらせる
	if(VPORTB_IN & PIN0_bm) {
 8a6:	30 9b       	sbis	0x06, 0	; 6
 8a8:	27 c0       	rjmp	.+78     	; 0x8f8 <__vector_4+0x82>

		//前回寝てから3カウント以内だったら何もせずに再び寝る
		if(!wakeup && (RTC_CNT - last_rtc_cnt) < 3) {
 8aa:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <wakeup>
 8ae:	90 91 2f 38 	lds	r25, 0x382F	; 0x80382f <wakeup+0x1>
 8b2:	89 2b       	or	r24, r25
 8b4:	61 f4       	brne	.+24     	; 0x8ce <__vector_4+0x58>
 8b6:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 8ba:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
 8be:	20 91 1e 38 	lds	r18, 0x381E	; 0x80381e <last_rtc_cnt>
 8c2:	30 91 1f 38 	lds	r19, 0x381F	; 0x80381f <last_rtc_cnt+0x1>
 8c6:	82 1b       	sub	r24, r18
 8c8:	93 0b       	sbc	r25, r19
 8ca:	03 97       	sbiw	r24, 0x03	; 3
 8cc:	a8 f0       	brcs	.+42     	; 0x8f8 <__vector_4+0x82>
			return;
		}

		//まず電圧測定する
		if(yet_v) {
 8ce:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <yet_v>
 8d2:	88 23       	and	r24, r24
 8d4:	21 f0       	breq	.+8      	; 0x8de <__vector_4+0x68>
			yet_v = 0; //電圧測定をしたことをyet_vに記録
 8d6:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <yet_v>
			get_v();
 8da:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
		}

		//一定時間起き上がらせる
		if(wakeup < 800) wakeup = 800;
 8de:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <wakeup>
 8e2:	90 91 2f 38 	lds	r25, 0x382F	; 0x80382f <wakeup+0x1>
 8e6:	80 32       	cpi	r24, 0x20	; 32
 8e8:	93 40       	sbci	r25, 0x03	; 3
 8ea:	30 f4       	brcc	.+12     	; 0x8f8 <__vector_4+0x82>
 8ec:	80 e2       	ldi	r24, 0x20	; 32
 8ee:	93 e0       	ldi	r25, 0x03	; 3
 8f0:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <wakeup>
 8f4:	90 93 2f 38 	sts	0x382F, r25	; 0x80382f <wakeup+0x1>
		return;
	}

	return;
}
 8f8:	ff 91       	pop	r31
 8fa:	ef 91       	pop	r30
 8fc:	bf 91       	pop	r27
 8fe:	af 91       	pop	r26
 900:	9f 91       	pop	r25
 902:	8f 91       	pop	r24
 904:	7f 91       	pop	r23
 906:	6f 91       	pop	r22
 908:	5f 91       	pop	r21
 90a:	4f 91       	pop	r20
 90c:	3f 91       	pop	r19
 90e:	2f 91       	pop	r18
 910:	0f 90       	pop	r0
 912:	0f be       	out	0x3f, r0	; 63
 914:	0f 90       	pop	r0
 916:	1f 90       	pop	r1
 918:	18 95       	reti

0000091a <__vector_6>:

//リアルタイムクロック 比較一致割り込み
ISR(RTC_CNT_vect) {
 91a:	1f 92       	push	r1
 91c:	0f 92       	push	r0
 91e:	0f b6       	in	r0, 0x3f	; 63
 920:	0f 92       	push	r0
 922:	11 24       	eor	r1, r1
 924:	2f 93       	push	r18
 926:	3f 93       	push	r19
 928:	4f 93       	push	r20
 92a:	5f 93       	push	r21
 92c:	6f 93       	push	r22
 92e:	7f 93       	push	r23
 930:	8f 93       	push	r24
 932:	9f 93       	push	r25
 934:	af 93       	push	r26
 936:	bf 93       	push	r27
 938:	ef 93       	push	r30
 93a:	ff 93       	push	r31
	RTC_CNT = 0;
 93c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 940:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
	RTC_INTFLAGS |= 0b00000010;
 944:	e3 e4       	ldi	r30, 0x43	; 67
 946:	f1 e0       	ldi	r31, 0x01	; 1
 948:	80 81       	ld	r24, Z
 94a:	82 60       	ori	r24, 0x02	; 2
 94c:	80 83       	st	Z, r24

	//時計を進める
	if (mode == MODE_CLOCK && ++min >= 60) {
 94e:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <mode>
 952:	81 30       	cpi	r24, 0x01	; 1
 954:	91 f4       	brne	.+36     	; 0x97a <__vector_6+0x60>
 956:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <min>
 95a:	8f 5f       	subi	r24, 0xFF	; 255
 95c:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <min>
 960:	8c 33       	cpi	r24, 0x3C	; 60
 962:	58 f0       	brcs	.+22     	; 0x97a <__vector_6+0x60>
		min = 0;
 964:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <min>
		if(++hour >= 24) hour = 0;
 968:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <hour>
 96c:	8f 5f       	subi	r24, 0xFF	; 255
 96e:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <hour>
 972:	88 31       	cpi	r24, 0x18	; 24
 974:	10 f0       	brcs	.+4      	; 0x97a <__vector_6+0x60>
 976:	10 92 30 38 	sts	0x3830, r1	; 0x803830 <hour>
	}
	

	//1時間に1回やる処理
	if(!min) {
 97a:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <min>
 97e:	81 11       	cpse	r24, r1
 980:	44 c0       	rjmp	.+136    	; 0xa0a <__vector_6+0xf0>

		if(!wakeup){
 982:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <wakeup>
 986:	90 91 2f 38 	lds	r25, 0x382F	; 0x80382f <wakeup+0x1>
 98a:	89 2b       	or	r24, r25
 98c:	09 f0       	breq	.+2      	; 0x990 <__vector_6+0x76>
 98e:	3d c0       	rjmp	.+122    	; 0xa0a <__vector_6+0xf0>
			get_v();
 990:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
			//低電圧再起動処理 起きてる時にやると一瞬7セグがちらつくので起きてない時(厳密には起きてるカウントがされていない時)にやる
			if(supply_v <= MIN_SUPPLY_V) {
 994:	60 91 27 38 	lds	r22, 0x3827	; 0x803827 <supply_v>
 998:	70 91 28 38 	lds	r23, 0x3828	; 0x803828 <supply_v+0x1>
 99c:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <supply_v+0x2>
 9a0:	90 91 2a 38 	lds	r25, 0x382A	; 0x80382a <supply_v+0x3>
 9a4:	2a e9       	ldi	r18, 0x9A	; 154
 9a6:	39 e9       	ldi	r19, 0x99	; 153
 9a8:	49 ed       	ldi	r20, 0xD9	; 217
 9aa:	5f e3       	ldi	r21, 0x3F	; 63
 9ac:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__cmpsf2>
 9b0:	18 16       	cp	r1, r24
 9b2:	94 f0       	brlt	.+36     	; 0x9d8 <__vector_6+0xbe>
				//停止処理
				//ウォッチドッグタイマを0.008秒で起動
				wdt_enable(0b00000001);//0.008秒の場合、右4桁をデータシート上の8CLKのレジスタ設定値にする
 9b4:	88 ed       	ldi	r24, 0xD8	; 216
 9b6:	a8 95       	wdr
 9b8:	84 bf       	out	0x34, r24	; 52
 9ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
 9be:	81 60       	ori	r24, 0x01	; 1
 9c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
 9c4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__RODATA_PM_OFFSET__+0x7f8101>
 9c8:	81 fd       	sbrc	r24, 1
 9ca:	fc cf       	rjmp	.-8      	; 0x9c4 <__vector_6+0xaa>
 9cc:	87 ea       	ldi	r24, 0xA7	; 167
 9ce:	91 e6       	ldi	r25, 0x61	; 97
 9d0:	01 97       	sbiw	r24, 0x01	; 1
 9d2:	f1 f7       	brne	.-4      	; 0x9d0 <__vector_6+0xb6>
 9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <__vector_6+0xbc>
 9d6:	00 00       	nop
				//待機(しているあいだにウォッチドッグリセットがかかる)
				_delay_ms(100);
			}
			//高電圧放電処理
			if(supply_v >= MAX_SUPPLY_V) {
 9d8:	60 91 27 38 	lds	r22, 0x3827	; 0x803827 <supply_v>
 9dc:	70 91 28 38 	lds	r23, 0x3828	; 0x803828 <supply_v+0x1>
 9e0:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <supply_v+0x2>
 9e4:	90 91 2a 38 	lds	r25, 0x382A	; 0x80382a <supply_v+0x3>
 9e8:	26 e6       	ldi	r18, 0x66	; 102
 9ea:	36 e6       	ldi	r19, 0x66	; 102
 9ec:	46 ea       	ldi	r20, 0xA6	; 166
 9ee:	50 e4       	ldi	r21, 0x40	; 64
 9f0:	0e 94 17 07 	call	0xe2e	; 0xe2e <__gesf2>
 9f4:	88 23       	and	r24, r24
 9f6:	4c f0       	brlt	.+18     	; 0xa0a <__vector_6+0xf0>
				wakeup = 5200;
 9f8:	80 e5       	ldi	r24, 0x50	; 80
 9fa:	94 e1       	ldi	r25, 0x14	; 20
 9fc:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <wakeup>
 a00:	90 93 2f 38 	sts	0x382F, r25	; 0x80382f <wakeup+0x1>
				discharge = 1;
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	80 93 21 38 	sts	0x3821, r24	; 0x803821 <discharge>
			}
		}
	}

	return;
}
 a0a:	ff 91       	pop	r31
 a0c:	ef 91       	pop	r30
 a0e:	bf 91       	pop	r27
 a10:	af 91       	pop	r26
 a12:	9f 91       	pop	r25
 a14:	8f 91       	pop	r24
 a16:	7f 91       	pop	r23
 a18:	6f 91       	pop	r22
 a1a:	5f 91       	pop	r21
 a1c:	4f 91       	pop	r20
 a1e:	3f 91       	pop	r19
 a20:	2f 91       	pop	r18
 a22:	0f 90       	pop	r0
 a24:	0f be       	out	0x3f, r0	; 63
 a26:	0f 90       	pop	r0
 a28:	1f 90       	pop	r1
 a2a:	18 95       	reti

00000a2c <main>:
int main(void) {

	//■□■――――――――――――――――――――――――――――――――――――■□■
	//		□ レジスタの設定
	//■□■――――――――――――――――――――――――――――――――――――■□■
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 a2c:	88 ed       	ldi	r24, 0xD8	; 216
 a2e:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLA = 0b00000000; //16/20 MHz内部オシレータ
 a30:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RODATA_PM_OFFSET__+0x7f8060>
	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 a34:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLB = 0b00000111; //16分周
 a36:	97 e0       	ldi	r25, 0x07	; 7
 a38:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>

	//入出力モード設定
	VPORTA_DIR = 0b11111111; //ポートA 
 a3c:	9f ef       	ldi	r25, 0xFF	; 255
 a3e:	90 b9       	out	0x00, r25	; 0
	VPORTB_DIR = 0b11111100; //ポートB 
 a40:	2c ef       	ldi	r18, 0xFC	; 252
 a42:	24 b9       	out	0x04, r18	; 4
	VPORTC_DIR = 0b11111111; //ポートC
 a44:	98 b9       	out	0x08, r25	; 8

	//出力の初期化
	VPORTA_OUT = 0b00000000; //ポートA
 a46:	11 b8       	out	0x01, r1	; 1
	VPORTB_OUT = 0b00000000; //ポートB
 a48:	15 b8       	out	0x05, r1	; 5
	VPORTC_OUT = 0b00000000; //ポートC
 a4a:	19 b8       	out	0x09, r1	; 9

	//焦電型赤外線センサー入力
	PORTB_PIN0CTRL = 0b00000001; //プルアップ無効 両方のエッジを検出する
 a4c:	91 e0       	ldi	r25, 0x01	; 1
 a4e:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <__RODATA_PM_OFFSET__+0x7f8430>
	//タクトスイッチ入力
	PORTB_PIN1CTRL = 0b00001000; //プルアップ有効
 a52:	28 e0       	ldi	r18, 0x08	; 8
 a54:	20 93 31 04 	sts	0x0431, r18	; 0x800431 <__RODATA_PM_OFFSET__+0x7f8431>

	CPU_CCP = 0xD8;//保護されたI/Oレジスタの変更を許可する
 a58:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_XOSC32KCTRLA = 0b00000001; //外付け水晶振動子 イネーブル
 a5a:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__RODATA_PM_OFFSET__+0x7f807c>
	
	//RTC設定
	RTC_INTCTRL = 0b00000010; //比較一致割り込み許可
 a5e:	82 e0       	ldi	r24, 0x02	; 2
 a60:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__RODATA_PM_OFFSET__+0x7f8142>
	RTC_CLKSEL  = 0b00000010; //クロック選択 XOSC32Kからの32.768 kHz
 a64:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <__RODATA_PM_OFFSET__+0x7f8147>
	//STATUS.CTRLABUSYフラグが1の間待機
	while((RTC_STATUS & 0b00000001));
 a68:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7f8141>
 a6c:	80 fd       	sbrc	r24, 0
 a6e:	fc cf       	rjmp	.-8      	; 0xa68 <main+0x3c>
	RTC_CTRLA   = 0b11110001; //ｽﾀﾝﾊﾞｲ休止動作でもRTC許可 16384分周=0.5秒カウント RTC許可
 a70:	81 ef       	ldi	r24, 0xF1	; 241
 a72:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__RODATA_PM_OFFSET__+0x7f8140>

	//割り込みたい間隔の秒数をx2-1して代入
	RTC_CMP = 60 * 2 - 1;
 a76:	87 e7       	ldi	r24, 0x77	; 119
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__RODATA_PM_OFFSET__+0x7f814c>
 a7e:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__RODATA_PM_OFFSET__+0x7f814d>
	RTC_CNT = 0;
 a82:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 a86:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>

	//タイマーA
	TCA0_SINGLE_CTRLA = 0b00001101; //1024分周 動作許可
 a8a:	8d e0       	ldi	r24, 0x0D	; 13
 a8c:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
	TCA0_SINGLE_CTRLB = 0b00000000; //
 a90:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__RODATA_PM_OFFSET__+0x7f8a01>
	TCA0_SINGLE_CMP0 = 1; // カウントがこの値に達したら割り込み(TCA0_CMP1_vect)が発生
 a94:	81 e0       	ldi	r24, 0x01	; 1
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
 a9c:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__RODATA_PM_OFFSET__+0x7f8a29>
	TCA0_SINGLE_INTCTRL = 0b00010000; //CMP0割り込み許可
 aa0:	80 e1       	ldi	r24, 0x10	; 16
 aa2:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__RODATA_PM_OFFSET__+0x7f8a0a>

	//ADC設定
	ADC0_CTRLA = 0b00000000; //ADC Disable
 aa6:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
	ADC0_CTRLB = 0b00000000; //累積なし
 aaa:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <__RODATA_PM_OFFSET__+0x7f8601>
	ADC0_CTRLC = 0b01010101; //VREF = VDD, プリスケーラ1/64
 aae:	95 e5       	ldi	r25, 0x55	; 85
 ab0:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__RODATA_PM_OFFSET__+0x7f8602>
	VREF_CTRLA = 0b00010000; //内部基準電圧 1.1V
 ab4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__RODATA_PM_OFFSET__+0x7f80a0>

	set_sleep_mode(SLEEP_MODE_STANDBY); //スリープモードを設定
 ab8:	e0 e5       	ldi	r30, 0x50	; 80
 aba:	f0 e0       	ldi	r31, 0x00	; 0
 abc:	80 81       	ld	r24, Z
 abe:	89 7f       	andi	r24, 0xF9	; 249
 ac0:	82 60       	ori	r24, 0x02	; 2
 ac2:	80 83       	st	Z, r24
 ac4:	81 ee       	ldi	r24, 0xE1	; 225
 ac6:	94 e0       	ldi	r25, 0x04	; 4
 ac8:	01 97       	sbiw	r24, 0x01	; 1
 aca:	f1 f7       	brne	.-4      	; 0xac8 <main+0x9c>
 acc:	00 c0       	rjmp	.+0      	; 0xace <main+0xa2>
 ace:	00 00       	nop

	//少し待機
	_delay_ms(5);

	sei(); //割り込み許可
 ad0:	78 94       	sei
 ad2:	23 c0       	rjmp	.+70     	; 0xb1a <main+0xee>
	
	while (1) {

		//放電中ループ 起き続け3秒毎に電圧を計り下がっていたらブレイク
		while (discharge) {
			get_v();
 ad4:	0e 94 5d 00 	call	0xba	; 0xba <get_v>
			if(supply_v < (MAX_SUPPLY_V - 0.1)) {
 ad8:	60 91 27 38 	lds	r22, 0x3827	; 0x803827 <supply_v>
 adc:	70 91 28 38 	lds	r23, 0x3828	; 0x803828 <supply_v+0x1>
 ae0:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <supply_v+0x2>
 ae4:	90 91 2a 38 	lds	r25, 0x382A	; 0x80382a <supply_v+0x3>
 ae8:	23 e3       	ldi	r18, 0x33	; 51
 aea:	33 e3       	ldi	r19, 0x33	; 51
 aec:	43 ea       	ldi	r20, 0xA3	; 163
 aee:	50 e4       	ldi	r21, 0x40	; 64
 af0:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__cmpsf2>
 af4:	88 23       	and	r24, r24
 af6:	3c f4       	brge	.+14     	; 0xb06 <main+0xda>
				discharge = 0;
 af8:	10 92 21 38 	sts	0x3821, r1	; 0x803821 <discharge>
				wakeup = 0;
 afc:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <wakeup>
 b00:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <wakeup+0x1>
				break;
 b04:	0e c0       	rjmp	.+28     	; 0xb22 <main+0xf6>
			}
			sens_delay_ms(3000);
 b06:	88 eb       	ldi	r24, 0xB8	; 184
 b08:	9b e0       	ldi	r25, 0x0B	; 11
 b0a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <sens_delay_ms>
			wakeup = 5200;
 b0e:	80 e5       	ldi	r24, 0x50	; 80
 b10:	94 e1       	ldi	r25, 0x14	; 20
 b12:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <wakeup>
 b16:	90 93 2f 38 	sts	0x382F, r25	; 0x80382f <wakeup+0x1>
	sei(); //割り込み許可
	
	while (1) {

		//放電中ループ 起き続け3秒毎に電圧を計り下がっていたらブレイク
		while (discharge) {
 b1a:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <discharge>
 b1e:	81 11       	cpse	r24, r1
 b20:	d9 cf       	rjmp	.-78     	; 0xad4 <main+0xa8>
			}
			sens_delay_ms(3000);
			wakeup = 5200;
		}

		if(wakeup) {
 b22:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <wakeup>
 b26:	90 91 2f 38 	lds	r25, 0x382F	; 0x80382f <wakeup+0x1>
 b2a:	89 2b       	or	r24, r25
 b2c:	49 f0       	breq	.+18     	; 0xb40 <main+0x114>
			last_rtc_cnt = RTC_CNT;
 b2e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 b32:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
 b36:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <last_rtc_cnt>
 b3a:	90 93 1f 38 	sts	0x381F, r25	; 0x80381f <last_rtc_cnt+0x1>
 b3e:	1a c0       	rjmp	.+52     	; 0xb74 <main+0x148>
		}else{
			//寝る準備
			seg_all_off();
 b40:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <seg_all_off>
			change_mode(MODE_CLOCK);
 b44:	81 e0       	ldi	r24, 0x01	; 1
 b46:	0e 94 05 02 	call	0x40a	; 0x40a <change_mode>
			display_v = 0;
 b4a:	10 92 22 38 	sts	0x3822, r1	; 0x803822 <display_v>
			yet_v = 1;
 b4e:	81 e0       	ldi	r24, 0x01	; 1
 b50:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <yet_v>
			s24count = 0;
 b54:	10 92 20 38 	sts	0x3820, r1	; 0x803820 <s24count>
			old_min = old_hour = 255;
 b58:	8f ef       	ldi	r24, 0xFF	; 255
 b5a:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <old_hour>
 b5e:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <old_min>
			//寝る
			sleep_mode();
 b62:	e0 e5       	ldi	r30, 0x50	; 80
 b64:	f0 e0       	ldi	r31, 0x00	; 0
 b66:	80 81       	ld	r24, Z
 b68:	81 60       	ori	r24, 0x01	; 1
 b6a:	80 83       	st	Z, r24
 b6c:	88 95       	sleep
 b6e:	80 81       	ld	r24, Z
 b70:	8e 7f       	andi	r24, 0xFE	; 254
 b72:	80 83       	st	Z, r24
		}
		
		sens_delay_ms(5);
 b74:	85 e0       	ldi	r24, 0x05	; 5
 b76:	90 e0       	ldi	r25, 0x00	; 0
 b78:	0e 94 7d 01 	call	0x2fa	; 0x2fa <sens_delay_ms>

	}
 b7c:	ce cf       	rjmp	.-100    	; 0xb1a <main+0xee>

00000b7e <__cmpsf2>:
 b7e:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fp_cmp>
 b82:	08 f4       	brcc	.+2      	; 0xb86 <__cmpsf2+0x8>
 b84:	81 e0       	ldi	r24, 0x01	; 1
 b86:	08 95       	ret

00000b88 <__divsf3>:
 b88:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__divsf3x>
 b8c:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_round>
 b90:	0e 94 d6 06 	call	0xdac	; 0xdac <__fp_pscB>
 b94:	58 f0       	brcs	.+22     	; 0xbac <__divsf3+0x24>
 b96:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__fp_pscA>
 b9a:	40 f0       	brcs	.+16     	; 0xbac <__divsf3+0x24>
 b9c:	29 f4       	brne	.+10     	; 0xba8 <__divsf3+0x20>
 b9e:	5f 3f       	cpi	r21, 0xFF	; 255
 ba0:	29 f0       	breq	.+10     	; 0xbac <__divsf3+0x24>
 ba2:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <__fp_inf>
 ba6:	51 11       	cpse	r21, r1
 ba8:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__fp_szero>
 bac:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__fp_nan>

00000bb0 <__divsf3x>:
 bb0:	0e 94 ee 06 	call	0xddc	; 0xddc <__fp_split3>
 bb4:	68 f3       	brcs	.-38     	; 0xb90 <__divsf3+0x8>

00000bb6 <__divsf3_pse>:
 bb6:	99 23       	and	r25, r25
 bb8:	b1 f3       	breq	.-20     	; 0xba6 <__divsf3+0x1e>
 bba:	55 23       	and	r21, r21
 bbc:	91 f3       	breq	.-28     	; 0xba2 <__divsf3+0x1a>
 bbe:	95 1b       	sub	r25, r21
 bc0:	55 0b       	sbc	r21, r21
 bc2:	bb 27       	eor	r27, r27
 bc4:	aa 27       	eor	r26, r26
 bc6:	62 17       	cp	r22, r18
 bc8:	73 07       	cpc	r23, r19
 bca:	84 07       	cpc	r24, r20
 bcc:	38 f0       	brcs	.+14     	; 0xbdc <__divsf3_pse+0x26>
 bce:	9f 5f       	subi	r25, 0xFF	; 255
 bd0:	5f 4f       	sbci	r21, 0xFF	; 255
 bd2:	22 0f       	add	r18, r18
 bd4:	33 1f       	adc	r19, r19
 bd6:	44 1f       	adc	r20, r20
 bd8:	aa 1f       	adc	r26, r26
 bda:	a9 f3       	breq	.-22     	; 0xbc6 <__divsf3_pse+0x10>
 bdc:	35 d0       	rcall	.+106    	; 0xc48 <__divsf3_pse+0x92>
 bde:	0e 2e       	mov	r0, r30
 be0:	3a f0       	brmi	.+14     	; 0xbf0 <__divsf3_pse+0x3a>
 be2:	e0 e8       	ldi	r30, 0x80	; 128
 be4:	32 d0       	rcall	.+100    	; 0xc4a <__divsf3_pse+0x94>
 be6:	91 50       	subi	r25, 0x01	; 1
 be8:	50 40       	sbci	r21, 0x00	; 0
 bea:	e6 95       	lsr	r30
 bec:	00 1c       	adc	r0, r0
 bee:	ca f7       	brpl	.-14     	; 0xbe2 <__divsf3_pse+0x2c>
 bf0:	2b d0       	rcall	.+86     	; 0xc48 <__divsf3_pse+0x92>
 bf2:	fe 2f       	mov	r31, r30
 bf4:	29 d0       	rcall	.+82     	; 0xc48 <__divsf3_pse+0x92>
 bf6:	66 0f       	add	r22, r22
 bf8:	77 1f       	adc	r23, r23
 bfa:	88 1f       	adc	r24, r24
 bfc:	bb 1f       	adc	r27, r27
 bfe:	26 17       	cp	r18, r22
 c00:	37 07       	cpc	r19, r23
 c02:	48 07       	cpc	r20, r24
 c04:	ab 07       	cpc	r26, r27
 c06:	b0 e8       	ldi	r27, 0x80	; 128
 c08:	09 f0       	breq	.+2      	; 0xc0c <__divsf3_pse+0x56>
 c0a:	bb 0b       	sbc	r27, r27
 c0c:	80 2d       	mov	r24, r0
 c0e:	bf 01       	movw	r22, r30
 c10:	ff 27       	eor	r31, r31
 c12:	93 58       	subi	r25, 0x83	; 131
 c14:	5f 4f       	sbci	r21, 0xFF	; 255
 c16:	3a f0       	brmi	.+14     	; 0xc26 <__divsf3_pse+0x70>
 c18:	9e 3f       	cpi	r25, 0xFE	; 254
 c1a:	51 05       	cpc	r21, r1
 c1c:	78 f0       	brcs	.+30     	; 0xc3c <__divsf3_pse+0x86>
 c1e:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <__fp_inf>
 c22:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__fp_szero>
 c26:	5f 3f       	cpi	r21, 0xFF	; 255
 c28:	e4 f3       	brlt	.-8      	; 0xc22 <__divsf3_pse+0x6c>
 c2a:	98 3e       	cpi	r25, 0xE8	; 232
 c2c:	d4 f3       	brlt	.-12     	; 0xc22 <__divsf3_pse+0x6c>
 c2e:	86 95       	lsr	r24
 c30:	77 95       	ror	r23
 c32:	67 95       	ror	r22
 c34:	b7 95       	ror	r27
 c36:	f7 95       	ror	r31
 c38:	9f 5f       	subi	r25, 0xFF	; 255
 c3a:	c9 f7       	brne	.-14     	; 0xc2e <__divsf3_pse+0x78>
 c3c:	88 0f       	add	r24, r24
 c3e:	91 1d       	adc	r25, r1
 c40:	96 95       	lsr	r25
 c42:	87 95       	ror	r24
 c44:	97 f9       	bld	r25, 7
 c46:	08 95       	ret
 c48:	e1 e0       	ldi	r30, 0x01	; 1
 c4a:	66 0f       	add	r22, r22
 c4c:	77 1f       	adc	r23, r23
 c4e:	88 1f       	adc	r24, r24
 c50:	bb 1f       	adc	r27, r27
 c52:	62 17       	cp	r22, r18
 c54:	73 07       	cpc	r23, r19
 c56:	84 07       	cpc	r24, r20
 c58:	ba 07       	cpc	r27, r26
 c5a:	20 f0       	brcs	.+8      	; 0xc64 <__divsf3_pse+0xae>
 c5c:	62 1b       	sub	r22, r18
 c5e:	73 0b       	sbc	r23, r19
 c60:	84 0b       	sbc	r24, r20
 c62:	ba 0b       	sbc	r27, r26
 c64:	ee 1f       	adc	r30, r30
 c66:	88 f7       	brcc	.-30     	; 0xc4a <__divsf3_pse+0x94>
 c68:	e0 95       	com	r30
 c6a:	08 95       	ret

00000c6c <__fixunssfsi>:
 c6c:	0e 94 f6 06 	call	0xdec	; 0xdec <__fp_splitA>
 c70:	88 f0       	brcs	.+34     	; 0xc94 <__fixunssfsi+0x28>
 c72:	9f 57       	subi	r25, 0x7F	; 127
 c74:	98 f0       	brcs	.+38     	; 0xc9c <__fixunssfsi+0x30>
 c76:	b9 2f       	mov	r27, r25
 c78:	99 27       	eor	r25, r25
 c7a:	b7 51       	subi	r27, 0x17	; 23
 c7c:	b0 f0       	brcs	.+44     	; 0xcaa <__fixunssfsi+0x3e>
 c7e:	e1 f0       	breq	.+56     	; 0xcb8 <__fixunssfsi+0x4c>
 c80:	66 0f       	add	r22, r22
 c82:	77 1f       	adc	r23, r23
 c84:	88 1f       	adc	r24, r24
 c86:	99 1f       	adc	r25, r25
 c88:	1a f0       	brmi	.+6      	; 0xc90 <__fixunssfsi+0x24>
 c8a:	ba 95       	dec	r27
 c8c:	c9 f7       	brne	.-14     	; 0xc80 <__fixunssfsi+0x14>
 c8e:	14 c0       	rjmp	.+40     	; 0xcb8 <__fixunssfsi+0x4c>
 c90:	b1 30       	cpi	r27, 0x01	; 1
 c92:	91 f0       	breq	.+36     	; 0xcb8 <__fixunssfsi+0x4c>
 c94:	0e 94 10 07 	call	0xe20	; 0xe20 <__fp_zero>
 c98:	b1 e0       	ldi	r27, 0x01	; 1
 c9a:	08 95       	ret
 c9c:	0c 94 10 07 	jmp	0xe20	; 0xe20 <__fp_zero>
 ca0:	67 2f       	mov	r22, r23
 ca2:	78 2f       	mov	r23, r24
 ca4:	88 27       	eor	r24, r24
 ca6:	b8 5f       	subi	r27, 0xF8	; 248
 ca8:	39 f0       	breq	.+14     	; 0xcb8 <__fixunssfsi+0x4c>
 caa:	b9 3f       	cpi	r27, 0xF9	; 249
 cac:	cc f3       	brlt	.-14     	; 0xca0 <__fixunssfsi+0x34>
 cae:	86 95       	lsr	r24
 cb0:	77 95       	ror	r23
 cb2:	67 95       	ror	r22
 cb4:	b3 95       	inc	r27
 cb6:	d9 f7       	brne	.-10     	; 0xcae <__fixunssfsi+0x42>
 cb8:	3e f4       	brtc	.+14     	; 0xcc8 <__fixunssfsi+0x5c>
 cba:	90 95       	com	r25
 cbc:	80 95       	com	r24
 cbe:	70 95       	com	r23
 cc0:	61 95       	neg	r22
 cc2:	7f 4f       	sbci	r23, 0xFF	; 255
 cc4:	8f 4f       	sbci	r24, 0xFF	; 255
 cc6:	9f 4f       	sbci	r25, 0xFF	; 255
 cc8:	08 95       	ret

00000cca <__floatunsisf>:
 cca:	e8 94       	clt
 ccc:	09 c0       	rjmp	.+18     	; 0xce0 <__floatsisf+0x12>

00000cce <__floatsisf>:
 cce:	97 fb       	bst	r25, 7
 cd0:	3e f4       	brtc	.+14     	; 0xce0 <__floatsisf+0x12>
 cd2:	90 95       	com	r25
 cd4:	80 95       	com	r24
 cd6:	70 95       	com	r23
 cd8:	61 95       	neg	r22
 cda:	7f 4f       	sbci	r23, 0xFF	; 255
 cdc:	8f 4f       	sbci	r24, 0xFF	; 255
 cde:	9f 4f       	sbci	r25, 0xFF	; 255
 ce0:	99 23       	and	r25, r25
 ce2:	a9 f0       	breq	.+42     	; 0xd0e <__floatsisf+0x40>
 ce4:	f9 2f       	mov	r31, r25
 ce6:	96 e9       	ldi	r25, 0x96	; 150
 ce8:	bb 27       	eor	r27, r27
 cea:	93 95       	inc	r25
 cec:	f6 95       	lsr	r31
 cee:	87 95       	ror	r24
 cf0:	77 95       	ror	r23
 cf2:	67 95       	ror	r22
 cf4:	b7 95       	ror	r27
 cf6:	f1 11       	cpse	r31, r1
 cf8:	f8 cf       	rjmp	.-16     	; 0xcea <__floatsisf+0x1c>
 cfa:	fa f4       	brpl	.+62     	; 0xd3a <__floatsisf+0x6c>
 cfc:	bb 0f       	add	r27, r27
 cfe:	11 f4       	brne	.+4      	; 0xd04 <__floatsisf+0x36>
 d00:	60 ff       	sbrs	r22, 0
 d02:	1b c0       	rjmp	.+54     	; 0xd3a <__floatsisf+0x6c>
 d04:	6f 5f       	subi	r22, 0xFF	; 255
 d06:	7f 4f       	sbci	r23, 0xFF	; 255
 d08:	8f 4f       	sbci	r24, 0xFF	; 255
 d0a:	9f 4f       	sbci	r25, 0xFF	; 255
 d0c:	16 c0       	rjmp	.+44     	; 0xd3a <__floatsisf+0x6c>
 d0e:	88 23       	and	r24, r24
 d10:	11 f0       	breq	.+4      	; 0xd16 <__floatsisf+0x48>
 d12:	96 e9       	ldi	r25, 0x96	; 150
 d14:	11 c0       	rjmp	.+34     	; 0xd38 <__floatsisf+0x6a>
 d16:	77 23       	and	r23, r23
 d18:	21 f0       	breq	.+8      	; 0xd22 <__floatsisf+0x54>
 d1a:	9e e8       	ldi	r25, 0x8E	; 142
 d1c:	87 2f       	mov	r24, r23
 d1e:	76 2f       	mov	r23, r22
 d20:	05 c0       	rjmp	.+10     	; 0xd2c <__floatsisf+0x5e>
 d22:	66 23       	and	r22, r22
 d24:	71 f0       	breq	.+28     	; 0xd42 <__floatsisf+0x74>
 d26:	96 e8       	ldi	r25, 0x86	; 134
 d28:	86 2f       	mov	r24, r22
 d2a:	70 e0       	ldi	r23, 0x00	; 0
 d2c:	60 e0       	ldi	r22, 0x00	; 0
 d2e:	2a f0       	brmi	.+10     	; 0xd3a <__floatsisf+0x6c>
 d30:	9a 95       	dec	r25
 d32:	66 0f       	add	r22, r22
 d34:	77 1f       	adc	r23, r23
 d36:	88 1f       	adc	r24, r24
 d38:	da f7       	brpl	.-10     	; 0xd30 <__floatsisf+0x62>
 d3a:	88 0f       	add	r24, r24
 d3c:	96 95       	lsr	r25
 d3e:	87 95       	ror	r24
 d40:	97 f9       	bld	r25, 7
 d42:	08 95       	ret

00000d44 <__fp_cmp>:
 d44:	99 0f       	add	r25, r25
 d46:	00 08       	sbc	r0, r0
 d48:	55 0f       	add	r21, r21
 d4a:	aa 0b       	sbc	r26, r26
 d4c:	e0 e8       	ldi	r30, 0x80	; 128
 d4e:	fe ef       	ldi	r31, 0xFE	; 254
 d50:	16 16       	cp	r1, r22
 d52:	17 06       	cpc	r1, r23
 d54:	e8 07       	cpc	r30, r24
 d56:	f9 07       	cpc	r31, r25
 d58:	c0 f0       	brcs	.+48     	; 0xd8a <__fp_cmp+0x46>
 d5a:	12 16       	cp	r1, r18
 d5c:	13 06       	cpc	r1, r19
 d5e:	e4 07       	cpc	r30, r20
 d60:	f5 07       	cpc	r31, r21
 d62:	98 f0       	brcs	.+38     	; 0xd8a <__fp_cmp+0x46>
 d64:	62 1b       	sub	r22, r18
 d66:	73 0b       	sbc	r23, r19
 d68:	84 0b       	sbc	r24, r20
 d6a:	95 0b       	sbc	r25, r21
 d6c:	39 f4       	brne	.+14     	; 0xd7c <__fp_cmp+0x38>
 d6e:	0a 26       	eor	r0, r26
 d70:	61 f0       	breq	.+24     	; 0xd8a <__fp_cmp+0x46>
 d72:	23 2b       	or	r18, r19
 d74:	24 2b       	or	r18, r20
 d76:	25 2b       	or	r18, r21
 d78:	21 f4       	brne	.+8      	; 0xd82 <__fp_cmp+0x3e>
 d7a:	08 95       	ret
 d7c:	0a 26       	eor	r0, r26
 d7e:	09 f4       	brne	.+2      	; 0xd82 <__fp_cmp+0x3e>
 d80:	a1 40       	sbci	r26, 0x01	; 1
 d82:	a6 95       	lsr	r26
 d84:	8f ef       	ldi	r24, 0xFF	; 255
 d86:	81 1d       	adc	r24, r1
 d88:	81 1d       	adc	r24, r1
 d8a:	08 95       	ret

00000d8c <__fp_inf>:
 d8c:	97 f9       	bld	r25, 7
 d8e:	9f 67       	ori	r25, 0x7F	; 127
 d90:	80 e8       	ldi	r24, 0x80	; 128
 d92:	70 e0       	ldi	r23, 0x00	; 0
 d94:	60 e0       	ldi	r22, 0x00	; 0
 d96:	08 95       	ret

00000d98 <__fp_nan>:
 d98:	9f ef       	ldi	r25, 0xFF	; 255
 d9a:	80 ec       	ldi	r24, 0xC0	; 192
 d9c:	08 95       	ret

00000d9e <__fp_pscA>:
 d9e:	00 24       	eor	r0, r0
 da0:	0a 94       	dec	r0
 da2:	16 16       	cp	r1, r22
 da4:	17 06       	cpc	r1, r23
 da6:	18 06       	cpc	r1, r24
 da8:	09 06       	cpc	r0, r25
 daa:	08 95       	ret

00000dac <__fp_pscB>:
 dac:	00 24       	eor	r0, r0
 dae:	0a 94       	dec	r0
 db0:	12 16       	cp	r1, r18
 db2:	13 06       	cpc	r1, r19
 db4:	14 06       	cpc	r1, r20
 db6:	05 06       	cpc	r0, r21
 db8:	08 95       	ret

00000dba <__fp_round>:
 dba:	09 2e       	mov	r0, r25
 dbc:	03 94       	inc	r0
 dbe:	00 0c       	add	r0, r0
 dc0:	11 f4       	brne	.+4      	; 0xdc6 <__fp_round+0xc>
 dc2:	88 23       	and	r24, r24
 dc4:	52 f0       	brmi	.+20     	; 0xdda <__fp_round+0x20>
 dc6:	bb 0f       	add	r27, r27
 dc8:	40 f4       	brcc	.+16     	; 0xdda <__fp_round+0x20>
 dca:	bf 2b       	or	r27, r31
 dcc:	11 f4       	brne	.+4      	; 0xdd2 <__fp_round+0x18>
 dce:	60 ff       	sbrs	r22, 0
 dd0:	04 c0       	rjmp	.+8      	; 0xdda <__fp_round+0x20>
 dd2:	6f 5f       	subi	r22, 0xFF	; 255
 dd4:	7f 4f       	sbci	r23, 0xFF	; 255
 dd6:	8f 4f       	sbci	r24, 0xFF	; 255
 dd8:	9f 4f       	sbci	r25, 0xFF	; 255
 dda:	08 95       	ret

00000ddc <__fp_split3>:
 ddc:	57 fd       	sbrc	r21, 7
 dde:	90 58       	subi	r25, 0x80	; 128
 de0:	44 0f       	add	r20, r20
 de2:	55 1f       	adc	r21, r21
 de4:	59 f0       	breq	.+22     	; 0xdfc <__fp_splitA+0x10>
 de6:	5f 3f       	cpi	r21, 0xFF	; 255
 de8:	71 f0       	breq	.+28     	; 0xe06 <__fp_splitA+0x1a>
 dea:	47 95       	ror	r20

00000dec <__fp_splitA>:
 dec:	88 0f       	add	r24, r24
 dee:	97 fb       	bst	r25, 7
 df0:	99 1f       	adc	r25, r25
 df2:	61 f0       	breq	.+24     	; 0xe0c <__fp_splitA+0x20>
 df4:	9f 3f       	cpi	r25, 0xFF	; 255
 df6:	79 f0       	breq	.+30     	; 0xe16 <__fp_splitA+0x2a>
 df8:	87 95       	ror	r24
 dfa:	08 95       	ret
 dfc:	12 16       	cp	r1, r18
 dfe:	13 06       	cpc	r1, r19
 e00:	14 06       	cpc	r1, r20
 e02:	55 1f       	adc	r21, r21
 e04:	f2 cf       	rjmp	.-28     	; 0xdea <__fp_split3+0xe>
 e06:	46 95       	lsr	r20
 e08:	f1 df       	rcall	.-30     	; 0xdec <__fp_splitA>
 e0a:	08 c0       	rjmp	.+16     	; 0xe1c <__fp_splitA+0x30>
 e0c:	16 16       	cp	r1, r22
 e0e:	17 06       	cpc	r1, r23
 e10:	18 06       	cpc	r1, r24
 e12:	99 1f       	adc	r25, r25
 e14:	f1 cf       	rjmp	.-30     	; 0xdf8 <__fp_splitA+0xc>
 e16:	86 95       	lsr	r24
 e18:	71 05       	cpc	r23, r1
 e1a:	61 05       	cpc	r22, r1
 e1c:	08 94       	sec
 e1e:	08 95       	ret

00000e20 <__fp_zero>:
 e20:	e8 94       	clt

00000e22 <__fp_szero>:
 e22:	bb 27       	eor	r27, r27
 e24:	66 27       	eor	r22, r22
 e26:	77 27       	eor	r23, r23
 e28:	cb 01       	movw	r24, r22
 e2a:	97 f9       	bld	r25, 7
 e2c:	08 95       	ret

00000e2e <__gesf2>:
 e2e:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fp_cmp>
 e32:	08 f4       	brcc	.+2      	; 0xe36 <__gesf2+0x8>
 e34:	8f ef       	ldi	r24, 0xFF	; 255
 e36:	08 95       	ret

00000e38 <__mulsf3>:
 e38:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__mulsf3x>
 e3c:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_round>
 e40:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__fp_pscA>
 e44:	38 f0       	brcs	.+14     	; 0xe54 <__mulsf3+0x1c>
 e46:	0e 94 d6 06 	call	0xdac	; 0xdac <__fp_pscB>
 e4a:	20 f0       	brcs	.+8      	; 0xe54 <__mulsf3+0x1c>
 e4c:	95 23       	and	r25, r21
 e4e:	11 f0       	breq	.+4      	; 0xe54 <__mulsf3+0x1c>
 e50:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <__fp_inf>
 e54:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__fp_nan>
 e58:	11 24       	eor	r1, r1
 e5a:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__fp_szero>

00000e5e <__mulsf3x>:
 e5e:	0e 94 ee 06 	call	0xddc	; 0xddc <__fp_split3>
 e62:	70 f3       	brcs	.-36     	; 0xe40 <__mulsf3+0x8>

00000e64 <__mulsf3_pse>:
 e64:	95 9f       	mul	r25, r21
 e66:	c1 f3       	breq	.-16     	; 0xe58 <__mulsf3+0x20>
 e68:	95 0f       	add	r25, r21
 e6a:	50 e0       	ldi	r21, 0x00	; 0
 e6c:	55 1f       	adc	r21, r21
 e6e:	62 9f       	mul	r22, r18
 e70:	f0 01       	movw	r30, r0
 e72:	72 9f       	mul	r23, r18
 e74:	bb 27       	eor	r27, r27
 e76:	f0 0d       	add	r31, r0
 e78:	b1 1d       	adc	r27, r1
 e7a:	63 9f       	mul	r22, r19
 e7c:	aa 27       	eor	r26, r26
 e7e:	f0 0d       	add	r31, r0
 e80:	b1 1d       	adc	r27, r1
 e82:	aa 1f       	adc	r26, r26
 e84:	64 9f       	mul	r22, r20
 e86:	66 27       	eor	r22, r22
 e88:	b0 0d       	add	r27, r0
 e8a:	a1 1d       	adc	r26, r1
 e8c:	66 1f       	adc	r22, r22
 e8e:	82 9f       	mul	r24, r18
 e90:	22 27       	eor	r18, r18
 e92:	b0 0d       	add	r27, r0
 e94:	a1 1d       	adc	r26, r1
 e96:	62 1f       	adc	r22, r18
 e98:	73 9f       	mul	r23, r19
 e9a:	b0 0d       	add	r27, r0
 e9c:	a1 1d       	adc	r26, r1
 e9e:	62 1f       	adc	r22, r18
 ea0:	83 9f       	mul	r24, r19
 ea2:	a0 0d       	add	r26, r0
 ea4:	61 1d       	adc	r22, r1
 ea6:	22 1f       	adc	r18, r18
 ea8:	74 9f       	mul	r23, r20
 eaa:	33 27       	eor	r19, r19
 eac:	a0 0d       	add	r26, r0
 eae:	61 1d       	adc	r22, r1
 eb0:	23 1f       	adc	r18, r19
 eb2:	84 9f       	mul	r24, r20
 eb4:	60 0d       	add	r22, r0
 eb6:	21 1d       	adc	r18, r1
 eb8:	82 2f       	mov	r24, r18
 eba:	76 2f       	mov	r23, r22
 ebc:	6a 2f       	mov	r22, r26
 ebe:	11 24       	eor	r1, r1
 ec0:	9f 57       	subi	r25, 0x7F	; 127
 ec2:	50 40       	sbci	r21, 0x00	; 0
 ec4:	9a f0       	brmi	.+38     	; 0xeec <__mulsf3_pse+0x88>
 ec6:	f1 f0       	breq	.+60     	; 0xf04 <__mulsf3_pse+0xa0>
 ec8:	88 23       	and	r24, r24
 eca:	4a f0       	brmi	.+18     	; 0xede <__mulsf3_pse+0x7a>
 ecc:	ee 0f       	add	r30, r30
 ece:	ff 1f       	adc	r31, r31
 ed0:	bb 1f       	adc	r27, r27
 ed2:	66 1f       	adc	r22, r22
 ed4:	77 1f       	adc	r23, r23
 ed6:	88 1f       	adc	r24, r24
 ed8:	91 50       	subi	r25, 0x01	; 1
 eda:	50 40       	sbci	r21, 0x00	; 0
 edc:	a9 f7       	brne	.-22     	; 0xec8 <__mulsf3_pse+0x64>
 ede:	9e 3f       	cpi	r25, 0xFE	; 254
 ee0:	51 05       	cpc	r21, r1
 ee2:	80 f0       	brcs	.+32     	; 0xf04 <__mulsf3_pse+0xa0>
 ee4:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <__fp_inf>
 ee8:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__fp_szero>
 eec:	5f 3f       	cpi	r21, 0xFF	; 255
 eee:	e4 f3       	brlt	.-8      	; 0xee8 <__mulsf3_pse+0x84>
 ef0:	98 3e       	cpi	r25, 0xE8	; 232
 ef2:	d4 f3       	brlt	.-12     	; 0xee8 <__mulsf3_pse+0x84>
 ef4:	86 95       	lsr	r24
 ef6:	77 95       	ror	r23
 ef8:	67 95       	ror	r22
 efa:	b7 95       	ror	r27
 efc:	f7 95       	ror	r31
 efe:	e7 95       	ror	r30
 f00:	9f 5f       	subi	r25, 0xFF	; 255
 f02:	c1 f7       	brne	.-16     	; 0xef4 <__mulsf3_pse+0x90>
 f04:	fe 2b       	or	r31, r30
 f06:	88 0f       	add	r24, r24
 f08:	91 1d       	adc	r25, r1
 f0a:	96 95       	lsr	r25
 f0c:	87 95       	ror	r24
 f0e:	97 f9       	bld	r25, 7
 f10:	08 95       	ret

00000f12 <_exit>:
 f12:	f8 94       	cli

00000f14 <__stop_program>:
 f14:	ff cf       	rjmp	.-2      	; 0xf14 <__stop_program>
